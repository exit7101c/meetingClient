<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-buttons slot="start">
          <BackButton />
        </ion-buttons>
      </ion-toolbar>
    </ion-header>
    <ion-content>
      <div class="layout-container">
        <!-- title -->
        <JoinTitle>
          <template v-slot:title>본인확인이 필요해요</template>
          <template v-slot:desc>
            NICE 평가정보를 통해 본인인증을 진행 중입니다. <br />
            본인 확인의 용도로만 사용되며, 인증 직후 개인정보를 수집하지
            않습니다.
            <br />
            회원 관리를 위한 필수정보의 경우
            <ion-text color="warning">데이터 보안 암호화</ion-text>
            를 하여 개인정보를 보호합니다.
          </template>
        </JoinTitle>
        <!-- 본인 인증 내용 -->
        <VerificationInfo />
        <!-- TODO: 본인 인증 팝업 연결 후 작업 -->
      </div>
    </ion-content>
    <ion-footer class="join-footer">
      <div class="layout-container">
        <div class="btn-group">
          <ion-button
            color="primary"
            size="large"
            expand="block"
            shape="round"
            @click="validateUser"
          >
            <ion-ripple-effect></ion-ripple-effect>
            본인인증 하기
          </ion-button>
        </div>
      </div>
    </ion-footer>
  </ion-page>
</template>
<script>
import JoinTitle from "@/components/JoinTitle.vue";
import VerificationInfo from "@/components/VerificationInfo.vue";
import { tempMap, joinMap, getJoinData, getData } from "@/assets/js/common";
import { Browser } from "@capacitor/browser";
import { Capacitor } from "@capacitor/core";

export default {
  name: "Register",
  inject: ["alertController"],
  components: {
    JoinTitle,
    VerificationInfo
  },
  data() {
    return {
      token_version_id: ""
    };
  },
  computed: {},
  mounted() {
  },
  methods: {
    calculAge(birth) {
      let date = new Date(birth);
      // 생년월일을 '년', '월', '일'로 분리
      let birthYear = date.getFullYear();
      let birthMonth = date.getMonth() + 1; //javascript 월 계산시 0부터 시작하므로 +1
      let birthDay = date.getDate();

      // 현재 날짜를 가져옵니다.
      let currentDate = new Date();
      let currentYear = currentDate.getFullYear();
      let currentMonth = currentDate.getMonth() + 1; //javascript 월 계산시 0부터 시작하므로 +1
      let currentDay = currentDate.getDate();

      // 만 나이를 계산
      let age = currentYear - birthYear;

      // 현재 월과 생일의 월을 비교 후 현재 월과 생일의 월이 같은 경우, 현재 일과 생일의 일을 비교
      if (currentMonth < birthMonth) {
        age--;
      } else if (currentMonth == birthMonth && currentDay < birthDay) {
        age--;
      }
      return age;
    },

    /** 본인인증 **/
    validateUser() {
      const self = this;

      //초기화 처리
      let interval = null;
      self.token_version_id = "";

      let ua = Capacitor.getPlatform().toString().toLowerCase();

      const authData = () => {
        // Interval 실행중이면 종료(ios 만 해당)
        if (interval) {
          clearInterval(interval);
        }
        getJoinData({
          url: "/join/getUserAuthData",
          param: {
            token_version_id: self.token_version_id
          },
          then: (userAuth) => {
            //본인인증 unique데이터 받아왔을 때(ci: 주민등록번호 암호화)
            if (userAuth.ci) {
              //유저 성인 및 성별 체크 변수 초기화
              let message = "";
              let pass = false;

              // 유저 성인 체크(만 나이 계산)
              let age = this.calculAge(userAuth.birthDate);
              if (age < 19) {
                message = "만 19세 이상만 이용하실 수 있습니다.";
              } else {
                // 유저 성별 체크
                // gender  1:  남자, 0: 여자
                if (userAuth.gender == "0") {
                  message = "남자 이용자만 이용하실 수 있습니다.";
                } else {
                  //성인남자만 pass
                  pass = true;
                  userAuth.age = age;
                }
              }

              // 본인인증 + 성인 + 성별 체크 끝난 후
              if (pass) {
                //유저 중복확인
                getJoinData({
                  url: "/join/selectGetCerti",
                  param: {
                    ci: userAuth.ci
                  },
                  then: (exist) => {
                    if (exist.result == "possible") {
                      this.$store.state.joinMap = userAuth;
                      self.$router.push("/join");
                    } else if (exist.result == "exist") {
                      self.warningAlert(
                        "이미 등록된 사용자입니다.<br />아이디/비밀번호 찾기를 이용해 주세요."
                      );
                      self.$router.push("/login");
                    } else if (exist.result == "drop") {
                      self.warningAlert(
                        "탈퇴한 사용자 입니다.<br />탈퇴 후 30일간 회원가입이 제한됩니다."
                      );
                      self.$router.push("/start");
                    } else if (exist.result == "reset") {
                      self.confirm(userAuth);
                    }
                    //이벤트 리스너 제거
                    Browser.removeAllListeners();
                  }
                });
              } else {
                Browser.removeAllListeners();
                self.warningAlert(message);
                self.$router.push("/login");
              }
            } else {
              Browser.removeAllListeners();
            }
          }
        });
      };

      //niceapi 요청보낼 암호화 데이터 가져오기
      getJoinData({
        url: "/join/getNiceAPI",
        param: {},
        then: (data) => {
          const OpenOptions = {
            url: `http://139.150.69.51:8034/join/startCerti.do?token_version_id=${encodeURIComponent(
              data.token_version_id
            )}&enc_data=${encodeURIComponent(
              data.enc_data
            )}&integrity_value=${encodeURIComponent(
              data.integrity_value
            )}&userAgent=${ua}`
            // url: `http://127.0.0.1:8080/join/startCerti.do?startCerti.do?token_version_id=${token_version_id}&enc_data=${enc_data}&integrity_value=${integrity_value}`,
            // windowName: '_blank',  //default : _blank
            // presentationStyle: "fullscreen" //'popover' //default : fullscreen
          };

          self.token_version_id = data.token_version_id;

          //브라우저를 닫을 때 이벤트
          Browser.addListener("browserFinished", () => {
            //처리결과를 서버에서 조회한다.
            authData();
          });
          //browser open
          const openCapacitorSite = Browser.open(OpenOptions);

          //DB조회 Interval 추가(주기적으로 완료되었는지 감시하고 완료되었다면 팝업을 종료한다)
          //브라우저 닫을 때 처리 결과를 서버에서 조회한다. (ios)
          if (ua == "ios" || ua == "web") {
            if (!interval) {
              interval = setInterval(() => {
                //본인인증이 잘 저장되었는지 주기적으로 조회한다.
                getJoinData({
                  url: "/join/getUserAuthData",
                  param: {
                    token_version_id: self.token_version_id
                  },
                  then: (userAuth) => {
                    //값이 존재한다면 팝업창을 강제로 닫는다.
                    if (userAuth.ci) {
                      Browser.close().then(() => {
                        //처리결과를 서버에서 조회한다.
                        authData();
                      });
                    }
                  }
                });
              }, 1000);
            }
          }
        }
      });
    },
    /** 경고 팝업 **/
    async warningAlert(message) {
      const alert = await this.alertController.create({
        header: "",
        subHeader: "",
        message: message,
        buttons: ["OK"]
      });
      return alert.present();
    },

    /** 취소 or 예 버튼 **/
    async confirm(userAuth) {
      const alert = await this.alertController.create({
        //cssClass: 'my-custom-class',
        header: "",
        message: "탈퇴한 계정이 존재합니다. 활성화 시키시겠습니까?",
        buttons: [
          {
            text: "취소",
            role: "cancel",
            cssClass: "secondary",
            handler: () => {
            }
          },
          {
            text: "예",
            handler: () => {
              getData({
                url: "/join/setDropReset",
                param: {
                  ci: userAuth.ci
                },
                then: (data) => {
                  if (data.successYn == "Y") {
                    this.warningAlert(data.message);
                    this.$router.push("/login");
                  } else {
                    this.warningAlert(data.message);
                  }
                }
              });
            }
          }
        ]
      });
      return alert.present();
    }
  }
};
</script>
