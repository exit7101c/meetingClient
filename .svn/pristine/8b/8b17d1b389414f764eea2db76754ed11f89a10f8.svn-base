"use strict";(self["webpackChunknavy"]=self["webpackChunknavy"]||[]).push([[3176],{33176:(t,e,i)=>{i.r(e),i.d(e,{FilesystemWeb:()=>n});var r=i(29895),o=i(64963);function s(t){const e=t.split("/").filter((t=>"."!==t)),i=[];return e.forEach((t=>{".."===t&&i.length>0&&".."!==i[i.length-1]?i.pop():i.push(t)})),i.join("/")}function a(t,e){t=s(t),e=s(e);const i=t.split("/"),r=e.split("/");return t!==e&&i.every(((t,e)=>t===r[e]))}class n extends r.Uw{constructor(){super(...arguments),this.DB_VERSION=1,this.DB_NAME="Disc",this._writeCmds=["add","put","delete"],this.downloadFile=async t=>{const e=(0,r.Sd)(t,t.webFetchExtra),i=await fetch(t.url,e);let o;if(null===t||void 0===t?void 0:t.progress)if(null===i||void 0===i?void 0:i.body){const e=i.body.getReader();let r=0;const s=[],a=i.headers.get("content-type"),n=parseInt(i.headers.get("content-length")||"0",10);while(1){const{done:i,value:o}=await e.read();if(i)break;s.push(o),r+=(null===o||void 0===o?void 0:o.length)||0;const a={url:t.url,bytes:r,contentLength:n};this.notifyListeners("progress",a)}const d=new Uint8Array(r);let c=0;for(const t of s)"undefined"!==typeof t&&(d.set(t,c),c+=t.length);o=new Blob([d.buffer],{type:a||void 0})}else o=new Blob;else o=await i.blob();const s=URL.createObjectURL(o),a=document.createElement("a");return document.body.appendChild(a),a.href=s,a.download=t.path,a.click(),URL.revokeObjectURL(s),document.body.removeChild(a),{path:t.path,blob:o}}}async initDb(){if(void 0!==this._db)return this._db;if(!("indexedDB"in window))throw this.unavailable("This browser doesn't support IndexedDB");return new Promise(((t,e)=>{const i=indexedDB.open(this.DB_NAME,this.DB_VERSION);i.onupgradeneeded=n.doUpgrade,i.onsuccess=()=>{this._db=i.result,t(i.result)},i.onerror=()=>e(i.error),i.onblocked=()=>{console.warn("db blocked")}}))}static doUpgrade(t){const e=t.target,i=e.result;switch(t.oldVersion){case 0:case 1:default:{i.objectStoreNames.contains("FileStorage")&&i.deleteObjectStore("FileStorage");const t=i.createObjectStore("FileStorage",{keyPath:"path"});t.createIndex("by_folder","folder")}}}async dbRequest(t,e){const i=-1!==this._writeCmds.indexOf(t)?"readwrite":"readonly";return this.initDb().then((r=>new Promise(((o,s)=>{const a=r.transaction(["FileStorage"],i),n=a.objectStore("FileStorage"),d=n[t](...e);d.onsuccess=()=>o(d.result),d.onerror=()=>s(d.error)}))))}async dbIndexRequest(t,e,i){const r=-1!==this._writeCmds.indexOf(e)?"readwrite":"readonly";return this.initDb().then((o=>new Promise(((s,a)=>{const n=o.transaction(["FileStorage"],r),d=n.objectStore("FileStorage"),c=d.index(t),h=c[e](...i);h.onsuccess=()=>s(h.result),h.onerror=()=>a(h.error)}))))}getPath(t,e){const i=void 0!==e?e.replace(/^[/]+|[/]+$/g,""):"";let r="";return void 0!==t&&(r+="/"+t),""!==e&&(r+="/"+i),r}async clear(){const t=await this.initDb(),e=t.transaction(["FileStorage"],"readwrite"),i=e.objectStore("FileStorage");i.clear()}async readFile(t){const e=this.getPath(t.directory,t.path),i=await this.dbRequest("get",[e]);if(void 0===i)throw Error("File does not exist.");return{data:i.content?i.content:""}}async writeFile(t){const e=this.getPath(t.directory,t.path);let i=t.data;const r=t.encoding,o=t.recursive,s=await this.dbRequest("get",[e]);if(s&&"directory"===s.type)throw Error("The supplied path is a directory.");const a=e.substr(0,e.lastIndexOf("/")),n=await this.dbRequest("get",[a]);if(void 0===n){const e=a.indexOf("/",1);if(-1!==e){const i=a.substr(e);await this.mkdir({path:i,directory:t.directory,recursive:o})}}if(!r&&(i=i.indexOf(",")>=0?i.split(",")[1]:i,!this.isBase64String(i)))throw Error("The supplied data is not valid base64 content.");const d=Date.now(),c={path:e,folder:a,type:"file",size:i.length,ctime:d,mtime:d,content:i};return await this.dbRequest("put",[c]),{uri:c.path}}async appendFile(t){const e=this.getPath(t.directory,t.path);let i=t.data;const r=t.encoding,o=e.substr(0,e.lastIndexOf("/")),s=Date.now();let a=s;const n=await this.dbRequest("get",[e]);if(n&&"directory"===n.type)throw Error("The supplied path is a directory.");const d=await this.dbRequest("get",[o]);if(void 0===d){const e=o.indexOf("/",1);if(-1!==e){const i=o.substr(e);await this.mkdir({path:i,directory:t.directory,recursive:!0})}}if(!r&&!this.isBase64String(i))throw Error("The supplied data is not valid base64 content.");void 0!==n&&(i=void 0===n.content||r?n.content+i:btoa(atob(n.content)+atob(i)),a=n.ctime);const c={path:e,folder:o,type:"file",size:i.length,ctime:a,mtime:s,content:i};await this.dbRequest("put",[c])}async deleteFile(t){const e=this.getPath(t.directory,t.path),i=await this.dbRequest("get",[e]);if(void 0===i)throw Error("File does not exist.");const r=await this.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(e)]);if(0!==r.length)throw Error("Folder is not empty.");await this.dbRequest("delete",[e])}async mkdir(t){const e=this.getPath(t.directory,t.path),i=t.recursive,r=e.substr(0,e.lastIndexOf("/")),o=(e.match(/\//g)||[]).length,s=await this.dbRequest("get",[r]),a=await this.dbRequest("get",[e]);if(1===o)throw Error("Cannot create Root directory");if(void 0!==a)throw Error("Current directory does already exist.");if(!i&&2!==o&&void 0===s)throw Error("Parent directory must exist");if(i&&2!==o&&void 0===s){const e=r.substr(r.indexOf("/",1));await this.mkdir({path:e,directory:t.directory,recursive:i})}const n=Date.now(),d={path:e,folder:r,type:"directory",size:0,ctime:n,mtime:n};await this.dbRequest("put",[d])}async rmdir(t){const{path:e,directory:i,recursive:r}=t,o=this.getPath(i,e),s=await this.dbRequest("get",[o]);if(void 0===s)throw Error("Folder does not exist.");if("directory"!==s.type)throw Error("Requested path is not a directory");const a=await this.readdir({path:e,directory:i});if(0!==a.files.length&&!r)throw Error("Folder is not empty");for(const n of a.files){const t=`${e}/${n.name}`,o=await this.stat({path:t,directory:i});"file"===o.type?await this.deleteFile({path:t,directory:i}):await this.rmdir({path:t,directory:i,recursive:r})}await this.dbRequest("delete",[o])}async readdir(t){const e=this.getPath(t.directory,t.path),i=await this.dbRequest("get",[e]);if(""!==t.path&&void 0===i)throw Error("Folder does not exist.");const r=await this.dbIndexRequest("by_folder","getAllKeys",[IDBKeyRange.only(e)]),o=await Promise.all(r.map((async t=>{let i=await this.dbRequest("get",[t]);return void 0===i&&(i=await this.dbRequest("get",[t+"/"])),{name:t.substring(e.length+1),type:i.type,size:i.size,ctime:i.ctime,mtime:i.mtime,uri:i.path}})));return{files:o}}async getUri(t){const e=this.getPath(t.directory,t.path);let i=await this.dbRequest("get",[e]);return void 0===i&&(i=await this.dbRequest("get",[e+"/"])),{uri:(null===i||void 0===i?void 0:i.path)||e}}async stat(t){const e=this.getPath(t.directory,t.path);let i=await this.dbRequest("get",[e]);if(void 0===i&&(i=await this.dbRequest("get",[e+"/"])),void 0===i)throw Error("Entry does not exist.");return{type:i.type,size:i.size,ctime:i.ctime,mtime:i.mtime,uri:i.path}}async rename(t){await this._copy(t,!0)}async copy(t){return this._copy(t,!1)}async requestPermissions(){return{publicStorage:"granted"}}async checkPermissions(){return{publicStorage:"granted"}}async _copy(t,e=!1){let{toDirectory:i}=t;const{to:r,from:s,directory:n}=t;if(!r||!s)throw Error("Both to and from must be provided");i||(i=n);const d=this.getPath(n,s),c=this.getPath(i,r);if(d===c)return{uri:c};if(a(d,c))throw Error("To path cannot contain the from path");let h;try{h=await this.stat({path:r,directory:i})}catch(p){const t=r.split("/");t.pop();const e=t.join("/");if(t.length>0){const t=await this.stat({path:e,directory:i});if("directory"!==t.type)throw new Error("Parent directory of the to path is a file")}}if(h&&"directory"===h.type)throw new Error("Cannot overwrite a directory with a file");const l=await this.stat({path:s,directory:n}),u=async(t,e,r)=>{const o=this.getPath(i,t),s=await this.dbRequest("get",[o]);s.ctime=e,s.mtime=r,await this.dbRequest("put",[s])},y=l.ctime?l.ctime:Date.now();switch(l.type){case"file":{const t=await this.readFile({path:s,directory:n});let a;e&&await this.deleteFile({path:s,directory:n}),this.isBase64String(t.data)||(a=o.ez.UTF8);const d=await this.writeFile({path:r,directory:i,data:t.data,encoding:a});return e&&await u(r,y,l.mtime),d}case"directory":{if(h)throw Error("Cannot move a directory over an existing object");try{await this.mkdir({path:r,directory:i,recursive:!1}),e&&await u(r,y,l.mtime)}catch(p){}const t=(await this.readdir({path:s,directory:n})).files;for(const o of t)await this._copy({from:`${s}/${o.name}`,to:`${r}/${o.name}`,directory:n,toDirectory:i},e);e&&await this.rmdir({path:s,directory:n})}}return{uri:c}}isBase64String(t){try{return btoa(atob(t))==t}catch(e){return!1}}}n._debug=!0}}]);
//# sourceMappingURL=3176.55a2f033.js.map