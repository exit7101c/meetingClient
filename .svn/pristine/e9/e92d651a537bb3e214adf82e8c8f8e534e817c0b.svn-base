<template>
  <ion-page>
    <ion-header>
      <ion-toolbar style="--background: #1c1d48;">
        <ion-buttons slot="start">
          <BackButton />
        </ion-buttons>
        <ion-title> 제휴업소</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content>
      <div id="partnersMap" style="width: 100%; height: 100%;"></div>
      <ion-modal
        :is-open="mapInfoModal"
        handle-behavior="cycle"
        @ionModalDidDismiss="mapInfoModal = false"
        :initial-breakpoint="0.95"
        :breakpoints="[0, 0.95]"
        class="custom-modal bottom-modal"
      >
        <ion-content>
          <CustomModalLayout>
            <template #header>
              <div class="row-box">
                <ion-row>
                  <img :src="'https://' + modalItem.cdnNm" style="width: 100%; height: 150px; text-align: center" />
                  <ion-text color="light">
                    <h3>{{ modalItem.partnersName }}</h3>
                  </ion-text>
                </ion-row>
              </div>
            </template>
            <template #content>
              <ion-text color="light" class="text-xl" style="font-size: 20px; ">
                {{ modalItem.partnersAddress }}
              </ion-text>
              <ion-text color="light" class="text-xl" style="font-size: 20px; ">
                <br />영업시간 : {{ modalItem.openTime }} ~ {{ modalItem.closeTime }}
              </ion-text>
            </template>
            <template #footer>
              <ion-text color="light" class="text-xl" style="font-size: 20px; ">
                {{ modalItem.partnersNumber }}
              </ion-text>
            </template>
          </CustomModalLayout>
        </ion-content>
      </ion-modal>
    </ion-content>
  </ion-page>
</template>

<script>

import {
  IonPage, IonHeader, IonIcon, IonButtons, IonButton,
  IonToolbar, IonContent
} from "@ionic/vue";

import { chevronBack, closeOutline, search, locationOutline } from "ionicons/icons";
import { getData } from "@/assets/js/common";
import MessageTalkMapUserInfo from "@/components/MessageTalk/MessageTalkMapUserInfo";
import BackButton from "@/components/BackButton.vue";
import { MarkerClustering } from "@/assets/js/MarkerClustering";
import { Capacitor } from "@capacitor/core";
import { Geolocation } from "@capacitor/geolocation";

export default {
  name: "PartnersMap",
  components: {
    BackButton, IonPage, IonHeader, IonToolbar, IonIcon, IonButtons, IonButton, IonContent
  },
  data() {
    return {
      MessageTalkMapUserInfo,
      locationOutline,
      search,
      closeOutline,
      chevronBack,

      mapInfoModal: false,

      map: null,

      itemList: [],
      modalItem: {},

      lat: "",
      lng: "",
      gpsLat: "",
      gpsLon: "",

      markers: [],

      htmlMarker1: {
        content: "<div class='marker' style='display: flex; align-items: center; justify-content: center; background-color: #191A37; color: #fff; font-size: 20px; font-weight: 700; box-shadow: 6px 6px 10px rgba(color: #000000, alpha: 0.16);'></div>",
        size: window.naver.maps.Size(40, 40),
        anchor: window.naver.maps.Point(20, 20)
      },
      htmlMarker2: {
        content: "<div class='marker' style='display: flex; align-items: center; justify-content: center; background-color: #191A37; color: #fff; font-size: 20px; font-weight: 700; box-shadow: 6px 6px 10px rgba(color: #000000, alpha: 0.16);'></div>",
        size: window.naver.maps.Size(40, 40),
        anchor: window.naver.maps.Point(20, 20)
      },
      htmlMarker3: {
        content: "<div class='marker' style='display: flex; align-items: center; justify-content: center; background-color: #191A37; color: #fff; font-size: 20px; font-weight: 700; box-shadow: 6px 6px 10px rgba(color: #000000, alpha: 0.16);'></div>",
        size: window.naver.maps.Size(40, 40),
        anchor: window.naver.maps.Point(20, 20)
      },
      htmlMarker4: {
        content: "<div class='marker' style='display: flex; align-items: center; justify-content: center; background-color: #191A37; color: #fff; font-size: 20px; font-weight: 700; box-shadow: 6px 6px 10px rgba(color: #000000, alpha: 0.16);'></div>",
        size: window.naver.maps.Size(40, 40),
        anchor: window.naver.maps.Point(20, 20)
      },
      htmlMarker5: {
        content: "<div class='marker' style='display: flex; align-items: center; justify-content: center; background-color: #191A37; color: #fff; font-size: 20px; font-weight: 700; box-shadow: 6px 6px 10px rgba(color: #000000, alpha: 0.16);'></div>",
        size: window.naver.maps.Size(40, 40),
        anchor: window.naver.maps.Point(20, 20)
      }
    };
  },
  ionViewWillEnter() {
    // 진입할 때 호출
    this.getGps();
    this.partnersMap();
  },
  ionViewDidLeave() {
    // 떠날 때 호출
  },
  mounted() {
  },
  methods: {
    async getGps() {
      if (Capacitor.getPlatform() !== "web") {
        await Geolocation.getCurrentPosition().then((position) => {
          this.gpsLat = position.coords.latitude;
          this.gpsLon = position.coords.longitude;
        });
      } else {
        console.log("[개발환경] web 에서 GPS는 활성화 되지 않습니다.");
        clearInterval(this.intervalLatLon);
      }
    },

    partnersMap() {
      getData({
        url: "/messageMain/getPartnersMap",
        param: {},
        then: (data) => {
          this.itemList = data;

          console.log("this.gpsLat : : : ",this.gpsLat)
          console.log("this.gpsLon : : : ",this.gpsLon)
          this.$nextTick(() => {
            if (this.gpsLat == "" || this.gpsLon == "") {
              /** 값이 없을때 광화문으로 고정값 **/
              this.lat = 37.5751959;
              this.lon = 126.9764627;
            } else {
              this.lat = this.gpsLat;
              this.lon = this.gpsLon;
            }
            this.naverMap( this.lat,  this.lon );
            // this.naverMap();
          });
        }
      });
    },
    naverMap(lat, lng) {
      // this.getGps();

      let self = this;
      const navermaps = window.naver.maps;
      const mapEl = document.getElementById("partnersMap");
      if (mapEl == null) {
        return;
      }
      let mapOptions = {
        center: new navermaps.LatLng(lat, lng),
        zoom: 15,
        /** 줌 컨트롤러 **/
        zoomControl: true,
        zoomControlOptions: {
          style: navermaps.ZoomControlStyle.LARGE,
          position: navermaps.Position.TOP_RIGHT
        }
      };

      /** 맵 생성 **/
      this.map = new navermaps.Map(mapEl, mapOptions);

      // 지도 초기화 후 커스텀 컨트롤 생성
      navermaps.Event.once(this.map, "init", () => {
        /** 현재위치로 이동 버튼 **/
        let locationBtnHtml = `<a style="
                z-index: 100;
                overflow: hidden;
                display: inline-block;
                position: absolute;
                top: 7px;
                left: 5px;
                width: 34px;
                height: 34px;
                border: 1px solid rgba(58,70,88,.45);
                border-radius: 2px;
                background: #fcfcfd;
                  background-clip: border-box;
                text-align: center;
                -webkit-background-clip: padding;
                background-clip: padding-box;
              "
            >
            <span style="
                overflow: hidden;
                display: inline-block;
                color: transparent !important;
                vertical-align: top;
                background: url(https://ssl.pstatic.net/static/maps/m/spr_trff_v6.png) 0 0;
                background-position-x: 0px;
                background-position-y: 0px;
                background-size: auto;
                background-size: 200px 200px;
                -webkit-background-size: 200px 200px;
                width: 20px;
                height: 20px;
                margin: 7px 0 0 0;
                background-position: -153px -31px;
              ">중심위치</span>
           </a>`;
        let customControl = new navermaps.CustomControl(locationBtnHtml, {
          position: window.naver.maps.Position.TOP_LEFT // 버튼의 위치 설정
        });

        customControl.setMap(this.map); // 버튼을 지도에 추가
        /** 현재위치로 이동 버튼 **/

        window.naver.maps.Event.addDOMListener(
          customControl.getElement(),
          "click",
          () => {
            this.map.setCenter(new navermaps.LatLng(this.lat, this.lng)); // 버튼 클릭 시 지도 중심 변경
          }
        );
      });

      // 마커 초기화
      this.markers = [];
      /** 마커 생성 **/
      this.itemList.forEach((markerInfo) => {
        const markerLatLng = new navermaps.LatLng(markerInfo.lat, markerInfo.lon);

        const marker = new navermaps.Marker({
          position: markerLatLng,
          map: this.map,
          icon: {
            content: `<div class="marker"><img src="https://${markerInfo.cdnThumbNm}" /></div>`,
            // url: 'https://' + markerInfo.cdnThumbNm, // 마커의 이미지 URL
            size: new navermaps.Size(60, 60), // 이미지의 원래 크기
            scaledSize: new navermaps.Size(60, 60), // 화면에 표시될 이미지 크기
            origin: new navermaps.Point(0, 0), // 이미지의 시작점
            anchor: new navermaps.Point(12, 37) // 마커를 지도에 고정시킬 위치
          },
          title: markerInfo.title
        });

        /** 마커 이벤트 **/
        window.naver.maps.Event.addListener(marker, "click", () => {
          this.modalItem = markerInfo;
          this.mapInfoModal = true;
        });
        this.markers.push(marker);
      });

      // window.naver.maps.Event.addListener(
      //   self.map,
      //   "zoom_changed",
      //   function() {
      //     self.updateMarkers(self.markers);
      //   }
      // );

      // window.naver.maps.Event.addListener(self.map, "dragend", function() {
      //   self.updateMarkers(self.markers);
      // });

      let markerClustering = new MarkerClustering({
        minClusterSize: 2,
        maxZoom: 16,
        map: self.map,
        markers: self.markers,
        disableClickZoom: false,
        gridSize: 50,
        icons: [self.htmlMarker1, self.htmlMarker2, self.htmlMarker3, self.htmlMarker4, self.htmlMarker5],
        stylingFunction: function(clusterMarker, count) {
          const el = clusterMarker.getElement().children[0];
          el.innerHTML = count;
        }
      });
    },

    // updateMarkers() {
    //   let mapBounds = this.map.getBounds();
    //   let marker, position;
    //
    //   for (let i = 0; i < this.markers.length; i++) {
    //     marker = this.markers[i];
    //     position = marker.getPosition();
    //
    //     if (mapBounds.hasLatLng(position)) {
    //       this.showMarker(marker);
    //     } else {
    //       this.hideMarker(marker);
    //     }
    //   }
    // },

    // showMarker(marker) {
    //   if (marker.setMap()) return;
    //   marker.setMap(this.map);
    // },
    //
    // hideMarker(marker) {
    //   if (!marker.setMap()) return;
    //   marker.setMap(null);
    // },
  }
};
</script>

<style scoped>
ion-icon {
  color: black;
}

ion-toolbar {
  --background: #fff;
}

/** 모달 css **/
ion-modal {
  --height: 350px;
  --width: 100%;
  --border-radius: 7px;
  --box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1), 0 4px 6px -4px rgb(0 0 0 / 0.1);
}

</style>
