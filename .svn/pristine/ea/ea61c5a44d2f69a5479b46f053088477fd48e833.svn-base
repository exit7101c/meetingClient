<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-buttons slot="start">
          <BackButton />
        </ion-buttons>
        <ion-title>Í∏∞Î≥∏ÏÑ§Ï†ï</ion-title>
      </ion-toolbar>
    </ion-header>

    <ion-content>
      <div class="layout-container">
        <!-- title -->
        <JoinTitle>
          <template v-slot:title>
            Í∏∞Î≥∏ Ï†ïÎ≥¥Î•º <br />
            ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî
          </template>
          <template v-slot:desc>
            ÌîÑÎ°úÌïÑÏóê Í∏∞Î≥∏ÏúºÎ°ú Îì±Î°ùÎêòÎäî Ï†ïÎ≥¥ÏûÖÎãàÎã§.
          </template>
        </JoinTitle>
        <div class="form-wrapper">
          <!-- ÎåÄÌëú ÏïÑÏù¥ÏΩò -->
          <ion-grid class="ion-padding" style="margin-top: -20px;">
            <ion-row>
              <ion-col>
                <ion-text color="light" class="text-sm"
                >ÎåÄÌëú ÏïÑÏù¥ÏΩò
                </ion-text
                >
              </ion-col>
            </ion-row>
            <ion-row>
              <ion-col>
                <div class="row-box">
                  <div class="btn-tab-group">
                    <ion-button
                      @click="iconModalOpen = true;"
                      fill="clear"
                      class="iconBtn">
                        <span style=" display: flex; align-items: center;">
                          <ion-img style="width: 30px; height: 30px;" v-bind:src="'https://'+this.userIconImgId" />
                          <span>&nbsp;&nbsp;{{ this.userIconNm }}</span>
                        </span>
                    </ion-button>
                  </div>
                </div>
              </ion-col>
            </ion-row>
          </ion-grid>


          <!-- ÎåÄÌëú ÏïÑÏù¥ÏΩò -->

          <!-- Ìù°Ïó∞ Ïó¨Î∂Ä -->
          <ion-grid>
            <ion-row>
              <ion-col>
                <ion-text color="light" class="text-sm">Ìù°Ïó∞ Ïó¨Î∂Ä üö≠</ion-text>
              </ion-col>
            </ion-row>
            <ion-row>
              <ion-col
                size="auto"
                v-for="(data, index) in smokeList"
                :key="index"
              >
                <ion-button
                  color="secondary"
                  size="small"
                  :fill="isSelectedSmoke(data) ? 'solid' : 'outline'"
                  @click="toggleItem('smoke', data)"
                >
                  {{ data.smokeNm }}
                </ion-button>
              </ion-col>
            </ion-row>
          </ion-grid>
          <!-- ÏùåÏ£º Ïó¨Î∂Ä -->
          <ion-grid>
            <ion-row>
              <ion-col>
                <ion-text color="light" class="text-sm">ÏùåÏ£º Ïó¨Î∂Ä ü•Ç</ion-text>
              </ion-col>
            </ion-row>
            <ion-row>
              <ion-col
                size="auto"
                v-for="(data, index) in drinkingList"
                :key="index"
              >
                <ion-button
                  color="secondary"
                  size="small"
                  :fill="isSelectedDrinking(data) ? 'solid' : 'outline'"
                  @click="toggleItem('drinking', data)"
                >
                  {{ data.drinkNm }}
                </ion-button>
              </ion-col>
            </ion-row>
          </ion-grid>
          <!-- Ï≤¥Ìòï -->
          <!--          <ion-grid>-->
          <!--            <ion-row>-->
          <!--              <ion-col>-->
          <!--                <ion-text color="light" class="text-sm"-->
          <!--                  >Ï≤¥ÌòïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî</ion-text-->
          <!--                >-->
          <!--              </ion-col>-->
          <!--            </ion-row>-->
          <!--            <ion-row>-->
          <!--              <ion-col-->
          <!--                size="auto"-->
          <!--                v-for="(data, index) in bodyList"-->
          <!--                :key="index"-->
          <!--              >-->
          <!--                <ion-button-->
          <!--                  color="secondary"-->
          <!--                  size="small"-->
          <!--                  :fill="isSelectedBody(data) ? 'solid' : 'outline'"-->
          <!--                  @click="toggleItem('body', data)"-->
          <!--                >-->
          <!--                  {{ data.formNm }}-->
          <!--                </ion-button>-->
          <!--              </ion-col>-->
          <!--            </ion-row>-->
          <!--          </ion-grid>-->
          <!-- ÌÇ§ -->
          <ion-grid>
            <ion-row>
              <ion-col>
                <ion-text color="light" class="text-sm"
                >ÌÇ§Î•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî
                </ion-text
                >
              </ion-col>
            </ion-row>
            <ion-row>
              <ion-col style="padding: 0 10px 0 10px">
                <ion-range
                  aria-label="Volume"
                  min="140"
                  max="200"
                  step="1"
                  value="140"
                  v-model="selectedValue"
                  @ionChange="onRangeChange"
                >
                  <ion-label color="light" slot="end" class="text-sm"
                  >{{ selectedValue }}cm
                  </ion-label
                  >
                </ion-range>
              </ion-col>
            </ion-row>
          </ion-grid>
          <!-- Î™∏Î¨¥Í≤å -->
          <ion-grid>
            <ion-row>
              <ion-col>
                <ion-text color="light" class="text-sm"
                >Î™∏Î¨¥Í≤åÎ•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî
                </ion-text
                >
              </ion-col>
            </ion-row>
            <ion-row>
              <ion-col style="padding: 0 10px 0 10px">
                <ion-range
                  aria-label="Volume"
                  min="40"
                  max="120"
                  step="1"
                  value="70"
                  v-model="weightValue"
                  @ionChange="onWeightRangeChange"
                >
                  <ion-label color="light" slot="end" class="text-sm"
                  >{{ weightValue }}kg
                  </ion-label
                  >
                </ion-range>
              </ion-col>
            </ion-row>
          </ion-grid>
        </div>
      </div>
    </ion-content>

    <!-- ÏïÑÏù¥ÏΩò Î™®Îã¨Ï∞Ω -->
    <ion-modal
      :is-open="iconModalOpen"
      @ionModalDidDismiss="iconModalOpen = false"
    >
      <ion-content class="ion-padding">
        <ion-toolbar mode="md">
          <ion-title class="main-header">
            ÎåÄÌëú ÏïÑÏù¥ÏΩò
          </ion-title>
        </ion-toolbar>

        <ion-list lines="none">
          <ion-radio-group v-model="selectedAvatar" class="img-radio-group">
            <ion-row>
              <ion-col size="4" v-for="data in iconList" :key="data.iconCd" @click="closeIconSelect(data)">
                <ion-item class="img-radio-button">
                  <ion-label>
                    <ion-img :src="'https://' + data.cdnThumbNm" />
                    <ion-text color="light">{{ data.iconNm }}</ion-text>
                  </ion-label>
                  <ion-radio slot="start" :value="data.iconCd"></ion-radio>
                </ion-item>
              </ion-col>
            </ion-row>
          </ion-radio-group>
        </ion-list>

      </ion-content>
    </ion-modal>
    <!-- ÏïÑÏù¥ÏΩò Î™®Îã¨Ï∞Ω -->

    <ion-footer class="join-footer">
      <div class="layout-container">
        <div class="btn-group">
          <custom-button
            color="primary"
            size="large"
            expand="block"
            shape="round"
            @click="getSave(btnCheckDisabled=false)"
            :disabled="!btnCheckDisabled"
          >
            Ï†ÄÏû•
          </custom-button>
        </div>
      </div>
    </ion-footer>
  </ion-page>
</template>

<script>
import { chevronBack, search } from "ionicons/icons";
import { getData, profileMapFn } from "@/assets/js/common";
import JoinTitle from "@/components/JoinTitle.vue";
import { loadingController } from "@ionic/vue";

export default {
  name: "Register",
  inject: ["alertController"],
  components: {
    JoinTitle
  },
  data() {
    return {
      chevronBack,
      search,

      ItemList: [],

      rangeValue: "",
      selectedValue: "", // ÌÇ§ Ï¥àÍ∏∞Í∞í
      weightValue: "", // Î™∏Î¨¥Í≤å Ï¥àÍ∏∞Í∞í

      iconModalOpen: false,

      iconList: [],
      // iconNm: '',

      bodyList: [],
      smokeList: [],
      drinkingList: [],

      selectBodys: [],
      selectSmokes: [],
      selectDrinkings: [],

      btnType: "",

      userBody: "",
      userSmoke: "",
      userDrinking: "",
      userIconNm: "",
      userIconImgId: "",
      btnCheckDisabled: true,
      loadingTime: 500,
      loading: null,
      selectedAvatar: ""
    };
  },
  ionViewWillEnter() {
    // ÏßÑÏûÖÌï† Îïå Ìò∏Ï∂ú
    this.getInfoList();
  },

  ionViewDidLeave() {
    // Îñ†ÎÇ† Îïå Ìò∏Ï∂ú
  },
  mounted() {
  },

  methods: {
    getResult() {
      let resultObj = {};

      resultObj.iconCd = this.iconCd; // ÏïÑÏù¥ÏΩò
      resultObj.tall = this.selectedValue; // ÌÇ§
      resultObj.weight = this.weightValue; // Î™∏Î¨¥Í≤å
      // resultObj.formCd = JSON.stringify(
      //   this.selectBodys.map((item) => item.formCd)
      // ); // Ï≤¥Ìòï
      resultObj.smokeCd = JSON.stringify(
        this.selectSmokes.map((item) => item.smokeCd)
      ); // Ìù°Ïó∞
      resultObj.drinkCd = JSON.stringify(
        this.selectDrinkings.map((item) => item.drinkCd)
      ); // ÏùåÏ£º

      return resultObj;
    },

    getSave() {
      // return;
      this.showLoading();
      getData({
        url: "/getUserInfoUpdate",
        param: this.getResult(),
        target: this,
        then: (data) => {
          if (data.successYn === "N") {
            this.warningAlert(data.message);
          } else {
            profileMapFn({ pageType: "profileEdit" });
            this.$router.push("/profile");
          }
          setTimeout(() => {
            this.loading.dismiss();
            this.btnCheckDisabled = true;
          }, this.loadingTime);
        }
      });
    },

    /** Î°úÍ∑∏Ïù∏ Ïú†Ï†Ä Ï†ïÎ≥¥ **/
    getSelectUser() {
      getData({
        url: "/getSettingUserInfo",
        param: {},
        target: this,
        then: (data) => {
          this.userBody = data.formNm;
          this.userSmoke = data.smokeNm;
          this.userDrinking = data.drinkNm;
          this.selectedValue = data.tall;
          this.weightValue = data.weight;
          this.userIconNm = data.iconNm;
          this.selectedAvatar = data.iconCd;
          this.userIconImgId = data.cdnThumbNmIcon;

          /** Ï≤¥Ìòï ÏûêÎèôÏÑ†ÌÉù **/
          // const bodyObject = this.bodyList.filter((item) =>
          //   this.userBody.includes(item.formNm)
          // );
          // if (bodyObject.length > 0) {
          //   bodyObject.forEach((bodyObject) => {
          //     this.toggleItem("body", bodyObject);
          //   });
          // }
          /** Ìù°Ïó∞ ÏûêÎèôÏÑ†ÌÉù **/
          const smokeObject = this.smokeList.filter((item) =>
            this.userSmoke.includes(item.smokeNm)
          );
          if (smokeObject.length > 0) {
            smokeObject.forEach((smokeObject) => {
              this.toggleItem("smoke", smokeObject);
            });
          }
          /** ÏùåÏ£º ÏûêÎèôÏÑ†ÌÉù **/
          const drinkingObject = this.drinkingList.filter((item) =>
            this.userDrinking.includes(item.drinkNm)
          );
          if (drinkingObject.length > 0) {
            drinkingObject.forEach((drinkingObject) => {
              this.toggleItem("drinking", drinkingObject);
            });
          }
        }
      });
    },
    getInfoList() {
      getData({
        url: "/getInfoList",
        param: {},
        target: this,
        then: (data) => {
          this.bodyList = data.bodyList;
          this.drinkingList = data.drinkingList;
          this.smokeList = data.smokeList;
          this.iconList = data.iconList;
        }
      });
      this.$nextTick(() => {
        this.getSelectUser();
      });
    },

    isSelectedBody(item) {
      return this.selectBodys.includes(item);
    },
    isSelectedSmoke(item) {
      return this.selectSmokes.includes(item);
    },
    isSelectedDrinking(item) {
      return this.selectDrinkings.includes(item);
    },

    toggleItem(state, item) {
      if (state === "body") {
        /** Ï≤¥Ìòï **/
        if (item.formNm === "ÎπÑÍ≥µÍ∞ú") {
          if (!this.isSelectedBody(item)) {
            if (
              this.selectBodys.some(
                (selectedItem) => selectedItem.formNm === "ÎπÑÍ≥µÍ∞ú"
              )
            ) {
              this.selectBodys.splice(
                this.selectBodys.findIndex(
                  (selectedItem) => selectedItem.formNm !== "ÎπÑÍ≥µÍ∞ú"
                ),
                1,
                item
              );
            } else {
              this.selectBodys.push(item);
            }
            this.selectBodys = this.selectBodys.filter(
              (selectedItem) => selectedItem.formNm === "ÎπÑÍ≥µÍ∞ú"
            );
          } else {
            this.selectBodys = this.selectBodys.filter(
              (selectedItem) => selectedItem.formNm !== "ÎπÑÍ≥µÍ∞ú"
            );
          }
        } else {
          if (this.isSelectedBody(item)) {
            this.selectBodys.splice(this.selectBodys.indexOf(item), 1);
          } else {
            if (
              !this.selectBodys.some(
                (selectedItem) => selectedItem.formNm === "ÎπÑÍ≥µÍ∞ú"
              )
            ) {
              if (this.selectBodys.length === 1) {
                this.selectBodys.splice(0, 1);
              }
              this.selectBodys.push(item);
            } else {
              this.selectBodys.splice(
                this.selectBodys.findIndex(
                  (selectedItem) => selectedItem.formNm !== "ÎπÑÍ≥µÍ∞ú"
                ),
                1,
                item
              );
            }
          }
        }
      } else if (state === "smoke") {
        /** Ìù°Ïó∞ **/
        if (this.isSelectedSmoke(item)) {
          this.selectSmokes.splice(this.selectSmokes.indexOf(item), 1);
        } else {
          if (this.selectSmokes.length > 0) {
            this.selectSmokes.splice(0, 1);
          }
          this.selectSmokes.push(item);
        }
      } else if (state === "drinking") {
        /** ÏùåÏ£º **/
        if (this.isSelectedDrinking(item)) {
          this.selectDrinkings.splice(this.selectDrinkings.indexOf(item), 1);
        } else {
          if (this.selectDrinkings.length > 0) {
            this.selectDrinkings.splice(0, 1);
          }
          this.selectDrinkings.push(item);
        }
      }
    },

    /** Í≤ΩÍ≥† ÌåùÏóÖÏ∞Ω **/
    async warningAlert(message) {
      const alert = await this.alertController.create({
        header: "",
        subHeader: "",
        message: message,
        buttons: ["OK"]
      });
      return alert.present();
    },

    /** ÏïÑÏù¥ÏΩò Î™®Îã¨Ï∞Ω Ïó¥Í∏∞ **/
    openModal() {
      this.iconModalOpen = true;
    },
    /** ÏïÑÏù¥ÏΩò Î™®Îã¨Ï∞Ω Îã´Í∏∞ **/
    closeIconSelect(item) {
      this.iconCd = item.iconCd;
      this.userIconNm = item.iconNm;
      this.userIconImgId = item.cdnThumbNm;

      this.iconModalOpen = false;
    },
    onRangeChange(event) {
      this.selectedValue = event.detail.value;
    },
    onWeightRangeChange(event) {
      this.weightValue = event.detail.value;
    },
    /** Î°úÎî© **/
    async showLoading() {
      this.loading = await loadingController.create({
        message: "Loading...",
        duration: 0
      });
      await this.loading.present();
    }
  }
};
</script>

<style lang="scss" scoped>
ion-modal {
  padding: 0 18px;
  --height: 350px;
  --border-radius: 10px;

  ion-content {

    &::part(scroll) {
      overflow: hidden;
    }
  }
}
</style>
