{"version":3,"file":"js/4883-legacy.94a61136.js","mappings":"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","sources":["webpack://navy/./node_modules/@capacitor-community/sqlite/dist/esm/web.js"],"sourcesContent":["import { WebPlugin } from '@capacitor/core';\nexport class CapacitorSQLiteWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.jeepSqliteElement = null;\n        this.isWebStoreOpen = false;\n    }\n    async initWebStore() {\n        await customElements.whenDefined('jeep-sqlite');\n        this.jeepSqliteElement = document.querySelector('jeep-sqlite');\n        this.ensureJeepSqliteIsAvailable();\n        this.jeepSqliteElement.addEventListener('jeepSqliteImportProgress', (event) => {\n            this.notifyListeners('sqliteImportProgressEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteExportProgress', (event) => {\n            this.notifyListeners('sqliteExportProgressEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteHTTPRequestEnded', (event) => {\n            this.notifyListeners('sqliteHTTPRequestEndedEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqlitePickDatabaseEnded', (event) => {\n            this.notifyListeners('sqlitePickDatabaseEndedEvent', event.detail);\n        });\n        this.jeepSqliteElement.addEventListener('jeepSqliteSaveDatabaseToDisk', (event) => {\n            this.notifyListeners('sqliteSaveDatabaseToDiskEvent', event.detail);\n        });\n        if (!this.isWebStoreOpen) {\n            this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n        }\n        return;\n    }\n    async saveToStore(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.saveToStore(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getFromLocalDiskToStore(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.getFromLocalDiskToStore(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async saveToLocalDisk(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.saveToLocalDisk(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async echo(options) {\n        this.ensureJeepSqliteIsAvailable();\n        const echoResult = await this.jeepSqliteElement.echo(options);\n        return echoResult;\n    }\n    async createConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.createConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async open(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.open(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async closeConnection(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.closeConnection(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getVersion(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const versionResult = await this.jeepSqliteElement.getVersion(options);\n            return versionResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async checkConnectionsConsistency(options) {\n        this.ensureJeepSqliteIsAvailable();\n        try {\n            const consistencyResult = await this.jeepSqliteElement.checkConnectionsConsistency(options);\n            return consistencyResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async close(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.close(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getTableList(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableListResult = await this.jeepSqliteElement.getTableList(options);\n            return tableListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async execute(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.execute(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async executeSet(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const executeResult = await this.jeepSqliteElement.executeSet(options);\n            return executeResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async run(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const runResult = await this.jeepSqliteElement.run(options);\n            return runResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async query(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const queryResult = await this.jeepSqliteElement.query(options);\n            return queryResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const dbExistsResult = await this.jeepSqliteElement.isDBExists(options);\n            return dbExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDBOpen(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDBOpenResult = await this.jeepSqliteElement.isDBOpen(options);\n            return isDBOpenResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isDatabaseResult = await this.jeepSqliteElement.isDatabase(options);\n            return isDatabaseResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isTableExists(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const tableExistsResult = await this.jeepSqliteElement.isTableExists(options);\n            return tableExistsResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteDatabase(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteDatabase(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async isJsonValid(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const isJsonValidResult = await this.jeepSqliteElement.isJsonValid(options);\n            return isJsonValidResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async importFromJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const importFromJsonResult = await this.jeepSqliteElement.importFromJson(options);\n            return importFromJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async exportToJson(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const exportToJsonResult = await this.jeepSqliteElement.exportToJson(options);\n            return exportToJsonResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async createSyncTable(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const createSyncTableResult = await this.jeepSqliteElement.createSyncTable(options);\n            return createSyncTableResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async setSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.setSyncDate(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getSyncDate(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const getSyncDateResult = await this.jeepSqliteElement.getSyncDate(options);\n            return getSyncDateResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async deleteExportedRows(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.deleteExportedRows(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async addUpgradeStatement(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.addUpgradeStatement(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async copyFromAssets(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.copyFromAssets(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getFromHTTPRequest(options) {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            await this.jeepSqliteElement.getFromHTTPRequest(options);\n            return;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    async getDatabaseList() {\n        this.ensureJeepSqliteIsAvailable();\n        this.ensureWebstoreIsOpen();\n        try {\n            const databaseListResult = await this.jeepSqliteElement.getDatabaseList();\n            return databaseListResult;\n        }\n        catch (err) {\n            throw new Error(`${err}`);\n        }\n    }\n    /**\n     * Checks if the `jeep-sqlite` element is present in the DOM.\n     * If it's not in the DOM, this method throws an Error.\n     *\n     * Attention: This will always fail, if the `intWebStore()` method wasn't called before.\n     */\n    ensureJeepSqliteIsAvailable() {\n        if (this.jeepSqliteElement === null) {\n            throw new Error(`The jeep-sqlite element is not present in the DOM! Please check the @capacitor-community/sqlite documentation for instructions regarding the web platform.`);\n        }\n    }\n    ensureWebstoreIsOpen() {\n        if (!this.isWebStoreOpen) {\n            /**\n             * if (!this.isWebStoreOpen)\n              this.isWebStoreOpen = await this.jeepSqliteElement.isStoreOpen();\n             */\n            throw new Error('WebStore is not open yet. You have to call \"initWebStore()\" first.');\n        }\n    }\n    ////////////////////////////////////\n    ////// UNIMPLEMENTED METHODS\n    ////////////////////////////////////\n    async getUrl() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getMigratableDbList(options) {\n        console.log('getMigratableDbList', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async addSQLiteSuffix(options) {\n        console.log('addSQLiteSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async deleteOldDatabases(options) {\n        console.log('deleteOldDatabases', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async moveDatabasesAndAddSuffix(options) {\n        console.log('moveDatabasesAndAddSuffix', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isSecretStored() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async setEncryptionSecret(options) {\n        console.log('setEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async changeEncryptionSecret(options) {\n        console.log('changeEncryptionSecret', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async clearEncryptionSecret() {\n        console.log('clearEncryptionSecret');\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async checkEncryptionSecret(options) {\n        console.log('checkEncryptionPassPhrase', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async getNCDatabasePath(options) {\n        console.log('getNCDatabasePath', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async createNCConnection(options) {\n        console.log('createNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async closeNCConnection(options) {\n        console.log('closeNCConnection', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isNCDatabase(options) {\n        console.log('isNCDatabase', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isDatabaseEncrypted(options) {\n        console.log('isDatabaseEncrypted', options);\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isInConfigEncryption() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n    async isInConfigBiometricAuth() {\n        throw this.unimplemented('Not implemented on web.');\n    }\n}\n//# sourceMappingURL=web.js.map"],"names":["CapacitorSQLiteWeb","constructor","super","arguments","this","jeepSqliteElement","isWebStoreOpen","async","customElements","whenDefined","document","querySelector","ensureJeepSqliteIsAvailable","addEventListener","event","notifyListeners","detail","isStoreOpen","options","ensureWebstoreIsOpen","saveToStore","err","Error","getFromLocalDiskToStore","saveToLocalDisk","echoResult","echo","createConnection","open","closeConnection","versionResult","getVersion","consistencyResult","checkConnectionsConsistency","close","tableListResult","getTableList","executeResult","execute","executeSet","runResult","run","queryResult","query","dbExistsResult","isDBExists","isDBOpenResult","isDBOpen","isDatabaseResult","isDatabase","tableExistsResult","isTableExists","deleteDatabase","isJsonValidResult","isJsonValid","importFromJsonResult","importFromJson","exportToJsonResult","exportToJson","createSyncTableResult","createSyncTable","setSyncDate","getSyncDateResult","getSyncDate","deleteExportedRows","addUpgradeStatement","copyFromAssets","getFromHTTPRequest","databaseListResult","getDatabaseList","unimplemented","console","log"],"sourceRoot":""}