<template>
  <ion-page>
    <ion-header :translucent="true">
      <ion-toolbar>
        <ion-buttons slot="start">
          <BackButton />
        </ion-buttons>
        <ion-title>소모임</ion-title>
        <ion-buttons slot="end">
          <custom-button id="openChat-popover-button">
            <ion-icon slot="icon-only" :icon="menuIcon" color="light" />
          </custom-button>
          <ion-popover
            trigger="openChat-popover-button"
            :dismiss-on-select="true"
            mode="ios"
          >
            <ion-content>
              <ion-list lines="full">
                <template v-if="ssUserYn == 'Y'">
                  <ion-item
                    :button="true"
                    :detail="false"
                    @click="editOpenChat(chatDetailMap)"
                    >수정
                  </ion-item>
                  <ion-item
                    :button="true"
                    :detail="false"
                    @click="presentAlertConfirm()"
                    >삭제
                  </ion-item>
                </template>
                <template v-else>
                  <ion-item :button="true" :detail="false" @click="policeBtn"
                    >신고
                  </ion-item>
                </template>
              </ion-list>
            </ion-content>
          </ion-popover>
        </ion-buttons>
      </ion-toolbar>
    </ion-header>
    <ion-content :fullscreen="true">
      <OpenChatMeetInfo
        v-if="mainValue === 'home'"
        :recentTime="recentTime"
        :chatDetailMap="chatDetailMap"
        :cdnThumbNmProfile="cdnThumbNmProfile"
        :totalUserCount="totalUserCount"
        :openchatRank="openchatRank"
        @openUseOpenChatModal="openUseOpenChatModal"
      />
      <div class="sticky-top segment-round" style="padding: 0 0px; top: 0px">
        <ion-segment
          v-model="mainValue"
          mode="md"
          :scrollable="true"
          @ionChange="changeMeetMainValue"
        >
          <ion-segment-button value="home" @click="getOpenChatDetail">
            홈
          </ion-segment-button>
          <ion-segment-button value="board" @click="mainBtn('board')">
            게시판
          </ion-segment-button>
          <ion-segment-button value="album" @click="mainBtn('album')">
            사진첩
          </ion-segment-button>
          <ion-segment-button value="message" @click="mainBtn('messageCheck')">
            채팅
          </ion-segment-button>
        </ion-segment>
      </div>

      <div class="row-box" v-if="mainValue == 'home'" style="margin-top: 0px">
        <OpenChatHome
          :recentTime="recentTime"
          :chatDetailMap="chatDetailMap"
          :cdnThumbNmProfile="cdnThumbNmProfile"
          :privateYn="privateYn"
          :attendInfoList="attendInfoList"
          :totalUserCount="totalUserCount"
          :meetList="meetList"
          :openchatRank="openchatRank"
          @setCheckPrivateYn="setCheckPrivateYn($event)"
          @getAttendInfo="getAttendInfo"
          @openUseOpenChatModal="openUseOpenChatModal"
          @openAttendUserModal="openMeetUserList(item)"
        />
      </div>

      <div class="row-box" v-if="mainValue == 'board'">
        <div class="sticky-top">
          <ion-segment
            v-model="categoryCd"
            mode="ios"
            :scrollable="true"
            class="segment-chip"
            @ionChange="changeMeetCategory"
            v-if="categoryList != null"
          >
            <ion-segment-button
              class="shape-round"
              v-for="item in categoryList"
              :value="item.categoryCd"
              :key="item.categoryCd"
              @click="categoryBtn(item)"
            >
              {{ item.categoryNm }}
            </ion-segment-button>
          </ion-segment>
        </div>
        <ion-list lines="none">
          <template v-if="categoryCd == 'MEET_GROUP'">
            <div class="layout-container" v-if="meetList.length > 0">
              <OpenChatMeetItem
                v-for="item in meetList"
                :key="item"
                :item="item"
                :btnDisabled="btnDisabled"
                @btnAdd="btnHandle(item, 'add')"
                @btnCancel="btnHandle(item, 'delete')"
                @btnAttend="openMeetUserList(item)"
              />
            </div>
            <div class="layout-container" v-else>
              <CardBox>
                <p class="text-center">
                  <ion-text color="light">생성된 모임이 없습니다.</ion-text>
                </p></CardBox
              >
            </div>
          </template>
          <template v-if="categoryCd == 'NOTICE'">
            <div class="layout-container" v-if="noticeList.length > 0">
              <ion-grid v-for="item in noticeList" :key="item">
                <div class="info" style="height: 35px">
                  <div>
                    <div style="display: flex; align-items: center">
                      <ion-avatar
                        style="margin-top: 0px"
                        @click="goDailyCardInfo(item.userKey)"
                      >
                        <img
                          v-if="item.cdnThumbNm != null"
                          :src="'https://' + item.cdnThumbNm"
                          @ionError="
                            $event.srcElement.src = require('../../assets/img/Loading_icon.gif')
                          "
                        />
                        <ion-img
                          v-else-if="item.cdnThumbNm == null"
                          :src="'https://cmdg.speedycdn.net/202308/20230807145058_a09c4c1d-0775-4559-bb58-e1926296b702.jpeg'"
                          @ionError="
                            $event.srcElement.src = require('../../assets/img/Loading_icon.gif')
                          "
                        />
                      </ion-avatar>
                      <span
                        style="color: #fff; font-size: 14px"
                        @click="goDailyCardInfo(item.userKey)"
                        >{{ item.nick }}</span
                      >
                    </div>
                    <p class="date">
                      <ion-icon :icon="calendarCheck" class="sub-text01" />
                      <ion-text class="sub-text01">{{
                        item.createdDt
                      }}</ion-text>
                    </p>
                  </div>
                </div>
                <div
                  class="content"
                  style="margin-top: 20px"
                  @click="goView(item)"
                >
                  <p class="something" style="display: table-row">
                    <ion-chip color="light">제목</ion-chip>
                    <ion-text color="light" class="sub-text05">
                      {{ truncateString(item.title, 20) }}</ion-text
                    >
                  </p>
                  <p
                    class="something"
                    style="display: inline-flex; margin-top: 0px"
                  >
                    <ion-chip color="light">내용</ion-chip>
                    <ion-text color="light" class="sub-text05">
                      {{ truncateString(item.content, 50) }}</ion-text
                    >
                  </p>
                </div>
              </ion-grid>
            </div>
            <div class="layout-container" v-else>
              <CardBox>
                <p class="text-center">
                  <ion-text color="light">생성된 공지가 없습니다.</ion-text>
                </p></CardBox
              >
            </div>
          </template>
          <template v-if="categoryCd == 'JOIN_GREETING'">
            <div class="layout-container" v-if="greetingList.length > 0">
              <ion-grid v-for="item in greetingList" :key="item">
                <div class="info" style="height: 35px">
                  <div>
                    <div style="display: flex; align-items: center">
                      <ion-avatar
                        style="margin-top: 0px"
                        @click="goDailyCardInfo(item.userKey)"
                      >
                        <img
                          v-if="item.cdnThumbNm != null"
                          :src="'https://' + item.cdnThumbNm"
                          @ionError="
                            $event.srcElement.src = require('../../assets/img/Loading_icon.gif')
                          "
                        />
                        <ion-img
                          v-else-if="item.cdnThumbNm == null"
                          :src="'https://cmdg.speedycdn.net/202308/20230807145058_a09c4c1d-0775-4559-bb58-e1926296b702.jpeg'"
                          @ionError="
                            $event.srcElement.src = require('../../assets/img/Loading_icon.gif')
                          "
                        />
                      </ion-avatar>
                      <span
                        style="color: #fff; font-size: 14px"
                        @click="goDailyCardInfo(item.userKey)"
                        >{{ item.nick }}</span
                      >
                    </div>
                    <p class="date">
                      <ion-icon :icon="calendarCheck" class="sub-text01" />
                      <ion-text class="sub-text01">{{
                        item.createdDt
                      }}</ion-text>
                    </p>
                  </div>
                </div>
                <div
                  class="content"
                  style="margin-top: 20px"
                  @click="goView(item)"
                >
                  <p class="something" style="display: table-row">
                    <ion-chip color="light">제목</ion-chip>
                    <ion-text color="light" class="sub-text05">
                      {{ truncateString(item.title, 20) }}</ion-text
                    >
                  </p>
                  <p
                    class="something"
                    style="display: inline-flex; margin-top: 0px"
                  >
                    <ion-chip color="light">내용</ion-chip>
                    <ion-text color="light" class="sub-text05">
                      {{ truncateString(item.content, 50) }}</ion-text
                    >
                  </p>
                </div>
              </ion-grid>
            </div>
            <div class="layout-container" v-else>
              <CardBox>
                <p class="text-center">
                  <ion-text color="light">생성된 가입인사가 없습니다.</ion-text>
                </p></CardBox
              >
            </div>
          </template>
          <template v-if="categoryCd == 'REVIEW'">
            <div class="layout-container" v-if="reviewList.length > 0">
              <ion-grid v-for="item in reviewList" :key="item">
                <div class="info" style="height: 35px">
                  <div>
                    <div style="display: flex; align-items: center">
                      <ion-avatar
                        style="margin-top: 0px"
                        @click="goDailyCardInfo(item.userKey)"
                      >
                        <img
                          v-if="item.cdnThumbNm != null"
                          :src="'https://' + item.cdnThumbNm"
                          @ionError="
                            $event.srcElement.src = require('../../assets/img/Loading_icon.gif')
                          "
                        />
                        <ion-img
                          v-else-if="item.cdnThumbNm == null"
                          :src="'https://cmdg.speedycdn.net/202308/20230807145058_a09c4c1d-0775-4559-bb58-e1926296b702.jpeg'"
                          @ionError="
                            $event.srcElement.src = require('../../assets/img/Loading_icon.gif')
                          "
                        />
                      </ion-avatar>
                      <span
                        style="color: #fff; font-size: 14px"
                        @click="goDailyCardInfo(item.userKey)"
                        >{{ item.nick }}</span
                      >
                    </div>
                    <p class="date">
                      <ion-icon :icon="calendarCheck" class="sub-text01" />
                      <ion-text class="sub-text01">{{
                        item.createdDt
                      }}</ion-text>
                    </p>
                  </div>
                </div>
                <div
                  class="content"
                  style="margin-top: 20px"
                  @click="goView(item)"
                >
                  <p class="something" style="display: table-row">
                    <ion-chip color="light">제목</ion-chip>
                    <ion-text color="light" class="sub-text05">
                      {{ truncateString(item.title, 20) }}</ion-text
                    >
                  </p>
                  <p
                    class="something"
                    style="display: inline-flex; margin-top: 0px"
                  >
                    <ion-chip color="light">내용</ion-chip>
                    <ion-text color="light" class="sub-text05">
                      {{ truncateString(item.content, 50) }}</ion-text
                    >
                  </p>
                </div>
              </ion-grid>
            </div>
            <div class="layout-container" v-else>
              <CardBox>
                <p class="text-center">
                  <ion-text color="light">생성된 후기가 없습니다.</ion-text>
                </p></CardBox
              >
            </div>
          </template>
          <template v-if="categoryCd == 'CALCULATE'">
            <div class="layout-container" v-if="calculateList.length > 0">
              <ion-grid v-for="item in calculateList" :key="item">
                <div class="info" style="height: 35px">
                  <div>
                    <div style="display: flex; align-items: center">
                      <ion-avatar
                        style="margin-top: 0px"
                        @click="goDailyCardInfo(item.userKey)"
                      >
                        <img
                          v-if="item.cdnThumbNm != null"
                          :src="'https://' + item.cdnThumbNm"
                          @ionError="
                            $event.srcElement.src = require('../../assets/img/Loading_icon.gif')
                          "
                        />
                        <ion-img
                          v-else-if="item.cdnThumbNm == null"
                          :src="'https://cmdg.speedycdn.net/202308/20230807145058_a09c4c1d-0775-4559-bb58-e1926296b702.jpeg'"
                          @ionError="
                            $event.srcElement.src = require('../../assets/img/Loading_icon.gif')
                          "
                        />
                      </ion-avatar>
                      <span
                        style="color: #fff; font-size: 14px"
                        @click="goDailyCardInfo(item.userKey)"
                        >{{ item.nick }}</span
                      >
                    </div>
                    <p class="date">
                      <ion-icon :icon="calendarCheck" class="sub-text01" />
                      <ion-text class="sub-text01">{{
                        item.createdDt
                      }}</ion-text>
                    </p>
                  </div>
                </div>
                <div
                  class="content"
                  style="margin-top: 20px"
                  @click="goView(item)"
                >
                  <p class="something" style="display: table-row">
                    <ion-chip color="light">제목</ion-chip>
                    <ion-text color="light" class="sub-text05">
                      {{ truncateString(item.title, 20) }}</ion-text
                    >
                  </p>
                  <p
                    class="something"
                    style="display: inline-flex; margin-top: 0px"
                  >
                    <ion-chip color="light">내용</ion-chip>
                    <ion-text color="light" class="sub-text05">
                      {{ truncateString(item.content, 50) }}</ion-text
                    >
                  </p>
                </div>
              </ion-grid>
            </div>
            <div class="layout-container" v-else>
              <CardBox>
                <p class="text-center">
                  <ion-text color="light">생성된 정산내역이 없습니다.</ion-text>
                </p></CardBox
              >
            </div>
          </template>
        </ion-list>
      </div>

      <div class="row-box" v-if="mainValue == 'album'">
        <ion-list lines="none">
          <ion-refresher slot="fixed" @ionRefresh="doRefresh($event)">
            <ion-refresher-content
              refreshing-spinner="circles"
              :pulling-icon="chevronDownCircleOutline"
            ></ion-refresher-content>
          </ion-refresher>
          <ion-row>
            <ion-col size="4" v-for="(item, index) in albumList" :key="index">
              <OpenChatMeetAlbumList
                :item="item"
                @event="openZoomedImage(item.cdnNm)"
              />
            </ion-col>
          </ion-row>
          <ion-infinite-scroll
            :disabled="isEndScroll"
            threshold="100px"
            @ionInfinite="ionInfinite"
          >
            <ion-infinite-scroll-content></ion-infinite-scroll-content>
          </ion-infinite-scroll>
        </ion-list>
      </div>
      <div class="row-box" v-if="mainValue == 'message'">
        <OpenChatMeetMessage :chatroomId="chatroomId" />
      </div>
      <ion-fab slot="fixed" vertical="bottom" horizontal="end" v-if="checkBtn">
        <ion-fab-button
          fill="clear"
          @click="goWriteOpenChatMeet('new')"
          style="padding: 5px"
        >
          <ion-ripple-effect></ion-ripple-effect>
          <ion-icon :icon="pencilOutline"></ion-icon>
        </ion-fab-button>
      </ion-fab>
    </ion-content>

    <ion-footer v-if="mainValue == 'home'" class="pl-1 pr-1">
      <ion-row>
        <ion-col size="2">
          <custom-button
            @click="eyeOn"
            size="large"
            expand="block"
            color="light"
            shape="round"
            :disabled="!bookmarkCheckDisabled"
            style=""
          >
            <ion-icon
              :icon="bookmarkYn !== 'Y' ? starOutline : star"
              size="large"
              color="primary"
            ></ion-icon>
          </custom-button>
        </ion-col>
        <ion-col size="10">
          <custom-button
            v-if="ssUserYn == 'Y'"
            @click="joinIn"
            size="large"
            expand="block"
            color="primary"
            shape="round"
            :disabled="!joinInCheckDisabled"
          >
            참여하기
          </custom-button>
          <custom-button
            v-else-if="attendChk == 'ATTEND'"
            @click="joinIn"
            size="large"
            expand="block"
            color="primary"
            shape="round"
            :disabled="!joinInCheckDisabled"
          >
            참여하기
          </custom-button>
          <custom-button
            class="footerBtn1"
            v-else-if="
              inviteYn == 'Y' &&
              attendRegTime != '' &&
              attendChk == 'NOTATTEND' &&
              attendYn != 'N'
            "
            @click="joinIn"
            size="large"
            expand="block"
            color="danger"
            :disabled="!joinInCheckDisabled"
          >
            취소할래요
          </custom-button>
          <custom-button
            v-else
            @click="joinIn"
            size="large"
            expand="block"
            color="secondary"
            :disabled="!joinInCheckDisabled"
          >
            참여하기
          </custom-button>
        </ion-col>
      </ion-row>
    </ion-footer>

    <CustomBoostModal
      :is-open="boostModal"
      :isBuffYn="isBuffYn"
      :coupon="coupon"
      :openchatRank="openchatRank"
      :totalRoom="totalRoom"
      :useCnt="useCnt"
      :calTimeStr="calTimeStr"
      @ionModalDidDismiss="boostModalClose"
      @close="boostModalClose"
      @event="useOpenChatBoost"
    />
    <ion-modal
      ref="modal"
      :is-open="meetUserModal"
      @ionModalDidDismiss="meetUserModal = false"
      :initial-breakpoint="1.0"
      :breakpoints="[0, 0.5, 1.0]"
    >
      <ion-page>
        <ion-header>
          <ion-toolbar class="text-left">
            <ion-title>참여자 목록</ion-title>
          </ion-toolbar>
        </ion-header>
        <ion-content>
          <ion-list class="ion-padding" lines="none">
            <OpenChatMeetProfile
              v-for="(item, index) in meetUserList"
              :thumbnail="item.cdnNm"
              :key="index"
              @click="goDailyCardInfo(item.userKey)"
            >
              <template #content>
                <h3>
                  <ion-text color="light" class="text-bold text-lg">
                    <ion-label>{{ item.nick }}</ion-label>
                  </ion-text>
                </h3>
              </template>
            </OpenChatMeetProfile>
          </ion-list>
        </ion-content>
      </ion-page>
    </ion-modal>
  </ion-page>
</template>

<script>
import {
  // openChatViewMapFn,
  openChatMeetMap,
  getData,
  openChatMeetViewMapFn,
  openChatMeetWriteMapFn,
  dailyCardInfoMapFn,
  openChatViewMap,
  openChatWriteMapFn,
  policeMapFn
  // messageTalkMapFn,
  // openChatMeetMapFn
} from '@/assets/js/common';
import {
  pencilOutline,
  chevronDownCircleOutline,
  star,
  starOutline
} from 'ionicons/icons';
import OpenChatMeetAlbumList from '@/components/OpenChatMeet/OpenChatMeetAlbumItem.vue';
import OpenChatMeetProfile from '@/components/OpenChatMeet/OpenChatMeetProfile.vue';
import OpenChatMeetMessage from '@/components/OpenChatMeet/OpenChatMeetMessage';
import OpenChatMeetInfo from '@/components/OpenChatMeet/OpenChatMeetInfo.vue';
import OpenChatMeetItem from '@/components/OpenChatMeet/OpenChatMeetItem.vue';
import OpenChatHome from '@/views/page/OpenChatHome.vue';
import CustomBoostModal from '@/components/Custom/CustomBoostModal.vue';
import Hammer from 'hammerjs';
import IconCalCheck from '@/assets/img/icon/icon_cal_check.svg';
import IconMenu from '@/assets/img/icon/icon_menu.svg';

export default {
  name: 'OpenChatMeet',
  inject: ['alertController', 'loadingController'],
  components: {
    OpenChatMeetInfo,
    OpenChatMeetItem,
    OpenChatMeetAlbumList,
    OpenChatMeetProfile,
    OpenChatHome,
    OpenChatMeetMessage,
    CustomBoostModal
  },
  data() {
    return {
      menuIcon: IconMenu,
      calendarCheck: IconCalCheck,
      star,
      starOutline,
      chevronDownCircleOutline,
      pencilOutline,
      openChatId: '',
      mainValue: 'home',
      categoryList: [],
      categoryCd: 'MEET_GROUP',
      categoryNm: '',
      meetList: [],
      noticeList: [],
      greetingList: [],
      reviewList: [],
      calculateList: [],
      meetUserModal: false,
      meetUserList: [],

      pageNo: 1,
      pageSize: 30,
      currentPageNo: 1,
      totalCount: 0,
      isEndScroll: false,
      albumList: [],
      btnDisabled: false,
      leaderYn: '',

      loading: null,
      isZoomed: false,

      chatroomType: '',

      /** 소모임 HOME */
      chatDetailMap: {},
      bookmarkYn: '',
      msg: '',
      dueDate: '',
      inviteYn: '',
      ssUserYn: '',
      mainFileId: '',
      isPopover: false,
      regUserKey: '',
      attendYn: '',
      chatroomId: '',
      attendChk: '',
      leaderConfirmYn: '',
      attendRegTime: '',
      recentTime: '',
      cdnThumbNmProfile: '',
      bookmarkCheckDisabled: true, // 북마크 활성화여부 체크
      joinInCheckDisabled: true, // 참여버튼 활성화여부 체크
      loadingTime: 500, // 버튼 로딩지연
      privateYn: true,
      attendInfoList: [],
      totalUserCount: 5,
      userPhotoId: '',

      interval: null,
      interval2: null,
      coupon: '',
      boostModal: false,
      isBuffYn: 'N',
      totalRoom: '',
      openchatRank: '',
      calTimeStr: '00:00:00',
      useCnt: '0',
      useType: '',
      remainingTime: '',
      remainingTimeStr: ''
    };
  },
  ionViewWillEnter() {
    // this.chatroomId = openChatMeetMap.chatroomId;
    this.getOpenChatId();
    this.getOpenChatDetail();
    // this.getLeaderCheck();
    // openChatViewMapFn(openChatMeetMap);
    // this.mainValue = this.mainValue == "home" ? "board" : this.mainValue;

    if (this.$route.params.routerType === 'doRefresh') {
      this.beforeReset();
    }

    this.getCategoryList();
  },
  ionViewDidLeave() {
    this.$store.state.currentChatroomId = 0;
    this.$store.state.currentMeetMainTab = null;
  },
  mounted() {
    if (openChatMeetMap.type == 'openChatMessage') {
      this.getOpenChatId('mount');
    } else {
      this.mainValue = 'home';
    }
  },
  beforeUnmount() {
    // this.mainValue = "board";
  },
  // watch: {
  //   mainValue(newValue) {
  //     if (newValue == "home") {
  //       this.getOpenChatDetail();
  //     } else {
  //       this.getLeaderCheck();
  //     }
  //   }
  // },
  computed: {
    checkBtn() {
      if (this.mainValue == 'board') {
        if (
          (this.categoryCd == 'MEET_GROUP' || this.categoryCd == 'NOTICE') &&
          this.leaderYn != 'Y'
        ) {
          return false;
        }
        return true;
      }
      return false;
    }
  },
  methods: {
    changeMeetMainValue() {
      this.$store.state.currentMeetMainTab = this.mainValue;
    },

    goDailyCardInfo(userKey) {
      this.meetUserModal = false;
      dailyCardInfoMapFn({ userKey: userKey, type: 'openChatMeet' });
      this.$router.push('/dailyCardInfo');
    },
    getOpenChatId(state) {
      getData({
        url: '/getOpenchatId',
        param: openChatMeetMap,
        then: (data) => {
          this.openChatId = data;

          if (state == 'mount') {
            this.mainBtn('messageCheck');
          }
          // this.getOpenChatMeetList();
        }
      });
    },

    /** 방장 or 부방장 체크 **/
    getLeaderCheck() {
      let chatroomId;
      if (
        openChatMeetMap.chatroomId == null ||
        openChatMeetMap.chatroomId == undefined
      ) {
        chatroomId = this.chatroomId;
      } else {
        chatroomId = openChatMeetMap.chatroomId;
      }
      getData({
        url: '/getLeaderCheck',
        param: {
          chatroomId: chatroomId,
          openChatKey: openChatMeetMap.openChatKey
        },
        then: (data) => {
          this.leaderYn = data.leaderYn;
        }
      });
    },

    goHome() {
      // openChatViewMapFn(openChatMeetMap);
      // this.$router.push("/openchatView");
    },

    getCategoryList() {
      getData({
        url: '/getOpenChatMeetCategory',
        param: {},
        then: (data) => {
          this.categoryList = data;
          if (this.categoryCd == 'MEET_GROUP') {
            this.categoryCd = data[0].categoryCd;
            this.categoryNm = data[0].categoryNm;
          }
        }
      });
    },

    getAlbumList() {
      this.pageNo = 1;
      this.pageSize = 30;
      this.currentPageNo = 1;
      this.albumList = [];
      this.totalCount = 0;
      this.isEndScroll = false;

      getData({
        url: '/getAlbumList',
        param: {
          openChatKey: openChatMeetMap.openChatKey,
          chatroomId: openChatMeetMap.chatroomId,
          pageNo: this.pageNo,
          pageSize: this.pageSize
        },
        then: (data) => {
          if (data.successYn == 'Y') {
            this.albumList = data.result;
          } else {
            this.warningAlert(data.message);
            this.mainValue = 'home';
          }
        }
      });
    },
    /** 무한 스크롤 **/
    ionInfinite(event) {
      let self = this;

      // 스크롤 로딩 셋타임아웃
      setTimeout(function () {
        self.pageNo = self.currentPageNo + 1;

        let url = '/getAlbumList';

        getData({
          url: url,
          param: {
            openChatKey: openChatMeetMap.openChatKey,
            chatroomId: openChatMeetMap.chatroomId,
            pageNo: self.pageNo,
            pageSize: self.pageSize
          },
          then: (data) => {
            for (let i in data.result) {
              self.albumList.push(data.result[i]);
            }
            self.currentPageNo += 1;
            self.$nextTick(() => {
              if (self.albumList.length == self.totalCount)
                self.isEndScroll = true;
            });
          }
        });
        event.target.complete();
      }, 1000);
    },

    /** Refresh */
    doRefresh(e) {
      setTimeout(() => {
        e.target.complete();
      }, 500);
    },

    getMeetUserList(item) {
      getData({
        url: '/getMeetUserList',
        param: {
          meetId: item.meetId,
          openChatId: item.openchatId
        },
        then: (data) => {
          this.meetUserList = data;
        }
      });
    },

    changeMeetCategory() {
      this.categoryNm = this.categoryList.find(
        (v) => v.categoryCd == this.categoryCd
      ).categoryNm;
    },

    categoryBtn(item) {
      if (this.categoryCd != item.categoryCd) {
        this.categoryCd = item.categoryCd;
        this.categoryNm = item.categoryNm;

        this.getOpenChatMeetList();
      }
    },
    boostModalClose() {
      clearInterval(this.interval2);
      this.boostModal = false;
    },
    openUseOpenChatModal() {
      this.getBuffUsingInfo();
      this.getUserCouponDataOne();
      clearInterval(this.interval2);
      this.interval2 = setInterval(() => {
        this.getBuffUsingInfo();
        this.getUserCouponDataOne();
      }, 10000);
      this.boostModal = true;
    },
    /** useOpenChatBoost 사용 로직 **/
    useOpenChatBoost() {
      let msg = '사용하시겠습니까?';
      if (this.coupon.quantity === 0) {
        this.boostModal = false;
        this.$router.push('/store');
      } else {
        const useOpenChatBoost = () => {
          getData({
            url: '/useOpenChatBoost',
            param: {
              couponCd: 'CU008',
              useType: this.useType, // 'COUPON', 'HEART'
              itemCd: this.useType === 'HEART' ? 'IT008_01' : '', // useType
              pointCd: this.useType === 'HEART' ? 'BUY' : '', // useType
              openChatKey: openChatViewMap.openChatKey
            },
            then: (data) => {
              if (
                data.successYn === 'N' ||
                data.successYn === 'NH' ||
                data.successYn === 'NE'
              ) {
                this.warningAlertNH(data.message);
              } else {
                this.warningAlert(data.message);

                this.getBuffUsingInfo();
                this.getUserCouponDataOne();

                clearInterval(this.interval2);
                this.interval2 = setInterval(() => {
                  this.getBuffUsingInfo();
                  this.getUserCouponDataOne();
                }, 10000);
              }
            }
          });
        };
        this.warningConfirm(msg, useOpenChatBoost);
      }
    },
    /** 보유현황 **/
    getUserCouponDataOne() {
      let couponCd = 'CU008';
      getData({
        url: '/getUserCouponDataOne',
        param: { couponCd: couponCd },
        then: (data) => {
          this.coupon = data;

          if (this.coupon.quantity > 0) {
            this.useType = 'COUPON';
          } else {
            this.useType = 'HEART';
          }
        }
      });
    },
    getBuffUsingInfo() {
      getData({
        url: '/getBuffUsingInfo',
        param: {
          couponCd: 'CU008',
          openChatKey: openChatViewMap.openChatKey
        },
        then: (data) => {
          this.isBuffYn = data.isBuffYn;
          this.remainingTime = data.remainingTime;
          this.remainingTimeStr = data.remainingTimeStr;
          this.useCnt = data.useCnt;
          this.openchatRank = data.openchatRank;
          this.totalRoom = data.totalRoom;

          this.$nextTick(() => {
            clearInterval(this.interval);
            this.timeCal();
            this.interval = setInterval(() => {
              if (this.isBuffYn === 'Y') {
                this.timeCal();
              }
            }, 1000);
          });
        }
      });
    },
    timeCal() {
      let hour, min, sec;

      hour = parseInt(this.remainingTime / 3600);
      min = parseInt((this.remainingTime % 3600) / 60);
      sec = this.remainingTime % 60;

      if (hour.toString().length === 1) hour = '0' + hour;
      if (min.toString().length === 1) min = '0' + min;
      if (sec.toString().length === 1) sec = '0' + sec;

      if (this.remainingTime > 0) {
        this.remainingTime = this.remainingTime - 1;
      } else {
        this.remainingTime = 0;
        clearInterval(this.interval);
        this.isBuffYn = 'N';
      }
      this.calTimeStr = hour + ':' + min + ':' + sec;
    },
    getOpenChatMeetList() {
      getData({
        url: '/getOpenChatMeetList',
        param: {
          openChatId: this.openChatId,
          openChatKey: openChatMeetMap.openChatKey,
          categoryCd: this.categoryCd
        },
        then: (data) => {
          if (data.successYn == 'Y') {
            switch (this.categoryCd) {
              case 'MEET_GROUP':
                this.meetList = data.resultList;
                break;
              case 'NOTICE':
                this.noticeList = data.resultList;
                break;
              case 'JOIN_GREETING':
                this.greetingList = data.resultList;
                break;
              case 'REVIEW':
                this.reviewList = data.resultList;
                break;
              case 'CALCULATE':
                this.calculateList = data.resultList;
                break;
              default:
                break;
            }
          } else {
            if (this.mainValue != 'home') {
              this.warningAlert(data.message);
              this.mainValue = 'home';
            } else {
              this.meetList = data.resultList;
            }
          }
        }
      });
    },
    goWriteOpenChatMeet(state, item) {
      if (state == 'new') {
        openChatMeetWriteMapFn({
          openChatKey: openChatMeetMap.openChatKey,
          chatroomId: openChatMeetMap.chatroomId,
          categoryList: this.categoryList,
          categoryCd: this.categoryCd,
          categoryNm: this.categoryNm,
          openChatId: this.openChatId,
          leaderYn: this.leaderYn,
          state: 'new'
        });
        this.$router.push('/openChatMeetWrite');
      } else if (state == 'edit') {
        openChatMeetWriteMapFn({
          openChatKey: openChatMeetMap.openChatKey,
          chatroomId: openChatMeetMap.chatroomId,
          categoryList: this.categoryList,
          categoryCd: this.categoryCd,
          categoryNm: this.categoryNm,
          openChatId: this.openChatId,
          leaderYn: this.leaderYn,
          meetId: item.meetId,
          state: 'edit'
        });
        this.$router.push('/openChatMeetWrite');
      }
    },

    mainBtn(type) {
      this.getLeaderCheck();
      if (this.mainValue != type) {
        if (type == 'board') {
          this.getOpenChatMeetList();
        } else if (type == 'album') {
          this.getAlbumList();
        } else if (type == 'messageCheck') {
          this.getOpenChatAttendCheck();
        }
        this.$store.state.currentMeetMainTab = type;
      }
    },

    getOpenChatAttendCheck() {
      getData({
        url: '/getOpenChatAttendCheck',
        param: {
          openChatId: this.openChatId
        },
        then: (data) => {
          if (data.successYn == 'N') {
            this.warningAlert(data.message);
            this.mainValue = 'home';
          } else if (data.successYn == 'Y') {
            this.mainValue = 'message';
          }
        }
      });
    },

    openMeetUserList(item) {
      this.meetUserModal = true;

      this.getMeetUserList(item);
    },

    btnHandle(item, state) {
      setTimeout(() => {
        this.btnDisabled = false;
      }, 500);
      /** 참여자 */
      if (state == 'add') {
        this.btnDisabled = true;
        getData({
          url: '/addMeetUser',
          param: {
            meetId: item.meetId,
            openChatId: item.openchatId
          },
          then: (data) => {
            this.warningAlert(data.message);
            this.getOpenChatMeetList();
          }
        });
      } else if (state == 'delete') {
        /** 참여 취소 */
        this.btnDisabled = true;
        getData({
          url: '/deleteMeetUser',
          param: {
            meetId: item.meetId,
            openChatId: item.openchatId
          },
          then: (data) => {
            this.warningAlert(data.message);
            this.getOpenChatMeetList();
          }
        });
      }
    },

    goView(item) {
      openChatMeetViewMapFn({
        openChatId: item.openchatId,
        meetId: item.meetId,
        categoryCd: this.categoryCd,
        categoryNm: this.categoryNm,
        openChatKey: openChatMeetMap.openChatKey,
        chatroomId: openChatMeetMap.chatroomId
      });
      this.$router.push('/openChatMeetView');
    },

    async warningAlert(message) {
      const alert = await this.alertController.create({
        header: '',
        subHeader: '',
        message: message,
        buttons: ['OK']
      });
      return alert.present();
    },

    /** 소모임 HOME **/
    getOpenChatDetail() {
      //세션스토리지에 내가 본 게시글을 저장하고 처음보는거면 조회수를 증가시킨다.
      //viewList = [{articleId: 1}, {articleId:2}]

      let isExist = false;
      let viewList = sessionStorage.getItem('articleViewList');
      let time = new Date();
      let currTime = new Date();

      if (!viewList) {
        viewList = [];
      } else {
        viewList = JSON.parse(viewList);
      }

      for (let idx in viewList) {
        if (viewList[idx]['openChatKey'] == openChatMeetMap.openChatKey) {
          //이미있음
          isExist = true;
        }

        //하루가 경과했으면 삭제한다.
        let diffTime =
          (currTime.getTime() - new Date(viewList[idx]['time']).getTime()) /
          (60 * 1000);
        if (diffTime > 1440) {
          viewList.splice(idx, 1);
        }
      }

      //없으면 조회이력을 추가한다.
      if (!isExist) {
        viewList.push({ openChatKey: openChatMeetMap.openChatKey, time: time });
        sessionStorage.setItem('articleViewList', JSON.stringify(viewList));
      }

      getData({
        url: '/getOpenChatDetail',
        param: {
          openChatKey: openChatMeetMap.openChatKey,
          viewAddYn: isExist ? 'Y' : 'N'
        },
        then: (data) => {
          this.itemList = data;
          this.dueDate = data.dueDateStr;

          this.inviteYn = data.attenderCancelYn == 'N' ? 'Y' : 'N';
          this.bookmarkYn = data.bookmarkYn;
          this.chatDetailMap = data;
          this.ssUserYn = data.ssUserKey == data.regUserKey ? 'Y' : 'N';
          this.regUserKey = data.regUserKey;
          this.mainFileId = data.mainFileId;
          this.attendYn = data.attendYn;
          this.chatroomId = data.chatroomId;
          this.$store.state.currentChatroomId = data.chatroomId;

          this.attendChk = data.attendChk;
          this.leaderConfirmYn = data.leaderConfirmYn;
          this.attendRegTime = data.attendRegTime;

          this.openchatRank = data.openchatRank;
          this.totalRoom = data.totalRoom;
          // this.useCnt = data.useCnt;
          // this.cdnNm = data.cdnNm;
          // this.cdnThumbNm = data.cdnThumbNm;
          this.privateYn = data.privateYn == 'Y' ? true : false;
          this.recentTime = this.getRecentDate(data.recentTime);
          this.totalUserCount =
            data.subscribeCd == 'NAVY_PLUS'
              ? 100
              : data.subscribeCd == 'GOLD_PASS'
              ? 300
              : 5;

          this.$nextTick(() => {
            this.getUserInfo();
            if (data.regUserKey == data.ssUserKey) {
              this.getAttendInfo();
            }
            this.getLeaderCheck();
            this.getOpenChatMeetList();
            this.replaceURL();
          });
        }
      });
    },
    getAttendInfo() {
      getData({
        url: '/getAttendInfo',
        param: {
          openChatKey: openChatMeetMap.openChatKey
        },
        then: (data) => {
          this.attendInfoList = data;

          this.$nextTick(() => {
            this.getUserInfo();
          });
        }
      });
    },
    agreeYn(type, userKey) {
      this.showLoading();
      /** 수락/거절 이벤트
       * param으로 참여신청자ID, 오픈챗ID, 타입 **/
      getData({
        url: '/updateOpenChatAttendYn',
        param: {
          openChatKey: openChatMeetMap.openChatKey,
          userKey: userKey,
          type: type,
          fileId: 0
        },
        then: (data) => {
          if (data.successYn == 'Y') {
            if (data.confirmYn == 'Y') {
              this.warningAlert('수락 처리 되었습니다');
            } else {
              this.warningAlert('거절 처리 되었습니다');
            }
          } else {
            this.warningAlert(data.message);
          }
          this.loading.dismiss();
          this.$nextTick(() => {
            this.getAttendInfo();
          });
        }
      });
    },
    getUserInfo() {
      getData({
        url: '/getUserInfo',
        param: {
          regUserKey: this.regUserKey
        },
        then: (data) => {
          this.userPhotoId = data.userPhotoId;
          this.cdnThumbNmProfile = data.cdnThumbNm;

          // this.openChatLodingCheck = true;

          this.$nextTick(() => {});
        }
      });
    },
    /** 오픈챗 최근 활동 멘트 format 함수 **/
    getRecentDate(args) {
      const today = new Date();
      const timeValue = new Date(args);
      const betweenTime = Math.floor(
        (today.getTime() - timeValue.getTime()) / 1000 / 60
      );
      if (betweenTime < 1) return '방금 전';
      if (betweenTime < 60) {
        return `${betweenTime}분 전`;
      }
      const betweenTimeHour = Math.floor(betweenTime / 60);
      if (betweenTimeHour < 24) {
        return `${betweenTimeHour}시간 전`;
      }
      const betweenTimeDay = Math.floor(betweenTime / 60 / 24);
      if (betweenTimeDay < 365) {
        return `${betweenTimeDay}일 전`;
      }
      return `${Math.floor(betweenTimeDay / 365)}년 전`;
    },

    joinIn() {
      if (this.attendYn == 'Y' || this.ssUserYn == 'Y') {
        // messageTalkMapFn({ chatroomId: this.chatroomId, type: "openChat" });
        // this.$router.push("/messageTalk");
        this.getOpenChatAttendCheck();
      } else {
        this.showLoading();
        this.joinInCheckDisabled = false;
        getData({
          url: '/setOpenChatInvite',
          param: {
            openChatKey: openChatMeetMap.openChatKey
          },
          then: (data) => {
            this.inviteYn = data.inviteYn;

            setTimeout(() => {
              this.loading.dismiss();
              this.joinInCheckDisabled = true;
            }, this.loadingTime);
          }
        });
      }
    },
    editOpenChat(item) {
      openChatWriteMapFn({
        openChatKey: openChatMeetMap.openChatKey,
        type: 'edit',
        item: item
      });
      this.$router.push('/openChatWrite');
    },
    async presentAlertConfirm() {
      const alert = await this.alertController.create({
        //cssClass: 'my-custom-class',
        header: '',
        message: '삭제하시겠습니까?',
        buttons: [
          {
            text: '취소',
            role: 'cancel',
            cssClass: 'secondary',
            handler: () => {}
          },
          {
            text: '삭제',
            handler: () => {
              getData({
                url: '/setOpenChatDel',
                param: {
                  openChatKey: openChatMeetMap.openChatKey
                },
                then: () => {}
              });

              this.presentAlert('삭제되었습니다.');

              // this.$router.go(-1);
              this.$router.push('/openChat');
            }
          }
        ]
      });
      return alert.present();
    },
    // 알림창
    async presentAlert(msg) {
      const alert = await this.alertController.create({
        header: '',
        message: msg,
        buttons: [
          {
            text: 'OK',
            role: 'Okay',
            handler: () => {}
          }
        ]
      });
      return alert.present();
    },
    policeBtn() {
      let regUserKey = this.chatDetailMap.regUserKey;
      policeMapFn({
        targetId: regUserKey,
        type: 'openChatView',
        targetKey: openChatMeetMap.openChatKey
      });
      this.$router.push('/police');
    },
    eyeOn() {
      this.showLoading();
      this.bookmarkCheckDisabled = false;
      getData({
        url: '/setOpenChatBookmark',
        param: {
          openChatKey: openChatMeetMap.openChatKey
        },
        then: (data) => {
          this.bookmarkYn = data.bookmarkYn;
          this.msg = data.message;

          setTimeout(() => {
            this.loading.dismiss();
            this.bookmarkCheckDisabled = true;
          }, this.loadingTime);
        }
      });
    },

    setCheckPrivateYn() {
      this.showLoading();
      getData({
        url: '/setCheckPrivateYn',
        param: {
          openChatKey: openChatMeetMap.openChatKey,
          privateYn: this.privateYn
        },
        then: (data) => {
          if (data.successYn == 'N') {
            this.getOpenChatDetail();
            this.warningAlert(data.message);
          } else {
            this.privateYn = data.privateYn == 'Y' ? true : false;
          }
          setTimeout(() => {
            this.loading.dismiss();
          }, 500);
        }
      });
    },

    replaceURL() {
      let regexp = /(?:http(s?)?|www)\S+\w/g;
      let _match = this.chatDetailMap.content.match(regexp);
      let match = [...new Set(_match)];
      this.chatDetailMap.replaceContent = this.chatDetailMap.content;
      Array.from(match).forEach((item) => {
        if (!item.includes('http')) {
          this.chatDetailMap.replaceContent =
            this.chatDetailMap.replaceContent.replaceAll(
              item,
              `<a href="http://${item}" target="_blank">${item}</a>`
            );
        } else {
          this.chatDetailMap.replaceContent =
            this.chatDetailMap.replaceContent.replaceAll(
              item,
              `<a href="${item}" target="_blank">${item}</a>`
            );
        }
      });
    },

    /** 이미지 확대, 이동**/
    openZoomedImage(data) {
      this.isZoomed = false;
      if (!this.isZoomed) {
        const imageUrl = 'https://' + data;
        const modal = document.createElement('div');
        const modalImage = document.createElement('img');

        modal.style.width = '100%';
        modal.style.height = '100%';
        modal.style.position = 'fixed';
        modal.style.top = '0';
        modal.style.left = '0';
        modal.style.zIndex = '1000';
        modal.style.backgroundColor = 'rgba(0, 0, 0, 0.7)';
        modal.style.display = 'flex';
        modal.style.alignItems = 'center';
        modal.style.justifyContent = 'center';

        modalImage.src = imageUrl;
        modalImage.style.width = '90%';
        modalImage.style.height = 'auto';
        modalImage.style.objectFit = 'contain';
        modalImage.style.transformOrigin = 'center';
        modalImage.style.pointerEvents = 'auto';

        modal.appendChild(modalImage);
        document.body.appendChild(modal);

        const hammer = new Hammer(modalImage);

        let currentScale = 1;
        let posX = 0;
        let posY = 0;
        let lastPosX = 0;
        let lastPosY = 0;

        hammer.get('pinch').set({ enable: true });
        hammer.get('pan').set({ direction: Hammer.DIRECTION_ALL });

        hammer.on('pinchin pinchout', (event) => {
          if (event.type == 'pinchin') {
            currentScale -= 0.02;
          } else if (event.type == 'pinchout') {
            currentScale += 0.02;
          }

          currentScale = Math.min(Math.max(currentScale, 0.5), 3);
          modalImage.style.transform = `translate(${posX}px, ${posY}px) scale(${currentScale})`;
        });

        hammer.on('panmove', (event) => {
          posX = lastPosX + event.deltaX;
          posY = lastPosY + event.deltaY;
          modalImage.style.transform = `translate(${posX}px, ${posY}px) scale(${currentScale})`;
        });

        hammer.on('panend', () => {
          lastPosX = posX;
          lastPosY = posY;
        });

        modal.addEventListener('click', () => {
          document.body.removeChild(modal);
        });
        this.isZoomed = true;
      } else {
        this.isZoomed = false;
      }
    },
    beforeReset() {
      this.chatDetailMap = {};
      this.userPhotoId = '';
      this.mainFileId = '';

      clearInterval(this.interval);
      clearInterval(this.interval2);
      this.isBuffYn = 'N';
      this.remainingTime = '';
      this.remainingTimeStr = '';
      this.calTimeStr = '00:00:00';
      this.openchatRank = '';
      this.totalRoom = '';
      this.useCnt = '0';
    },
    /** 로딩 **/
    async showLoading() {
      this.loading = await this.loadingController.create({
        message: 'Loading...',
        duration: 0
      });
      await this.loading.present();
    },
    truncateString(str, maxLength) {
      if (Object.keys(str).length > maxLength) {
        return str.slice(0, maxLength - 3) + '...';
      } else {
        return str;
      }
    }
  }
};
</script>

<style lang="scss" scoped>
ion-modal {
  --max-height: 60%;
  padding: 0 18px;
}

ion-avatar {
  width: 25px;
  height: 25px;
  //object-fit: cover;
  border-radius: 50%;
  //overflow: hidden;
  margin-top: 10px;
  margin-right: 10px;
}

ion-grid {
  /* background-color: rgba($color: white, $alpha: 0.5); */
  border: 1px solid var(--ion-border-color);
  border-radius: var(--ion-border-radius);
  padding: 1rem;

  + ion-grid {
    margin-top: 1rem;
  }

  .info {
    color: white;

    .date {
      display: flex;
      justify-content: flex-start;
      align-items: center;
      gap: 0.5rem;
      font-size: 10px;
      margin: 0.5rem 0 0;
    }
  }

  .content {
    margin: 0.5rem 0 0;

    .message {
      background-color: #272847;
      border-radius: var(--ion-border-radius);
      font-size: 14px;
      padding: 0.75rem 1rem;
      color: white;
      border-top-left-radius: 0;
    }

    .something {
      display: inline-flex;
      align-items: center;
      justify-content: flex-start;
      gap: 0.5rem;
      margin: 1rem 0 0;

      ion-chip {
        font-weight: bold;
      }

      ion-text {
        font-size: 12px;
      }
    }
  }
}

ion-footer {
  ion-button {
    &::part(native) {
      padding: 0;
    }
  }
}
</style>
