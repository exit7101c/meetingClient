<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-buttons slot="start">
          <BackButton @event="goRouter" />
        </ion-buttons>
        <ion-title>게시판</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content class="ion-padding">
      <div class="sticky-top segment-round">
        <ion-segment
          v-model="mainValue"
          mode="md"
          :scrollable="true"
          class="segment-round-button"
        >
          <ion-segment-button
            value="home"
            @click="goHome"
          >
            Home
          </ion-segment-button>
          <ion-segment-button
            value="board"
            @click="mainBtn('board')"
          >
            게시판
          </ion-segment-button>
          <ion-segment-button
            value="album"
            @click="mainBtn('album')"
          >
            사진첩
          </ion-segment-button>
        </ion-segment>
      </div>
      <div class="row-box" v-if="mainValue == 'board'">
        <div class="sticky-top segment-round">
          <ion-segment
            v-model="categoryCd"
            mode="md"
            :scrollable="true"
            class="segment-round-button"
          >
            <ion-segment-button
              v-show="categoryList != null"
              v-for="item in categoryList"
              :value="item.categoryCd"
              @click="categoryBtn(item)"
              :key="item.categoryCd"
            >
              {{ item.categoryNm }}
            </ion-segment-button>
          </ion-segment>
        </div>
        <ion-list lines="none" v-if="mainValue == 'board'">
          <ion-list-header>
            <ion-text color="light">{{ categoryNm }}</ion-text>
          </ion-list-header>
          <ion-list v-if="categoryCd == 'MEET_GROUP'">
            <ion-item v-if="meetList.length > 0"
                      v-for="(item, index) in meetList" :key="index"
                      style="width: 100%;"
            >
              <CardBox shadow="primary" style="margin-top: 20px; padding: 10px; width: 100%;">
                <ion-card-content>
                  <ion-row style="display: flex; align-items: center; justify-content: space-between;">
                    <ion-text color="light" class="text-bold text-lg">{{ item.title }}</ion-text>
                    <ion-text color="light" @click="goView(item)">상세보기</ion-text>
                  </ion-row>
                  <ion-row>
                    <ion-text color="light">모임날짜 : {{ item.meetDate }}</ion-text>
                  </ion-row>
                  <ion-row>
                    <ion-text color="light">장소: {{ item.meetAddr }}</ion-text>
                  </ion-row>
                  <ion-row>
                    <ion-text color="light">회비: {{ item.meetCost }}</ion-text>
                  </ion-row>
                  <ion-row>
                    <ion-text color="light">참여: {{ item.participateCnt }} / {{ item.meetRange }}</ion-text>
                  </ion-row>
                  <ion-row style="display: flex; align-items: center; justify-content: space-around;">
                    <ion-button color="primary" v-if="item.attendYn === 'N'" @click="addMeetUser(item, 'add')"
                                :disabled="btnDisabled">참여하기
                    </ion-button>
                    <ion-button color="danger" v-else @click="addMeetUser(item, 'delete')" :disabled="btnDisabled">
                      참여취소
                    </ion-button>
                    <ion-button color="secondary" @click="openMeetUserList(item)">참여자보기</ion-button>
                    <ion-button color="tertiary" v-if="item.createdUserYn === 'Y'" @click="openMeetUserList(item)">
                      수정하기
                    </ion-button>
                  </ion-row>
                </ion-card-content>
              </CardBox>
            </ion-item>
            <ion-item v-else>
              <ion-text color="light">생성된 모임이 없습니다.</ion-text>
            </ion-item>
          </ion-list>
          <ion-list v-if="categoryCd == 'NOTICE'">
            <ion-item v-if="noticeList.length > 0" v-for="(item, index) in noticeList" :key="index">
              <ion-item v-if="noticeList.length > 0"
                        v-for="(item, index) in noticeList" :key="index"
                        style="width: 100%;"
              >
                <CardBox shadow="primary" style="margin-top: 20px; padding: 10px; width: 100%;">
                  <ion-card-content>
                    <ion-row style="display: flex; align-items: center; justify-content: space-between;">
                      <ion-text color="light" class="text-bold text-lg">{{ item.title }}</ion-text>
                      <ion-text color="light" @click="goView(item)">상세보기</ion-text>
                    </ion-row>
                  </ion-card-content>
                </CardBox>
              </ion-item>
            </ion-item>
            <ion-item v-else>
              <ion-text color="light">생성된 공지가 없습니다.</ion-text>
            </ion-item>
          </ion-list>
          <ion-list v-if="categoryCd == 'JOIN_GREETING'">
            <ion-item v-if="greetingList.length > 0" v-for="(item, index) in greetingList" :key="index">
              <ion-item v-if="greetingList.length > 0"
                        v-for="(item, index) in greetingList" :key="index"
                        style="width: 100%;"
              >
                <CardBox shadow="primary" style="margin-top: 20px; padding: 10px; width: 100%;">
                  <ion-card-content>
                    <ion-row style="display: flex; align-items: center; justify-content: space-between;">
                      <ion-text color="light" class="text-bold text-lg">{{ item.title }}</ion-text>
                      <ion-text color="light" @click="goView(item)">상세보기</ion-text>
                    </ion-row>
                  </ion-card-content>
                </CardBox>
              </ion-item>
            </ion-item>
            <ion-item v-else>
              <ion-text color="light">생성된 가입인사가 없습니다.</ion-text>
            </ion-item>
          </ion-list>
          <ion-list v-if="categoryCd == 'REVIEW'">
            <ion-item v-if="reviewList.length > 0" v-for="(item, index) in reviewList" :key="index">
              <ion-item v-if="reviewList.length > 0"
                        v-for="(item, index) in reviewList" :key="index"
                        style="width: 100%;"
              >
                <CardBox shadow="primary" style="margin-top: 20px; padding: 10px; width: 100%;">
                  <ion-card-content>
                    <ion-row style="display: flex; align-items: center; justify-content: space-between;">
                      <ion-text color="light" class="text-bold text-lg">{{ item.title }}</ion-text>
                      <ion-text color="light" @click="goView(item)">상세보기</ion-text>
                    </ion-row>
                  </ion-card-content>
                </CardBox>
              </ion-item>
            </ion-item>
            <ion-item v-else>
              <ion-text color="light">생성된 후기가 없습니다.</ion-text>
            </ion-item>
          </ion-list>
          <ion-list v-if="categoryCd == 'CALCULATE'">
            <ion-item v-if="calculateList.length > 0" v-for="(item, index) in calculateList" :key="index">
              <ion-item v-if="calculateList.length > 0"
                        v-for="(item, index) in calculateList" :key="index"
                        style="width: 100%;"
              >
                <CardBox shadow="primary" style="margin-top: 20px; padding: 10px; width: 100%;">
                  <ion-card-content>
                    <ion-row style="display: flex; align-items: center; justify-content: space-between;">
                      <ion-text color="light" class="text-bold text-lg">{{ item.title }}</ion-text>
                      <ion-text color="light" @click="goView(item)">상세보기</ion-text>
                    </ion-row>
                  </ion-card-content>
                </CardBox>
              </ion-item>
            </ion-item>
            <ion-item v-else>
              <ion-text color="light">생성된 정산내역이 없습니다.</ion-text>
            </ion-item>
          </ion-list>
        </ion-list>
      </div>

      <div class="row-box" v-if="mainValue == 'album'">
        <ion-list lines="none">
          <ion-refresher slot="fixed" @ionRefresh="doRefresh($event)">
            <ion-refresher-content
              refreshing-spinner="circles"
              :pulling-icon="chevronDownCircleOutline"
            ></ion-refresher-content>
          </ion-refresher>
          <ion-row>
            <ion-col
              size="4"
              v-for="item in albumList"
            >
              <OpenChatMeetAlbumList
                :item="item"
                @event="openZoomedImage(item.cdnNm)"
              />
            </ion-col>
          </ion-row>
          <ion-infinite-scroll
            :disabled="isEndScroll"
            threshold="100px"
            @ionInfinite="ionInfinite"
          >
            <ion-infinite-scroll-content></ion-infinite-scroll-content>
          </ion-infinite-scroll>
        </ion-list>
      </div>
      <ion-fab slot="fixed" vertical="bottom" horizontal="end" v-if="mainValue != 'album'">
        <ion-fab-button
          fill="clear"
          @click="goWriteOpenChatMeet"
          style="padding: 5px"
        >
          <ion-ripple-effect></ion-ripple-effect>
          <ion-icon :icon="pencilOutline"></ion-icon>
        </ion-fab-button>
      </ion-fab>
    </ion-content>
    <ion-modal
      ref="modal"
      :is-open="meetUserModal"
      @ionModalDidDismiss="meetUserModal = false"
      :initial-breakpoint="1.0"
      :breakpoints="[0, 0.5, 1.0]"
    >
      <ion-page>
        <ion-header>
          <ion-toolbar class="text-left">
            <ion-title>참여자 목록</ion-title>
          </ion-toolbar>
        </ion-header>
        <ion-content>
          <ion-list class="ion-padding">
            <div
              class="row-box"
              v-for="(item, index) in meetUserList"
              :key="index"
            >
              <ion-text color="light">
                {{ item.nick }}
              </ion-text>
            </div>
          </ion-list>
        </ion-content>
      </ion-page>
    </ion-modal>
  </ion-page>
</template>

<script>

import {
  openChatViewMapFn,
  openChatMeetMapFn,
  openChatMeetMap,
  getData,
  openChatMeetViewMapFn
} from "@/assets/js/common";
import { pencilOutline, chevronDownCircleOutline } from "ionicons/icons";
import OpenChatMeetAlbumList from "@/components/MessageTalk/OpenChatMeetAlbumItem.vue";
import Hammer from "hammerjs";

export default {
  name: "OpenChatMeet",
  components: {
    OpenChatMeetAlbumList
  },
  inject: ["alertController"],
  ionViewWillEnter() {
    this.getOpenChatId();
    this.mainValue = this.mainValue == "home" ? "board" : this.mainValue;

    this.getCategoryList();
  },
  data() {
    return {
      chevronDownCircleOutline,
      pencilOutline,
      openChatId: "",
      mainValue: "board",
      categoryList: [],
      categoryCd: "MEET_GROUP",
      categoryNm: "",
      meetList: [],
      noticeList: [],
      greetingList: [],
      reviewList: [],
      calculateList: [],
      meetUserModal: false,
      meetUserList: [],


      pageNo: 1,
      pageSize: 30,
      currentPageNo: 1,
      totalCount: 0,
      isEndScroll: false,
      albumList: [],
      btnDisabled: false
    };
  },
  methods: {
    getOpenChatId() {
      getData({
        url: "/getOpenchatId",
        param: openChatMeetMap,
        then: (data) => {
          this.openChatId = data;
          this.getOpenChatMeetList();
        }
      });
    },

    goHome() {
      openChatViewMapFn(openChatMeetMap);
      this.$router.push("/openchatView");
    },

    getCategoryList() {
      getData({
        url: "/getOpenChatMeetCategory",
        param: {},
        then: (data) => {
          this.categoryList = data;
        }
      });
    },

    getAlbumList() {
      this.pageNo = 1;
      this.pageSize = 30;
      this.currentPageNo = 1;
      this.albumList = [];
      this.totalCount = 0;
      this.isEndScroll = false;

      getData({
        url: "/getAlbumList",
        param: {
          chatroomId: openChatMeetMap.chatroomId,
          pageNo: this.pageNo,
          pageSize: this.pageSize
        },
        then: (data) => {
          if (data.successYn === "Y") {
            console.log(data);
            this.albumList = data.result;
            console.log(this.albumList);
          } else {
            this.warningAlert(data.message);
          }
        }
      });

    },
    /** 무한 스크롤 **/
    ionInfinite(event) {
      let self = this;

      // 스크롤 로딩 셋타임아웃
      setTimeout(function() {
        self.pageNo = self.currentPageNo + 1;

        let url = "/getAlbumList";

        getData({
          url: url,
          param: {
            chatroomId: openChatMeetMap.chatroomId,
            pageNo: self.pageNo,
            pageSize: self.pageSize
          },
          then: (data) => {
            for (let i in data.result) {
              self.albumList.push(data.result[i]);
            }
            self.currentPageNo += 1;
            self.$nextTick(() => {
              if (self.albumList.length === self.totalCount)
                self.isEndScroll = true;
            });
          }
        });
        event.target.complete();
      }, 1000);
    },

    /** Refresh */
    doRefresh(e) {
      setTimeout(() => {
        e.target.complete();
      }, 500);
    },

    getMeetUserList(item) {
      getData({
        url: "/getMeetUserList",
        param: {
          meetId: item.meetId,
          openChatId: item.openchatId
        },
        then: (data) => {
          this.meetUserList = data;
        }
      });
    },

    categoryBtn(item) {
      this.categoryCd = item.categoryCd;
      this.categoryNm = item.categoryNm;

      this.getOpenChatMeetList();
    },

    getOpenChatMeetList(categoryCd) {
      getData({
        url: "/getOpenChatMeetList",
        param: {
          openChatId: this.openChatId,
          categoryCd: this.categoryCd
        },
        then: (data) => {
          switch (this.categoryCd) {
            case "MEET_GROUP" :
              this.meetList = data;
              break;
            case "NOTICE" :
              this.noticeList = data;
              break;
            case "JOIN_GREETING" :
              this.greetingList = data;
              break;
            case "REVIEW" :
              this.reviewList = data;
              break;
            case "CALCULATE" :
              this.calculateList = data;
              break;
            default:
              break;
          }
        }
      });
    },

    goWriteOpenChatMeet() {
      openChatMeetMapFn({
        categoryList: this.categoryList,
        openChatId: this.openChatId,
        state: "new"
      });
      this.$router.push("/openChatMeetWrite");
    },

    goRouter() {
      this.$router.push("/messageTalk");
    },

    mainBtn(type) {
      if (type == "board") {
        this.getOpenChatMeetList();
      } else if (type == "album") {
        this.getAlbumList();
      }
    },

    openMeetUserList(item) {
      this.meetUserModal = true;

      this.getMeetUserList(item);
    },

    addMeetUser(item, state) {
      /** 참여자 */
      if (state === "add") {
        this.btnDisabled = true;
        getData({
          url: "/addMeetUser",
          param: {
            meetId: item.meetId,
            openChatId: item.openchatId
          },
          then: (data) => {
            this.warningAlert(data.message);
            this.getOpenChatMeetList();
            setTimeout(() => {
              this.btnDisabled = false;
            }, 500);
          }
        });
      }
      /** 참여 취소 */
      else if (state === "delete") {
        this.btnDisabled = true;
        getData({
          url: "/deleteMeetUser",
          param: {
            meetId: item.meetId,
            openChatId: item.openchatId
          },
          then: (data) => {
            this.warningAlert(data.message);
            this.getOpenChatMeetList();
            setTimeout(() => {
              this.btnDisabled = false;
            }, 500);
          }
        });
      }
    },

    goView(item) {
      openChatMeetViewMapFn({
        openChatId: item.openChatId,
        meetId: item.meetId
      });

      // this.$router.push("/openChatMeetView");
    },

    async warningAlert(message) {
      const alert = await this.alertController.create({
        header: "",
        subHeader: "",
        message: message,
        buttons: ["OK"]
      });
      return alert.present();
    },

    /** 이미지 확대, 이동**/
    openZoomedImage(data) {
      this.isZoomed = false;
      if (!this.isZoomed) {
        const imageUrl = "https://" + data;
        const modal = document.createElement("div");
        const modalImage = document.createElement("img");

        modal.style.width = "100%";
        modal.style.height = "100%";
        modal.style.position = "fixed";
        modal.style.top = "0";
        modal.style.left = "0";
        modal.style.zIndex = "1000";
        modal.style.backgroundColor = "rgba(0, 0, 0, 0.7)";
        modal.style.display = "flex";
        modal.style.alignItems = "center";
        modal.style.justifyContent = "center";

        modalImage.src = imageUrl;
        modalImage.style.width = "90%";
        modalImage.style.height = "auto";
        modalImage.style.objectFit = "contain";
        modalImage.style.transformOrigin = "center";
        modalImage.style.pointerEvents = "auto";

        modal.appendChild(modalImage);
        document.body.appendChild(modal);

        const hammer = new Hammer(modalImage);

        let currentScale = 1;
        let posX = 0;
        let posY = 0;
        let lastPosX = 0;
        let lastPosY = 0;

        hammer.get("pinch").set({ enable: true });
        hammer.get("pan").set({ direction: Hammer.DIRECTION_ALL });

        hammer.on("pinchin pinchout", (event) => {
          if (event.type === "pinchin") {
            currentScale -= 0.02;
          } else if (event.type === "pinchout") {
            currentScale += 0.02;
          }

          currentScale = Math.min(Math.max(currentScale, 0.5), 3);
          modalImage.style.transform = `translate(${posX}px, ${posY}px) scale(${currentScale})`;
        });

        hammer.on("panmove", (event) => {
          posX = lastPosX + event.deltaX;
          posY = lastPosY + event.deltaY;
          modalImage.style.transform = `translate(${posX}px, ${posY}px) scale(${currentScale})`;
        });

        hammer.on("panend", () => {
          lastPosX = posX;
          lastPosY = posY;
        });

        modal.addEventListener("click", () => {
          document.body.removeChild(modal);
        });
        this.isZoomed = true;
      } else {
        this.isZoomed = false;
      }
    }
  }
};
</script>

<style lang="scss" scoped>
ion-modal {
  --max-height: 60%;
  padding: 0 18px;
}
</style>