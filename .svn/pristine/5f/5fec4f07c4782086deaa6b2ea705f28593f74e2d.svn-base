<template>
  <ion-page>
    <ion-header>
      <ion-toolbar style="--background: #1c1d48">
        <ion-buttons slot="start">
          <BackButton />
        </ion-buttons>
        <ion-title>{{ title }}</ion-title>
      </ion-toolbar>
    </ion-header>
    <ion-content v-if="bannerList.length > 0">
      <div>
        <!-- 상단 배너 -->
        <MainBanner :bannerList="bannerList" />
      </div>
      <!--      <div id="map" style="width: 100%; height: 100%;"></div>-->
      <MessageTalkMaps
        v-if="chatroomId != ''"
        :chatroomId="chatroomId"
        @modalInfo="modalInfo($event)"
      />
      <ion-modal
        :is-open="mapInfoModal"
        handle-behavior="cycle"
        @ionModalDidDismiss="mapInfoModal = false"
        :initial-breakpoint="0.95"
        :breakpoints="[0, 0.95]"
        class="custom-modal bottom-modal"
      >
        <ion-content>
          <CustomModalLayout>
            <template #header>
              <MessageTalkMapUserInfo
                :item="profileItem"
                @click="modalBtn('profile', modalItem)"
              />
            </template>
            <template #content>
              <ion-text
                color="light"
                class="text-lg text-bold"
                style="font-size: 20px"
              >
                {{ profileItem.shortWord }}
              </ion-text>
            </template>
            <template #footer>
              <div class="row-box">
                <ion-button
                  @click="modalBtn('profile', modalItem)"
                  color="primary"
                  shape="round"
                  expand="block"
                  size="large"
                >
                  프로필 보기
                </ion-button>
              </div>
            </template>
          </CustomModalLayout>
        </ion-content>
      </ion-modal>
    </ion-content>
  </ion-page>
</template>

<script>
import {
  IonPage,
  IonHeader,
  IonIcon,
  IonButtons,
  IonButton,
  IonToolbar,
  IonContent,
  loadingController
} from '@ionic/vue';

import {
  chevronBack,
  closeOutline,
  search,
  locationOutline
} from 'ionicons/icons';
import {
  getData,
  openChatViewMap,
  openChatViewMapFn,
  dailyCardInfoMapFn,
  messageTalkMap
} from '@/assets/js/common';
import MessageTalkMaps from '@/components/MessageTalk/MessageTalkMaps.vue';
import MessageTalkMapUserInfo from '@/components/MessageTalk/MessageTalkMapUserInfo';
import BackButton from '@/components/BackButton.vue';
import MainBanner from '@/components/Home/MainBanner.vue';

export default {
  name: 'MessageMap',
  components: {
    BackButton,
    IonPage,
    IonHeader,
    IonToolbar,
    IonIcon,
    IonButtons,
    IonButton,
    IonContent,
    MessageTalkMaps,
    MessageTalkMapUserInfo,
    MainBanner
  },
  data() {
    return {
      locationOutline,
      search,
      closeOutline,
      chevronBack,

      itemList: [],
      map: null,

      addrItem: '',
      currLat: '',
      currLon: '',
      mapInfoModal: false,
      modalItem: '',
      loading: null,

      mainFileId: '',
      regUserKey: '',
      userPhotoId: '',
      isEndScroll: false,

      ssUserYn: '',
      attendYn: '',
      attendChk: '',
      inviteYn: '',
      attendRegTime: '',
      modalHeight: '500px',
      intervalId: null,

      selectedLat: null, // 클릭한 위치의 위도
      selectedLng: null, // 클릭한 위치의 경도

      cdnThumbNmProfile: '',

      htmlMarker1: null,
      htmlMarker2: null,
      htmlMarker3: null,
      htmlMarker4: null,
      htmlMarker5: null,
      chatroomId: '',
      profileItem: [],

      title: '',
      bannerList: []
    };
  },
  ionViewWillEnter() {
    // 진입할 때 호출
    this.chatroomId = messageTalkMap.chatroomId;
    this.title = messageTalkMap.title;
    this.addrItem = '';
    this.currLat = '';
    this.currLon = '';
    // this.getLoginUser();
    // this.useGetClusterIcon();
    this.getBannerList();

    if (openChatViewMap.modal === 'open') {
      this.modalInfo(openChatViewMap.item);
    }
  },
  ionViewDidLeave() {
    // 떠날 때 호출
  },
  mounted() {},
  methods: {
    getBannerList() {
      getData({
        url: '/getBannerList',
        param: { bannerType: 'MESSAGE_MAP' },
        //param: { bannerType: "HOME" },
        then: (data) => {
          this.$nextTick(() => {
            let sampleList = data;
            this.bannerList = [...sampleList].sort(() => Math.random() - 0.5);
          });
        }
      });
    },

    getLoginUser() {
      // this.showLoading();

      getData({
        url: '/messageMain/getMessageUserAddr',
        param: {},
        then: (data) => {
          this.addrItem = data[0];

          /** 위치업데이트값 null 인경우 기본주소로 **/
          if (
            this.addrItem.currLat !== null ||
            this.addrItem.currLon !== null
          ) {
            this.currLat = this.addrItem.currLat;
            this.currLon = this.addrItem.currLon;
          } else {
            this.currLat = this.addrItem.lat;
            this.currLon = this.addrItem.lon;
          }

          this.getMessageLatLon();
        }
      });
    },

    getMessageLatLon() {
      getData({
        url: '/messageMain/getRoomUserLocation',
        param: { chatroomId: messageTalkMap.chatroomId },
        then: (data) => {
          this.itemList = data;

          this.$nextTick(() => {
            this.naverMap(this.currLat, this.currLon);
          });
        }
      });
    },

    modalBtn(type, item) {
      if (type === 'profile') {
        dailyCardInfoMapFn({ userKey: item.regUserKey, type: 'messageMap' });
        this.$router.push('/dailyCardInfo');
        this.mapInfoModal = false;
      }
    },

    joinIn(item) {
      if (this.attendYn === 'Y' || this.ssUserYn === 'Y') {
        this.$router.push({
          name: 'MessageTalk',
          query: { chatroomId: this.chatroomId }
        });
        return;
      } else {
        this.showLoading();

        getData({
          url: '/setOpenChatInvite',
          param: {
            openChatKey: item.openChatKey
          },
          then: (data) => {
            this.inviteYn = data.inviteYn;
            this.loading.dismiss();

            this.mapInfoModal = false;
          }
        });
      }
    },
    modalInfo(item) {
      this.modalItem = item;
      this.regUserKey = this.modalItem.regUserKey;
      this.mainFileId = this.modalItem.fileId;
      this.mapInfoModal = true;

      this.$nextTick(() => {
        this.getUserInfo();
      });
    },

    getUserInfo() {
      getData({
        url: '/getUserInfo',
        param: {
          regUserKey: this.regUserKey
        },
        then: (data) => {
          this.profileItem = data;
        }
      });
    },

    /** naver map **/
    naverMap(lat, lng) {
      const navermaps = window.naver.maps;

      let mapOptions = {
        center: new navermaps.LatLng(lat, lng),
        zoom: 15,
        /** 줌 컨트롤러 **/
        zoomControl: true,
        zoomControlOptions: {
          style: navermaps.ZoomControlStyle.LARGE,
          position: navermaps.Position.TOP_RIGHT
        }
      };

      /** 맵 생성 **/
      this.map = new navermaps.Map('messageTalkMap', mapOptions);

      /** 마커 클릭시 생성 (start) **/
      /** 마커 객체를 생성대기 **/
      // const markerIcon = new navermaps.Marker({
      //   // selectedLat, selectedLng가 있으면 지도에 추가
      //   map: this.map,
      //   // selectedLat, selectedLng가 있으면 해당 위치로
      //   position: new navermaps.LatLng( lat, lng ),
      //   icon: {
      //     url: 'https://navermaps.github.io/maps.js.ncp/docs/img/example/pin_default.png', // 마커의 이미지 URL
      //     size: new navermaps.Size(30, 47), // 이미지의 원래 크기
      //     scaledSize: new navermaps.Size(30, 47), // 화면에 표시될 이미지 크기
      //     origin: new navermaps.Point(0, 0),  // 이미지의 시작점
      //     anchor: new navermaps.Point(12, 37) // 마커를 지도에 고정시킬 위치
      //   }
      // });
      /** 마커 객체를 생성 **/
      // navermaps.Event.addListener(this.map, 'click', (e) => {
      //   /** 마커 위치변경 **/
      //   markerIcon.setMap(null);
      //   markerIcon.setPosition(e.coord);
      //   markerIcon.setMap(this.map);
      //
      //   // 클릭한 위치의 좌표 저장
      //   this.selectedLat = e.coord.lat();
      //   this.selectedLng = e.coord.lng();
      //   console.log("this.selectedLat : : :",this.selectedLat)
      //   console.log("this.selectedLng : : :",this.selectedLng)
      //
      // });
      /** 마커 클릭시 생성 (end) **/

      // 지도 초기화 후 커스텀 컨트롤 생성
      navermaps.Event.once(this.map, 'init', () => {
        /** 현재위치로 이동 버튼 **/
        let locationBtnHtml = `<a style="
                z-index: 100;
                overflow: hidden;
                display: inline-block;
                position: absolute;
                top: 7px;
                left: 5px;
                width: 34px;
                height: 34px;
                border: 1px solid rgba(58,70,88,.45);
                border-radius: 2px;
                background: #fcfcfd;
                  background-clip: border-box;
                text-align: center;
                -webkit-background-clip: padding;
                background-clip: padding-box;
              "
            >
            <span style="
                overflow: hidden;
                display: inline-block;
                color: transparent !important;
                vertical-align: top;
                background: url(https://ssl.pstatic.net/static/maps/m/spr_trff_v6.png) 0 0;
                background-position-x: 0px;
                background-position-y: 0px;
                background-size: auto;
                background-size: 200px 200px;
                -webkit-background-size: 200px 200px;
                width: 20px;
                height: 20px;
                margin: 7px 0 0 0;
                background-position: -153px -31px;
              ">중심위치</span>
           </a>`;
        let customControl = new navermaps.CustomControl(locationBtnHtml, {
          position: navermaps.Position.TOP_LEFT // 버튼의 위치 설정
        });

        customControl.setMap(this.map); // 버튼을 지도에 추가
        /** 현재위치로 이동 버튼 **/

        navermaps.Event.addDOMListener(
          customControl.getElement(),
          'click',
          () => {
            this.map.setCenter(new navermaps.LatLng(lat, lng)); // 버튼 클릭 시 지도 중심 변경
          }
        );
      });
      /** 마커 생성 **/
      this.itemList.forEach((markerInfo) => {
        const markerLatLng = new navermaps.LatLng(
          markerInfo.currLat,
          markerInfo.currLon
        );

        const marker = new navermaps.Marker({
          position: markerLatLng,
          map: this.map,
          icon: {
            // TODO: class marker 추가 => 추후 cluster 작업시 아래와 같은 구조로 작업해주시면 됩니다
            content: `<div class="marker"><img src="https://${markerInfo.cdnThumbNm}" /></div>`,
            // url: 'https://' + markerInfo.cdnThumbNm, // 마커의 이미지 URL
            size: new navermaps.Size(60, 60), // 이미지의 원래 크기
            scaledSize: new navermaps.Size(60, 60), // 화면에 표시될 이미지 크기
            origin: new navermaps.Point(0, 0), // 이미지의 시작점
            anchor: new navermaps.Point(12, 37) // 마커를 지도에 고정시킬 위치
          },
          title: markerInfo.title
        });

        /** 마커 이벤트 **/
        window.naver.maps.Event.addListener(marker, 'click', () => {
          this.modalInfo(markerInfo);
        });
      });
    },

    useGetClusterIcon() {
      if (this.htmlMarker1 == null) {
        this.htmlMarker1 = {
          content:
            '<div style="cursor:pointer;width:40px;height:40px;line-height:42px;font-size:10px;color:white;text-align:center;font-weight:bold;background:url(https://navermaps.github.io/maps.js.ncp/docs/img/cluster-marker-1.png);background-size:contain;"></div>',
          size: window.naver.maps.Size(40, 40),
          anchor: window.naver.maps.Point(20, 20)
        };
      }
      if (this.htmlMarker2 == null) {
        this.htmlMarker2 = {
          content:
            '<div style="cursor:pointer;width:40px;height:40px;line-height:42px;font-size:10px;color:white;text-align:center;font-weight:bold;background:url(https://navermaps.github.io/maps.js.ncp/docs/img/cluster-marker-2.png);background-size:contain;"></div>',
          size: window.naver.maps.Size(40, 40),
          anchor: window.naver.maps.Point(20, 20)
        };
      }
      if (this.htmlMarker3 == null) {
        this.htmlMarker3 = {
          content:
            '<div style="cursor:pointer;width:40px;height:40px;line-height:42px;font-size:10px;color:white;text-align:center;font-weight:bold;background:url(https://navermaps.github.io/maps.js.ncp/docs/img/cluster-marker-3.png);background-size:contain;"></div>',
          size: window.naver.maps.Size(40, 40),
          anchor: window.naver.maps.Point(20, 20)
        };
      }
      if (this.htmlMarker4 == null) {
        this.htmlMarker4 = {
          content:
            '<div style="cursor:pointer;width:40px;height:40px;line-height:42px;font-size:10px;color:white;text-align:center;font-weight:bold;background:url(https://navermaps.github.io/maps.js.ncp/docs/img/cluster-marker-4.png);background-size:contain;"></div>',
          size: window.naver.maps.Size(40, 40),
          anchor: window.naver.maps.Point(20, 20)
        };
      }
      if (this.htmlMarker5 == null) {
        this.htmlMarker5 = {
          content:
            '<div style="cursor:pointer;width:40px;height:40px;line-height:42px;font-size:10px;color:white;text-align:center;font-weight:bold;background:url(https://navermaps.github.io/maps.js.ncp/docs/img/cluster-marker-5.png);background-size:contain;"></div>',
          size: window.naver.maps.Size(40, 40),
          anchor: window.naver.maps.Point(20, 20)
        };
      }
    },

    /** 로딩 **/
    async showLoading() {
      this.loading = await loadingController.create({
        message: 'Loading...',
        duration: 0
      });

      await this.loading.present();
    }
  }
};
</script>

<style scoped>
ion-icon {
  color: black;
}

ion-toolbar {
  --background: #fff;
}

/** 모달 css **/
ion-modal {
  --height: 220px;
  --width: 100%;
  --border-radius: 7px;
  --box-shadow: 0 10px 15px -3px rgb(0 0 0 / 0.1),
    0 4px 6px -4px rgb(0 0 0 / 0.1);
}

.modal-btn {
  text-align: center;
  font-weight: bolder;
  font-size: 22px;
  color: black;
  margin: 5px;
}

/** 모달 css **/

ion-button.footerBtn {
  --background: #ff8383;
  --color: #ffffff;
  /*--border-color: rgb(136, 136, 136);*/
  /*--border-style: solid;*/
  /*--border-width: 1px;*/
  font-size: 19px;
  font-family: ‘appfontB’;
  width: 95%;
  margin-left: 10px;
  height: 56px;
}

ion-button.footerBtn1 {
  --background: #a3a3a3;
  --color: #ffffff;
  font-size: 19px;
  font-family: ‘appfontB’;
  width: 95%;
  margin-left: 10px;
  height: 56px;
}
</style>
