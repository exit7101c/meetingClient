{"version":3,"file":"js/3176.55a2f033.js","mappings":"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","sources":["webpack://navy/./node_modules/@capacitor/filesystem/dist/esm/web.js"],"sourcesContent":["import { WebPlugin, buildRequestInit } from '@capacitor/core';\nimport { Encoding } from './definitions';\nfunction resolve(path) {\n    const posix = path.split('/').filter(item => item !== '.');\n    const newPosix = [];\n    posix.forEach(item => {\n        if (item === '..' &&\n            newPosix.length > 0 &&\n            newPosix[newPosix.length - 1] !== '..') {\n            newPosix.pop();\n        }\n        else {\n            newPosix.push(item);\n        }\n    });\n    return newPosix.join('/');\n}\nfunction isPathParent(parent, children) {\n    parent = resolve(parent);\n    children = resolve(children);\n    const pathsA = parent.split('/');\n    const pathsB = children.split('/');\n    return (parent !== children &&\n        pathsA.every((value, index) => value === pathsB[index]));\n}\nexport class FilesystemWeb extends WebPlugin {\n    constructor() {\n        super(...arguments);\n        this.DB_VERSION = 1;\n        this.DB_NAME = 'Disc';\n        this._writeCmds = ['add', 'put', 'delete'];\n        /**\n         * Function that performs a http request to a server and downloads the file to the specified destination\n         *\n         * @param options the options for the download operation\n         * @returns a promise that resolves with the download file result\n         */\n        this.downloadFile = async (options) => {\n            const requestInit = buildRequestInit(options, options.webFetchExtra);\n            const response = await fetch(options.url, requestInit);\n            let blob;\n            if (!(options === null || options === void 0 ? void 0 : options.progress))\n                blob = await response.blob();\n            else if (!(response === null || response === void 0 ? void 0 : response.body))\n                blob = new Blob();\n            else {\n                const reader = response.body.getReader();\n                let bytes = 0;\n                const chunks = [];\n                const contentType = response.headers.get('content-type');\n                const contentLength = parseInt(response.headers.get('content-length') || '0', 10);\n                while (true) {\n                    const { done, value } = await reader.read();\n                    if (done)\n                        break;\n                    chunks.push(value);\n                    bytes += (value === null || value === void 0 ? void 0 : value.length) || 0;\n                    const status = {\n                        url: options.url,\n                        bytes,\n                        contentLength,\n                    };\n                    this.notifyListeners('progress', status);\n                }\n                const allChunks = new Uint8Array(bytes);\n                let position = 0;\n                for (const chunk of chunks) {\n                    if (typeof chunk === 'undefined')\n                        continue;\n                    allChunks.set(chunk, position);\n                    position += chunk.length;\n                }\n                blob = new Blob([allChunks.buffer], { type: contentType || undefined });\n            }\n            const blobUrl = URL.createObjectURL(blob);\n            const tempAnchor = document.createElement('a');\n            document.body.appendChild(tempAnchor);\n            tempAnchor.href = blobUrl;\n            tempAnchor.download = options.path; // This should be a filename, not a path\n            tempAnchor.click();\n            URL.revokeObjectURL(blobUrl);\n            document.body.removeChild(tempAnchor);\n            return { path: options.path, blob };\n        };\n    }\n    async initDb() {\n        if (this._db !== undefined) {\n            return this._db;\n        }\n        if (!('indexedDB' in window)) {\n            throw this.unavailable(\"This browser doesn't support IndexedDB\");\n        }\n        return new Promise((resolve, reject) => {\n            const request = indexedDB.open(this.DB_NAME, this.DB_VERSION);\n            request.onupgradeneeded = FilesystemWeb.doUpgrade;\n            request.onsuccess = () => {\n                this._db = request.result;\n                resolve(request.result);\n            };\n            request.onerror = () => reject(request.error);\n            request.onblocked = () => {\n                console.warn('db blocked');\n            };\n        });\n    }\n    static doUpgrade(event) {\n        const eventTarget = event.target;\n        const db = eventTarget.result;\n        switch (event.oldVersion) {\n            case 0:\n            case 1:\n            default: {\n                if (db.objectStoreNames.contains('FileStorage')) {\n                    db.deleteObjectStore('FileStorage');\n                }\n                const store = db.createObjectStore('FileStorage', { keyPath: 'path' });\n                store.createIndex('by_folder', 'folder');\n            }\n        }\n    }\n    async dbRequest(cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const req = store[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    async dbIndexRequest(indexName, cmd, args) {\n        const readFlag = this._writeCmds.indexOf(cmd) !== -1 ? 'readwrite' : 'readonly';\n        return this.initDb().then((conn) => {\n            return new Promise((resolve, reject) => {\n                const tx = conn.transaction(['FileStorage'], readFlag);\n                const store = tx.objectStore('FileStorage');\n                const index = store.index(indexName);\n                const req = index[cmd](...args);\n                req.onsuccess = () => resolve(req.result);\n                req.onerror = () => reject(req.error);\n            });\n        });\n    }\n    getPath(directory, uriPath) {\n        const cleanedUriPath = uriPath !== undefined ? uriPath.replace(/^[/]+|[/]+$/g, '') : '';\n        let fsPath = '';\n        if (directory !== undefined)\n            fsPath += '/' + directory;\n        if (uriPath !== '')\n            fsPath += '/' + cleanedUriPath;\n        return fsPath;\n    }\n    async clear() {\n        const conn = await this.initDb();\n        const tx = conn.transaction(['FileStorage'], 'readwrite');\n        const store = tx.objectStore('FileStorage');\n        store.clear();\n    }\n    /**\n     * Read a file from disk\n     * @param options options for the file read\n     * @return a promise that resolves with the read file data result\n     */\n    async readFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        // const encoding = options.encoding;\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        return { data: entry.content ? entry.content : '' };\n    }\n    /**\n     * Write a file to disk in the specified location on device\n     * @param options options for the file write\n     * @return a promise that resolves with the file write result\n     */\n    async writeFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const doRecursive = options.recursive;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: doRecursive,\n                });\n            }\n        }\n        if (!encoding) {\n            data = data.indexOf(',') >= 0 ? data.split(',')[1] : data;\n            if (!this.isBase64String(data))\n                throw Error('The supplied data is not valid base64 content.');\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: now,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n        return {\n            uri: pathObj.path,\n        };\n    }\n    /**\n     * Append to a file on disk in the specified location on device\n     * @param options options for the file append\n     * @return a promise that resolves with the file write result\n     */\n    async appendFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        let data = options.data;\n        const encoding = options.encoding;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const now = Date.now();\n        let ctime = now;\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (occupiedEntry && occupiedEntry.type === 'directory')\n            throw Error('The supplied path is a directory.');\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        if (parentEntry === undefined) {\n            const subDirIndex = parentPath.indexOf('/', 1);\n            if (subDirIndex !== -1) {\n                const parentArgPath = parentPath.substr(subDirIndex);\n                await this.mkdir({\n                    path: parentArgPath,\n                    directory: options.directory,\n                    recursive: true,\n                });\n            }\n        }\n        if (!encoding && !this.isBase64String(data))\n            throw Error('The supplied data is not valid base64 content.');\n        if (occupiedEntry !== undefined) {\n            if (occupiedEntry.content !== undefined && !encoding) {\n                data = btoa(atob(occupiedEntry.content) + atob(data));\n            }\n            else {\n                data = occupiedEntry.content + data;\n            }\n            ctime = occupiedEntry.ctime;\n        }\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'file',\n            size: data.length,\n            ctime: ctime,\n            mtime: now,\n            content: data,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Delete a file from disk\n     * @param options options for the file delete\n     * @return a promise that resolves with the deleted file data result\n     */\n    async deleteFile(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined)\n            throw Error('File does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [\n            IDBKeyRange.only(path),\n        ]);\n        if (entries.length !== 0)\n            throw Error('Folder is not empty.');\n        await this.dbRequest('delete', [path]);\n    }\n    /**\n     * Create a directory.\n     * @param options options for the mkdir\n     * @return a promise that resolves with the mkdir result\n     */\n    async mkdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const doRecursive = options.recursive;\n        const parentPath = path.substr(0, path.lastIndexOf('/'));\n        const depth = (path.match(/\\//g) || []).length;\n        const parentEntry = (await this.dbRequest('get', [parentPath]));\n        const occupiedEntry = (await this.dbRequest('get', [path]));\n        if (depth === 1)\n            throw Error('Cannot create Root directory');\n        if (occupiedEntry !== undefined)\n            throw Error('Current directory does already exist.');\n        if (!doRecursive && depth !== 2 && parentEntry === undefined)\n            throw Error('Parent directory must exist');\n        if (doRecursive && depth !== 2 && parentEntry === undefined) {\n            const parentArgPath = parentPath.substr(parentPath.indexOf('/', 1));\n            await this.mkdir({\n                path: parentArgPath,\n                directory: options.directory,\n                recursive: doRecursive,\n            });\n        }\n        const now = Date.now();\n        const pathObj = {\n            path: path,\n            folder: parentPath,\n            type: 'directory',\n            size: 0,\n            ctime: now,\n            mtime: now,\n        };\n        await this.dbRequest('put', [pathObj]);\n    }\n    /**\n     * Remove a directory\n     * @param options the options for the directory remove\n     */\n    async rmdir(options) {\n        const { path, directory, recursive } = options;\n        const fullPath = this.getPath(directory, path);\n        const entry = (await this.dbRequest('get', [fullPath]));\n        if (entry === undefined)\n            throw Error('Folder does not exist.');\n        if (entry.type !== 'directory')\n            throw Error('Requested path is not a directory');\n        const readDirResult = await this.readdir({ path, directory });\n        if (readDirResult.files.length !== 0 && !recursive)\n            throw Error('Folder is not empty');\n        for (const entry of readDirResult.files) {\n            const entryPath = `${path}/${entry.name}`;\n            const entryObj = await this.stat({ path: entryPath, directory });\n            if (entryObj.type === 'file') {\n                await this.deleteFile({ path: entryPath, directory });\n            }\n            else {\n                await this.rmdir({ path: entryPath, directory, recursive });\n            }\n        }\n        await this.dbRequest('delete', [fullPath]);\n    }\n    /**\n     * Return a list of files from the directory (not recursive)\n     * @param options the options for the readdir operation\n     * @return a promise that resolves with the readdir directory listing result\n     */\n    async readdir(options) {\n        const path = this.getPath(options.directory, options.path);\n        const entry = (await this.dbRequest('get', [path]));\n        if (options.path !== '' && entry === undefined)\n            throw Error('Folder does not exist.');\n        const entries = await this.dbIndexRequest('by_folder', 'getAllKeys', [IDBKeyRange.only(path)]);\n        const files = await Promise.all(entries.map(async (e) => {\n            let subEntry = (await this.dbRequest('get', [e]));\n            if (subEntry === undefined) {\n                subEntry = (await this.dbRequest('get', [e + '/']));\n            }\n            return {\n                name: e.substring(path.length + 1),\n                type: subEntry.type,\n                size: subEntry.size,\n                ctime: subEntry.ctime,\n                mtime: subEntry.mtime,\n                uri: subEntry.path,\n            };\n        }));\n        return { files: files };\n    }\n    /**\n     * Return full File URI for a path and directory\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async getUri(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        return {\n            uri: (entry === null || entry === void 0 ? void 0 : entry.path) || path,\n        };\n    }\n    /**\n     * Return data about a file\n     * @param options the options for the stat operation\n     * @return a promise that resolves with the file stat result\n     */\n    async stat(options) {\n        const path = this.getPath(options.directory, options.path);\n        let entry = (await this.dbRequest('get', [path]));\n        if (entry === undefined) {\n            entry = (await this.dbRequest('get', [path + '/']));\n        }\n        if (entry === undefined)\n            throw Error('Entry does not exist.');\n        return {\n            type: entry.type,\n            size: entry.size,\n            ctime: entry.ctime,\n            mtime: entry.mtime,\n            uri: entry.path,\n        };\n    }\n    /**\n     * Rename a file or directory\n     * @param options the options for the rename operation\n     * @return a promise that resolves with the rename result\n     */\n    async rename(options) {\n        await this._copy(options, true);\n        return;\n    }\n    /**\n     * Copy a file or directory\n     * @param options the options for the copy operation\n     * @return a promise that resolves with the copy result\n     */\n    async copy(options) {\n        return this._copy(options, false);\n    }\n    async requestPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    async checkPermissions() {\n        return { publicStorage: 'granted' };\n    }\n    /**\n     * Function that can perform a copy or a rename\n     * @param options the options for the rename operation\n     * @param doRename whether to perform a rename or copy operation\n     * @return a promise that resolves with the result\n     */\n    async _copy(options, doRename = false) {\n        let { toDirectory } = options;\n        const { to, from, directory: fromDirectory } = options;\n        if (!to || !from) {\n            throw Error('Both to and from must be provided');\n        }\n        // If no \"to\" directory is provided, use the \"from\" directory\n        if (!toDirectory) {\n            toDirectory = fromDirectory;\n        }\n        const fromPath = this.getPath(fromDirectory, from);\n        const toPath = this.getPath(toDirectory, to);\n        // Test that the \"to\" and \"from\" locations are different\n        if (fromPath === toPath) {\n            return {\n                uri: toPath,\n            };\n        }\n        if (isPathParent(fromPath, toPath)) {\n            throw Error('To path cannot contain the from path');\n        }\n        // Check the state of the \"to\" location\n        let toObj;\n        try {\n            toObj = await this.stat({\n                path: to,\n                directory: toDirectory,\n            });\n        }\n        catch (e) {\n            // To location does not exist, ensure the directory containing \"to\" location exists and is a directory\n            const toPathComponents = to.split('/');\n            toPathComponents.pop();\n            const toPath = toPathComponents.join('/');\n            // Check the containing directory of the \"to\" location exists\n            if (toPathComponents.length > 0) {\n                const toParentDirectory = await this.stat({\n                    path: toPath,\n                    directory: toDirectory,\n                });\n                if (toParentDirectory.type !== 'directory') {\n                    throw new Error('Parent directory of the to path is a file');\n                }\n            }\n        }\n        // Cannot overwrite a directory\n        if (toObj && toObj.type === 'directory') {\n            throw new Error('Cannot overwrite a directory with a file');\n        }\n        // Ensure the \"from\" object exists\n        const fromObj = await this.stat({\n            path: from,\n            directory: fromDirectory,\n        });\n        // Set the mtime/ctime of the supplied path\n        const updateTime = async (path, ctime, mtime) => {\n            const fullPath = this.getPath(toDirectory, path);\n            const entry = (await this.dbRequest('get', [fullPath]));\n            entry.ctime = ctime;\n            entry.mtime = mtime;\n            await this.dbRequest('put', [entry]);\n        };\n        const ctime = fromObj.ctime ? fromObj.ctime : Date.now();\n        switch (fromObj.type) {\n            // The \"from\" object is a file\n            case 'file': {\n                // Read the file\n                const file = await this.readFile({\n                    path: from,\n                    directory: fromDirectory,\n                });\n                // Optionally remove the file\n                if (doRename) {\n                    await this.deleteFile({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n                let encoding;\n                if (!this.isBase64String(file.data)) {\n                    encoding = Encoding.UTF8;\n                }\n                // Write the file to the new location\n                const writeResult = await this.writeFile({\n                    path: to,\n                    directory: toDirectory,\n                    data: file.data,\n                    encoding: encoding,\n                });\n                // Copy the mtime/ctime of a renamed file\n                if (doRename) {\n                    await updateTime(to, ctime, fromObj.mtime);\n                }\n                // Resolve promise\n                return writeResult;\n            }\n            case 'directory': {\n                if (toObj) {\n                    throw Error('Cannot move a directory over an existing object');\n                }\n                try {\n                    // Create the to directory\n                    await this.mkdir({\n                        path: to,\n                        directory: toDirectory,\n                        recursive: false,\n                    });\n                    // Copy the mtime/ctime of a renamed directory\n                    if (doRename) {\n                        await updateTime(to, ctime, fromObj.mtime);\n                    }\n                }\n                catch (e) {\n                    // ignore\n                }\n                // Iterate over the contents of the from location\n                const contents = (await this.readdir({\n                    path: from,\n                    directory: fromDirectory,\n                })).files;\n                for (const filename of contents) {\n                    // Move item from the from directory to the to directory\n                    await this._copy({\n                        from: `${from}/${filename.name}`,\n                        to: `${to}/${filename.name}`,\n                        directory: fromDirectory,\n                        toDirectory,\n                    }, doRename);\n                }\n                // Optionally remove the original from directory\n                if (doRename) {\n                    await this.rmdir({\n                        path: from,\n                        directory: fromDirectory,\n                    });\n                }\n            }\n        }\n        return {\n            uri: toPath,\n        };\n    }\n    isBase64String(str) {\n        try {\n            return btoa(atob(str)) == str;\n        }\n        catch (err) {\n            return false;\n        }\n    }\n}\nFilesystemWeb._debug = true;\n//# sourceMappingURL=web.js.map"],"names":["resolve","path","posix","split","filter","item","newPosix","forEach","length","pop","push","join","isPathParent","parent","children","pathsA","pathsB","every","value","index","FilesystemWeb","constructor","super","arguments","this","DB_VERSION","DB_NAME","_writeCmds","downloadFile","async","options","requestInit","webFetchExtra","response","fetch","url","blob","progress","body","reader","getReader","bytes","chunks","contentType","headers","get","contentLength","parseInt","done","read","status","notifyListeners","allChunks","Uint8Array","position","chunk","set","Blob","buffer","type","undefined","blobUrl","URL","createObjectURL","tempAnchor","document","createElement","appendChild","href","download","click","revokeObjectURL","removeChild","_db","window","unavailable","Promise","reject","request","indexedDB","open","onupgradeneeded","doUpgrade","onsuccess","result","onerror","error","onblocked","console","warn","static","event","eventTarget","target","db","oldVersion","objectStoreNames","contains","deleteObjectStore","store","createObjectStore","keyPath","createIndex","cmd","args","readFlag","indexOf","initDb","then","conn","tx","transaction","objectStore","req","indexName","getPath","directory","uriPath","cleanedUriPath","replace","fsPath","clear","entry","dbRequest","Error","data","content","encoding","doRecursive","recursive","occupiedEntry","parentPath","substr","lastIndexOf","parentEntry","subDirIndex","parentArgPath","mkdir","isBase64String","now","Date","pathObj","folder","size","ctime","mtime","uri","btoa","atob","entries","dbIndexRequest","IDBKeyRange","only","depth","match","fullPath","readDirResult","readdir","files","entryPath","name","entryObj","stat","deleteFile","rmdir","all","map","e","subEntry","substring","_copy","publicStorage","doRename","toDirectory","to","from","fromDirectory","fromPath","toPath","toObj","toPathComponents","toParentDirectory","fromObj","updateTime","file","readFile","writeResult","writeFile","contents","filename","str","err","_debug"],"sourceRoot":""}