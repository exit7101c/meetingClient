<template>
  <ion-page>
    <ion-header>
      <ion-toolbar>
        <ion-buttons slot="start">
          <ion-button @click="presentAlertConfirm()">
            <ion-icon slot="icon-only" :icon="chevronBack" />
          </ion-button>
          <!--          <BackButton />-->
        </ion-buttons>
        <ion-title>Í∏∞Î≥∏ÏÑ§Ï†ï</ion-title>
      </ion-toolbar>
      <ProgressBar :currIdx="isValidateForm ? 5 : 4"></ProgressBar>
    </ion-header>

    <ion-content>
      <div class="layout-container">
        <!-- title -->
        <JoinTitle>
          <template v-slot:title>
            Í∏∞Î≥∏ Ï†ïÎ≥¥Î•º <br />
            ÏûëÏÑ±Ìï¥ Ï£ºÏÑ∏Ïöî
          </template>
          <template v-slot:desc>
            ÌîÑÎ°úÌïÑÏóê Í∏∞Î≥∏ÏúºÎ°ú Îì±Î°ùÎêòÎäî Ï†ïÎ≥¥ÏûÖÎãàÎã§.
          </template>
        </JoinTitle>
        <div class="form-wrapper">
          <!-- Ìù°Ïó∞ Ïó¨Î∂Ä -->
          <ion-grid>
            <ion-row>
              <ion-col>
                <ion-text color="light" class="text-sm">Ìù°Ïó∞ Ïó¨Î∂Ä üö≠</ion-text>
              </ion-col>
            </ion-row>
            <ion-row>
              <ion-col
                size="auto"
                v-for="(data, index) in smokeList"
                :key="index"
              >
                <ion-button
                  color="secondary"
                  size="small"
                  :fill="isSelectedSmoke(data) ? 'solid' : 'outline'"
                  @click="toggleItem('smoke', data)"
                >
                  {{ data.smokeNm }}
                </ion-button>
              </ion-col>
            </ion-row>
          </ion-grid>
          <!-- ÏùåÏ£º Ïó¨Î∂Ä -->
          <ion-grid>
            <ion-row>
              <ion-col>
                <ion-text color="light" class="text-sm">ÏùåÏ£º Ïó¨Î∂Ä ü•Ç</ion-text>
              </ion-col>
            </ion-row>
            <ion-row>
              <ion-col
                size="auto"
                v-for="(data, index) in drinkingList"
                :key="index"
              >
                <ion-button
                  color="secondary"
                  size="small"
                  :fill="isSelectedDrinking(data) ? 'solid' : 'outline'"
                  @click="toggleItem('drinking', data)"
                >
                  {{ data.drinkNm }}
                </ion-button>
              </ion-col>
            </ion-row>
          </ion-grid>
          <!-- Ï≤¥Ìòï -->
          <!--          <ion-grid>-->
          <!--            <ion-row>-->
          <!--              <ion-col>-->
          <!--                <ion-text color="light" class="text-sm"-->
          <!--                >Ï≤¥ÌòïÏùÑ ÏïåÎ†§Ï£ºÏÑ∏Ïöî-->
          <!--                </ion-text-->
          <!--                >-->
          <!--              </ion-col>-->
          <!--            </ion-row>-->
          <!--            <ion-row>-->
          <!--              <ion-col-->
          <!--                size="auto"-->
          <!--                v-for="(data, index) in bodyList"-->
          <!--                :key="index"-->
          <!--              >-->
          <!--                <ion-button-->
          <!--                  color="secondary"-->
          <!--                  size="small"-->
          <!--                  :fill="isSelectedBody(data) ? 'solid' : 'outline'"-->
          <!--                  @click="toggleItem('body', data)"-->
          <!--                >-->
          <!--                  {{ data.formNm }}-->
          <!--                </ion-button>-->
          <!--              </ion-col>-->
          <!--            </ion-row>-->
          <!--          </ion-grid>-->
          <!-- ÌÇ§ -->
          <ion-grid>
            <ion-row>
              <ion-col>
                <ion-text color="light" class="text-sm"
                >ÌÇ§Î•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî
                </ion-text
                >
              </ion-col>
            </ion-row>
            <ion-row>
              <ion-col>
                <ion-range
                  aria-label="Volume"
                  min="140"
                  max="200"
                  step="1"
                  value="140"
                  v-model="selectedValue"
                  @ionChange="onRangeChange"
                >
                  <ion-label color="light" slot="end" class="text-sm"
                  >{{ selectedValue }}cm
                  </ion-label
                  >
                </ion-range>
              </ion-col>
            </ion-row>
          </ion-grid>
          <!-- Î™∏Î¨¥Í≤å -->
          <ion-grid>
            <ion-row>
              <ion-col>
                <ion-text color="light" class="text-sm"
                >Î™∏Î¨¥Í≤åÎ•º ÏïåÎ†§Ï£ºÏÑ∏Ïöî
                </ion-text
                >
              </ion-col>
            </ion-row>
            <ion-row>
              <ion-col>
                <ion-range
                  aria-label="Volume"
                  min="40"
                  max="120"
                  step="1"
                  value="40"
                  v-model="weightValue"
                  @ionChange="onWeightRangeChange"
                >
                  <ion-label color="light" slot="end" class="text-sm"
                  >{{ weightValue }}kg
                  </ion-label
                  >
                </ion-range>
              </ion-col>
            </ion-row>
          </ion-grid>
        </div>
      </div>
    </ion-content>
    <ion-footer class="join-footer">
      <div class="layout-container">
        <div class="btn-group">
          <ion-button
            color="primary"
            size="large"
            expand="block"
            shape="round"
            :disabled="!isValidateForm"
            @click="isValidateAndNavigate"
          >
            <ion-ripple-effect></ion-ripple-effect>
            Îã§ÏùåÏúºÎ°ú
          </ion-button>
        </div>
      </div>
    </ion-footer>
  </ion-page>
</template>

<script>
import { chevronBack } from "ionicons/icons";
import { getData, tempMap } from "@/assets/js/common";
import JoinTitle from "@/components/JoinTitle.vue";
import ProgressBar from "@/components/ProgressBar.vue";

export default {
  name: "JoinInfo",
  inject: ["alertController"],
  components: {
    JoinTitle,
    ProgressBar
  },
  computed: {
    // PUB
    isValidateForm() {
      return (
        this.selectSmokes.length > 0 &&
        this.selectDrinkings.length > 0 &&
        // this.selectBodys.length > 0 &&
        this.selectedValue > 139 &&
        this.selectedValue > 39
      );
    }
  },
  data() {
    return {
      chevronBack,
      ItemList: [],

      selectedValue: 139, // ÌÇ§
      weightValue: 39, // Î™∏Î¨¥Í≤å

      bodyList: [],
      smokeList: [],
      drinkingList: [],

      selectBodys: [],
      selectSmokes: [],
      selectDrinkings: []
    };
  },

  ionViewWillEnter() {
    // ÏßÑÏûÖÌï† Îïå Ìò∏Ï∂ú
    this.getInfoList();
    this.selectedValue = 139;
    this.weightValue = 39;
    // if (tempMap.state !== "ing") {
      // this.selectBodys = [];
      this.selectSmokes = [];
      this.selectDrinkings = [];
    // }


  },

  ionViewDidLeave() {
    // Îñ†ÎÇ† Îïå Ìò∏Ï∂ú
  },
  // PUB
  mounted() {
    this.getInfoList();
  },
  methods: {
    onRangeChange(event) {
      this.selectedValue = event.detail.value;
    },
    onWeightRangeChange(event) {
      this.weightValue = event.detail.value;
    },

    goRouter() {
      // tempMap.item = {
      //   tall: this.selectedValue,
      //   weight: this.weightValue,
      //   smoke: this.selectSmokes[0].smokeCd,
      //   drink: this.selectDrinkings[0].drinkCd
      // };
      this.$store.state.joinMap['tall'] = this.selectedValue;
      this.$store.state.joinMap['weight'] = this.weightValue;
      this.$store.state.joinMap['smoke'] = this.selectSmokes[0].smokeCd;
      this.$store.state.joinMap['drink'] = this.selectDrinkings[0].drinkCd;
      // tempMap.item.tall = this.selectedValue;
      // tempMap.item.weight = this.weightValue;
      // tempMap.item.smoke = this.selectSmokes[0].smokeCd;
      // tempMap.item.drink = this.selectDrinkings[0].drinkCd;
      // tempMap.item.form = this.selectBodys[0].formCd;

      this.$router.push("/joinInterview");
    },

    getInfoList() {
      getData({
        url: "/join/getInfoList",
        param: {},
        target: this,
        then: (data) => {
          this.bodyList = data.bodyList;
          this.smokeList = data.smokeList;
          this.drinkingList = data.drinkingList;
        }
      });
    },

    isSelectedBody(item) {
      return this.selectBodys.includes(item);
    },
    isSelectedSmoke(item) {
      return this.selectSmokes.includes(item);
    },
    isSelectedDrinking(item) {
      return this.selectDrinkings.includes(item);
    },

    toggleItem(state, item) {
      if (state === "body") {
        /** Ï≤¥Ìòï **/
        if (item.formNm === "ÎπÑÍ≥µÍ∞ú") {
          if (!this.isSelectedBody(item)) {
            if (
              this.selectBodys.some(
                (selectedItem) => selectedItem.formNm === "ÎπÑÍ≥µÍ∞ú"
              )
            ) {
              this.selectBodys.splice(
                this.selectBodys.findIndex(
                  (selectedItem) => selectedItem.formNm !== "ÎπÑÍ≥µÍ∞ú"
                ),
                1,
                item
              );
            } else {
              this.selectBodys.push(item);
            }
            this.selectBodys = this.selectBodys.filter(
              (selectedItem) => selectedItem.formNm === "ÎπÑÍ≥µÍ∞ú"
            );
          } else {
            this.selectBodys = this.selectBodys.filter(
              (selectedItem) => selectedItem.formNm !== "ÎπÑÍ≥µÍ∞ú"
            );
          }
        } else {
          if (this.isSelectedBody(item)) {
            this.selectBodys.splice(this.selectBodys.indexOf(item), 1);
          } else {
            if (
              !this.selectBodys.some(
                (selectedItem) => selectedItem.formNm === "ÎπÑÍ≥µÍ∞ú"
              )
            ) {
              if (this.selectBodys.length === 1) {
                this.selectBodys.splice(0, 1);
              }
              this.selectBodys.push(item);
            } else {
              this.selectBodys.splice(
                this.selectBodys.findIndex(
                  (selectedItem) => selectedItem.formNm !== "ÎπÑÍ≥µÍ∞ú"
                ),
                1,
                item
              );
            }
          }
        }
      } else if (state === "smoke") {
        /** Ìù°Ïó∞ **/
        if (this.isSelectedSmoke(item)) {
          this.selectSmokes.splice(this.selectSmokes.indexOf(item), 1);
        } else {
          if (this.selectSmokes.length > 0) {
            this.selectSmokes.splice(0, 1);
          }
          this.selectSmokes.push(item);
        }
      } else if (state === "drinking") {
        /** ÏùåÏ£º **/
        if (this.isSelectedDrinking(item)) {
          this.selectDrinkings.splice(this.selectDrinkings.indexOf(item), 1);
        } else {
          if (this.selectDrinkings.length > 0) {
            this.selectDrinkings.splice(0, 1);
          }
          this.selectDrinkings.push(item);
        }
      }
    },

    /** next btn **/
    isValidateAndNavigate() {
      if (this.isValidateForm) {
        this.goRouter();
      } else {
        if (this.selectSmokes.length === 0) {
          this.warningAlert("Ìù°Ïó∞Ïó¨Î∂ÄÎ•º ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
        } else if (this.selectDrinkings.length === 0) {
          this.warningAlert("ÏùåÏ£ºÏó¨Î∂ÄÎ•º ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
        } else if (this.selectedValue === 139) {
          this.warningAlert("ÌÇ§Î•º ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
        } else if (this.weightValue === 39) {
          this.warningAlert("Î™∏Î¨¥Í≤åÎ•º ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
        }

        // else if (this.selectBodys.length === 0) {
        //   this.warningAlert("Ï≤¥ÌòïÏùÑ ÏÑ†ÌÉùÌïòÏßÄ ÏïäÏïòÏäµÎãàÎã§.");
        // }
      }
    },

    /** title bar **/
    updateProgressBar() {
      const input = document.querySelector("ion-input");
      const progressBar = document.querySelector(".progress-bar");

      if (input.value.trim() !== "") {
        progressBar.style.width = "60%";
      } else {
        progressBar.style.width = "45%";
      }
    },

    /* Í≤ΩÍ≥† ÌåùÏóÖÏ∞Ω */
    async warningAlert(message) {
      const alert = await this.alertController.create({
        header: "",
        subHeader: "",
        message: message,
        buttons: ["OK"]
      });
      return alert.present();
    },
    async presentAlertConfirm() {
      const alert = await this.alertController.create({
        //cssClass: 'my-custom-class',
        header: "",
        message: "Ïù¥ ÌôîÎ©¥ÏóêÏÑú ÎÇòÍ∞ÄÎ©¥ ÏûÖÎ†•Ìïú ÎÇ¥Ïö©ÏùÄ Ï†ÄÏû•ÎêòÏßÄ ÏïäÏäµÎãàÎã§.",
        buttons: [
          {
            text: "Ï∑®ÏÜå",
            role: "cancel",
            cssClass: "secondary",
            handler: () => {
            }
          },
          {
            text: "ÎÇòÍ∞ÄÍ∏∞",
            handler: () => {
              this.$router.go(-1);
            }
          }
        ]
      });
      return alert.present();
    }
  }
};
</script>
