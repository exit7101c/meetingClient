{"version":3,"file":"js/3436-legacy.d9cf06fe.js","mappings":"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","sources":["webpack://navy/./node_modules/capacitor-data-storage-sqlite/dist/esm/web-utils/Data.js","webpack://navy/./node_modules/capacitor-data-storage-sqlite/dist/esm/web-utils/StorageDatabaseHelper.js","webpack://navy/./node_modules/capacitor-data-storage-sqlite/dist/esm/web-utils/json-utils.js","webpack://navy/./node_modules/capacitor-data-storage-sqlite/dist/esm/web.js","webpack://navy/./node_modules/localforage/dist/localforage.js"],"sourcesContent":["export class Data {\n}\n//# sourceMappingURL=Data.js.map","//import LocalForage from 'jeep-localforage';\nimport localForage from 'localforage';\nimport { Data } from './Data';\n//const DATABASE: string = \"storageIDB\";\n//const STORAGESTORE: string = \"storage_store\";\nexport class StorageDatabaseHelper {\n    constructor(dbName, tableName) {\n        this._db = null;\n        const res = this.openStore(dbName, tableName);\n        if (res) {\n            this._dbName = dbName;\n            this._tableName = tableName;\n        }\n        else {\n            this._dbName = '';\n            this._tableName = '';\n            throw new Error('openStore return false');\n        }\n    }\n    openStore(dbName, tableName) {\n        let ret = false;\n        const config = this.setConfig(dbName, tableName);\n        this._db = localForage.createInstance(config);\n        if (this._db != null) {\n            this._dbName = dbName;\n            ret = true;\n        }\n        return ret;\n    }\n    setConfig(dbName, tableName) {\n        const config = {\n            name: dbName,\n            storeName: tableName,\n            driver: [localForage.INDEXEDDB, localForage.WEBSQL],\n            version: 1,\n        };\n        return config;\n    }\n    async setTable(tableName) {\n        const res = this.openStore(this._dbName, tableName);\n        if (res) {\n            return Promise.resolve();\n        }\n        else {\n            return Promise.reject(new Error('openStore return false'));\n        }\n    }\n    async isTable(table) {\n        if (this._db == null) {\n            return Promise.reject(`isTable: this.db is null`);\n        }\n        try {\n            let ret = false;\n            const tables = await this.tables();\n            if (tables.includes(table))\n                ret = true;\n            return Promise.resolve(ret);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async tables() {\n        return new Promise((resolve, reject) => {\n            // Let us open our database\n            const DBOpenRequest = window.indexedDB.open(this._dbName);\n            // these two event handlers act on the database being opened successfully, or not\n            DBOpenRequest.onerror = () => {\n                return reject(`Error loading database ${this._dbName}`);\n            };\n            DBOpenRequest.onsuccess = () => {\n                let result = [];\n                const db = DBOpenRequest.result;\n                const retList = db.objectStoreNames;\n                const values = Object.values(retList);\n                for (const val of values) {\n                    if (val.substring(0, 12) != 'local-forage') {\n                        result = [...result, val];\n                    }\n                }\n                return resolve(result);\n            };\n        });\n    }\n    async set(data) {\n        try {\n            await this._db.setItem(data.name, data.value);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async get(name) {\n        try {\n            const value = await this._db.getItem(name);\n            const data = new Data();\n            data.name = name;\n            data.value = value;\n            return Promise.resolve(data);\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async remove(name) {\n        return this._db\n            .removeItem(name)\n            .then(() => {\n            return Promise.resolve();\n        })\n            .catch((error) => {\n            return Promise.reject(error);\n        });\n    }\n    async clear() {\n        return this._db\n            .clear()\n            .then(() => {\n            return Promise.resolve();\n        })\n            .catch((error) => {\n            return Promise.reject(error);\n        });\n    }\n    async keys() {\n        return this._db\n            .keys()\n            .then((keys) => {\n            return Promise.resolve(keys);\n        })\n            .catch((error) => {\n            return Promise.reject(error);\n        });\n    }\n    async values() {\n        const values = [];\n        return this._db\n            .iterate((value) => {\n            values.push(value);\n        })\n            .then(() => {\n            return Promise.resolve(values);\n        })\n            .catch((error) => {\n            return Promise.reject(error);\n        });\n    }\n    async keysvalues() {\n        const keysvalues = [];\n        return this._db\n            .iterate((value, key) => {\n            const data = new Data();\n            data.name = key;\n            data.value = value;\n            keysvalues.push(data);\n        })\n            .then(() => {\n            return Promise.resolve(keysvalues);\n        })\n            .catch((error) => {\n            return Promise.reject(error);\n        });\n    }\n    async iskey(name) {\n        return this.get(name)\n            .then((data) => {\n            if (data.value != null) {\n                return Promise.resolve(true);\n            }\n            else {\n                return Promise.resolve(false);\n            }\n        })\n            .catch((error) => {\n            return Promise.reject(error);\n        });\n    }\n    async importJson(values) {\n        let changes = 0;\n        for (const val of values) {\n            try {\n                const data = new Data();\n                data.name = val.key;\n                data.value = val.value;\n                await this.set(data);\n                changes += 1;\n            }\n            catch (err) {\n                return Promise.reject(err);\n            }\n        }\n        return Promise.resolve(changes);\n    }\n    async exportJson() {\n        const retJson = {};\n        const prevTableName = this._tableName;\n        try {\n            retJson.database = this._dbName.slice(0, -3);\n            retJson.encrypted = false;\n            retJson.tables = [];\n            // get the table list\n            const tables = await this.tables();\n            for (const table of tables) {\n                this._tableName = table;\n                const retTable = {};\n                retTable.name = table;\n                retTable.values = [];\n                const res = this.openStore(this._dbName, this._tableName);\n                if (res) {\n                    const dataTable = await this.keysvalues();\n                    for (const tdata of dataTable) {\n                        const retData = {};\n                        if (tdata.name != null) {\n                            retData.key = tdata.name;\n                            retData.value = tdata.value;\n                            retTable.values = [...retTable.values, retData];\n                        }\n                        else {\n                            return Promise.reject('Data.name is undefined');\n                        }\n                    }\n                    retJson.tables = [...retJson.tables, retTable];\n                }\n                else {\n                    const msg = `Could not open ${this._dbName} ${this._tableName} `;\n                    this._tableName = prevTableName;\n                    return Promise.reject(msg);\n                }\n            }\n            this._tableName = prevTableName;\n            const res = this.openStore(this._dbName, this._tableName);\n            if (res) {\n                return Promise.resolve(retJson);\n            }\n            else {\n                const msg = `Could not open ${this._dbName} ${this._tableName} `;\n                return Promise.reject(msg);\n            }\n        }\n        catch (err) {\n            this._tableName = prevTableName;\n            return Promise.reject(err);\n        }\n    }\n}\n//# sourceMappingURL=StorageDatabaseHelper.js.map","/**\n * IsJsonSQLite\n * @param obj\n */\nexport const isJsonStore = (obj) => {\n    const keyFirstLevel = ['database', 'encrypted', 'tables'];\n    if (obj == null || (Object.keys(obj).length === 0 && obj.constructor === Object))\n        return false;\n    for (const key of Object.keys(obj)) {\n        if (keyFirstLevel.indexOf(key) === -1)\n            return false;\n        if (key === 'database' && typeof obj[key] != 'string')\n            return false;\n        if (key === 'encrypted' && typeof obj[key] != 'boolean')\n            return false;\n        if (key === 'tables' && typeof obj[key] != 'object')\n            return false;\n        if (key === 'tables') {\n            for (const oKey of obj[key]) {\n                const retTable = isTable(oKey);\n                if (!retTable)\n                    return false;\n            }\n        }\n    }\n    return true;\n};\n/**\n * IsTable\n * @param obj\n */\nexport const isTable = (obj) => {\n    const keyTableLevel = ['name', 'values'];\n    if (obj == null || (Object.keys(obj).length === 0 && obj.constructor === Object)) {\n        return false;\n    }\n    for (const key of Object.keys(obj)) {\n        if (keyTableLevel.indexOf(key) === -1)\n            return false;\n        if (key === 'name' && typeof obj[key] != 'string')\n            return false;\n        if (key === 'values' && typeof obj[key] != 'object')\n            return false;\n        if (key === 'values') {\n            for (const oKey of obj[key]) {\n                const retValue = isValue(oKey);\n                if (!retValue)\n                    return false;\n            }\n        }\n    }\n    return true;\n};\n/**\n * IsValue\n * @param obj\n */\nexport const isValue = (obj) => {\n    const keyTableLevel = ['key', 'value'];\n    if (obj == null || (Object.keys(obj).length === 0 && obj.constructor === Object)) {\n        return false;\n    }\n    for (const key of Object.keys(obj)) {\n        if (keyTableLevel.indexOf(key) === -1)\n            return false;\n        if (key === 'key' && typeof obj[key] != 'string')\n            return false;\n        if (key === 'value' && typeof obj[key] != 'string')\n            return false;\n    }\n    return true;\n};\n//# sourceMappingURL=json-utils.js.map","import { WebPlugin } from '@capacitor/core';\nimport { Data } from './web-utils/Data';\nimport { StorageDatabaseHelper } from './web-utils/StorageDatabaseHelper';\nimport { isJsonStore } from './web-utils/json-utils';\nexport class CapacitorDataStorageSqliteWeb extends WebPlugin {\n    async echo(options) {\n        const ret = {};\n        ret.value = options.value ? options.value : '';\n        return ret;\n    }\n    async openStore(options) {\n        const dbName = options.database ? `${options.database}IDB` : 'storageIDB';\n        const tableName = options.table ? options.table : 'storage_store';\n        try {\n            this.mDb = new StorageDatabaseHelper(dbName, tableName);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(`OpenStore: ${err.message}`);\n        }\n    }\n    async closeStore(options) {\n        throw new Error(`Method closeStore not implemented. ${options}`);\n    }\n    async isStoreOpen(options) {\n        throw new Error(`Method isStoreOpen not implemented. ${options}`);\n    }\n    async isStoreExists(options) {\n        throw new Error(`Method isStoreExists not implemented. ${options}`);\n    }\n    async setTable(options) {\n        const tableName = options.table;\n        if (tableName == null) {\n            return Promise.reject('SetTable: Must provide a table name');\n        }\n        if (this.mDb) {\n            try {\n                await this.mDb.setTable(tableName);\n                return Promise.resolve();\n            }\n            catch (err) {\n                return Promise.reject(`SetTable: ${err.message}`);\n            }\n        }\n        else {\n            return Promise.reject('SetTable: Must open a store first');\n        }\n    }\n    async set(options) {\n        const key = options.key;\n        if (key == null || typeof key != 'string') {\n            return Promise.reject('Set: Must provide key as string');\n        }\n        const value = options.value ? options.value : null;\n        if (value == null || typeof value != 'string') {\n            return Promise.reject('Set: Must provide value as string');\n        }\n        const data = new Data();\n        data.name = key;\n        data.value = value;\n        try {\n            await this.mDb.set(data);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(`Set: ${err.message}`);\n        }\n    }\n    async get(options) {\n        const key = options.key;\n        if (key == null || typeof key != 'string') {\n            return Promise.reject('Get: Must provide key as string');\n        }\n        try {\n            const data = await this.mDb.get(key);\n            if ((data === null || data === void 0 ? void 0 : data.value) != null) {\n                return Promise.resolve({ value: data.value });\n            }\n            else {\n                return Promise.resolve({ value: '' });\n            }\n        }\n        catch (err) {\n            return Promise.reject(`Get: ${err.message}`);\n        }\n    }\n    async remove(options) {\n        const key = options.key;\n        if (key == null || typeof key != 'string') {\n            return Promise.reject('Remove: Must provide key as string');\n        }\n        try {\n            await this.mDb.remove(key);\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(`Remove: ${err.message}`);\n        }\n    }\n    async clear() {\n        try {\n            await this.mDb.clear();\n            return Promise.resolve();\n        }\n        catch (err) {\n            return Promise.reject(`Clear: ${err.message}`);\n        }\n    }\n    async iskey(options) {\n        const key = options.key;\n        if (key == null || typeof key != 'string') {\n            return Promise.reject('Iskey: Must provide key as string');\n        }\n        try {\n            const ret = await this.mDb.iskey(key);\n            return Promise.resolve({ result: ret });\n        }\n        catch (err) {\n            return Promise.reject(`Iskey: ${err.message}`);\n        }\n    }\n    async keys() {\n        try {\n            const ret = await this.mDb.keys();\n            return Promise.resolve({ keys: ret });\n        }\n        catch (err) {\n            return Promise.reject(`Keys: ${err.message}`);\n        }\n    }\n    async values() {\n        try {\n            const ret = await this.mDb.values();\n            return Promise.resolve({ values: ret });\n        }\n        catch (err) {\n            return Promise.reject(`Values: ${err.message}`);\n        }\n    }\n    async filtervalues(options) {\n        const filter = options.filter;\n        if (filter == null || typeof filter != 'string') {\n            return Promise.reject('Filtervalues: Must provide filter as string');\n        }\n        let regFilter;\n        if (filter.startsWith('%')) {\n            regFilter = new RegExp('^' + filter.substring(1), 'i');\n        }\n        else if (filter.endsWith('%')) {\n            regFilter = new RegExp(filter.slice(0, -1) + '$', 'i');\n        }\n        else {\n            regFilter = new RegExp(filter, 'i');\n        }\n        try {\n            const ret = [];\n            const results = await this.mDb.keysvalues();\n            for (const result of results) {\n                if (result.name != null && regFilter.test(result.name)) {\n                    if (result.value != null) {\n                        ret.push(result.value);\n                    }\n                    else {\n                        return Promise.reject(`Filtervalues: result.value is null`);\n                    }\n                }\n            }\n            return Promise.resolve({ values: ret });\n        }\n        catch (err) {\n            return Promise.reject(`Filtervalues: ${err.message}`);\n        }\n    }\n    async keysvalues() {\n        try {\n            const ret = [];\n            const results = await this.mDb.keysvalues();\n            for (const result of results) {\n                if (result.name != null && result.value != null) {\n                    const res = { key: result.name, value: result.value };\n                    ret.push(res);\n                }\n                else {\n                    return Promise.reject(`Keysvalues: result.name/value are null`);\n                }\n            }\n            return Promise.resolve({ keysvalues: ret });\n        }\n        catch (err) {\n            return Promise.reject(`Keysvalues: ${err.message}`);\n        }\n    }\n    async deleteStore(options) {\n        throw new Error(`Method deleteStore not implemented. ${options}`);\n    }\n    async isTable(options) {\n        const table = options.table;\n        if (table == null) {\n            return Promise.reject('Must provide a Table Name');\n        }\n        try {\n            const ret = await this.mDb.isTable(table);\n            return Promise.resolve({ result: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async tables() {\n        try {\n            const ret = await this.mDb.tables();\n            return Promise.resolve({ tables: ret });\n        }\n        catch (err) {\n            return Promise.reject(err);\n        }\n    }\n    async deleteTable(options) {\n        throw new Error(`Method deleteTable not implemented. ${options}`);\n    }\n    async importFromJson(options) {\n        const keys = Object.keys(options);\n        if (!keys.includes('jsonstring')) {\n            return Promise.reject('Must provide a json object');\n        }\n        let totalChanges = 0;\n        if (options === null || options === void 0 ? void 0 : options.jsonstring) {\n            const jsonStrObj = options.jsonstring;\n            const jsonObj = JSON.parse(jsonStrObj);\n            const isValid = isJsonStore(jsonObj);\n            if (!isValid) {\n                return Promise.reject('Must provide a valid JsonSQLite Object');\n            }\n            const vJsonObj = jsonObj;\n            const dbName = vJsonObj.database ? `${vJsonObj.database}IDB` : 'storageIDB';\n            for (const table of vJsonObj.tables) {\n                const tableName = table.name ? table.name : 'storage_store';\n                try {\n                    this.mDb = new StorageDatabaseHelper(dbName, tableName);\n                    // Open the database\n                    const bRet = this.mDb.openStore(dbName, tableName);\n                    if (bRet) {\n                        // Import the JsonSQLite Object\n                        if (table === null || table === void 0 ? void 0 : table.values) {\n                            const changes = await this.mDb.importJson(table.values);\n                            totalChanges += changes;\n                        }\n                    }\n                    else {\n                        return Promise.reject(`Open store: ${dbName} : table: ${tableName} failed`);\n                    }\n                }\n                catch (err) {\n                    return Promise.reject(`ImportFromJson: ${err.message}`);\n                }\n            }\n            return Promise.resolve({ changes: totalChanges });\n        }\n        else {\n            return Promise.reject('Must provide a json object');\n        }\n    }\n    async isJsonValid(options) {\n        const keys = Object.keys(options);\n        if (!keys.includes('jsonstring')) {\n            return Promise.reject('Must provide a json object');\n        }\n        if (options === null || options === void 0 ? void 0 : options.jsonstring) {\n            const jsonStrObj = options.jsonstring;\n            const jsonObj = JSON.parse(jsonStrObj);\n            const isValid = isJsonStore(jsonObj);\n            if (!isValid) {\n                return Promise.reject('Stringify Json Object not Valid');\n            }\n            else {\n                return Promise.resolve({ result: true });\n            }\n        }\n        else {\n            return Promise.reject('Must provide in options a stringify Json Object');\n        }\n    }\n    async exportToJson() {\n        try {\n            const ret = await this.mDb.exportJson();\n            return Promise.resolve({ export: ret });\n        }\n        catch (err) {\n            return Promise.reject(`exportToJson: ${err}`);\n        }\n    }\n}\n//# sourceMappingURL=web.js.map","/*!\n    localForage -- Offline Storage, Improved\n    Version 1.10.0\n    https://localforage.github.io/localForage\n    (c) 2013-2017 Mozilla, Apache License 2.0\n*/\n(function(f){if(typeof exports===\"object\"&&typeof module!==\"undefined\"){module.exports=f()}else if(typeof define===\"function\"&&define.amd){define([],f)}else{var g;if(typeof window!==\"undefined\"){g=window}else if(typeof global!==\"undefined\"){g=global}else if(typeof self!==\"undefined\"){g=self}else{g=this}g.localforage = f()}})(function(){var define,module,exports;return (function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require==\"function\"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error(\"Cannot find module '\"+o+\"'\");throw (f.code=\"MODULE_NOT_FOUND\", f)}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require==\"function\"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nvar Mutation = global.MutationObserver || global.WebKitMutationObserver;\n\nvar scheduleDrain;\n\n{\n  if (Mutation) {\n    var called = 0;\n    var observer = new Mutation(nextTick);\n    var element = global.document.createTextNode('');\n    observer.observe(element, {\n      characterData: true\n    });\n    scheduleDrain = function () {\n      element.data = (called = ++called % 2);\n    };\n  } else if (!global.setImmediate && typeof global.MessageChannel !== 'undefined') {\n    var channel = new global.MessageChannel();\n    channel.port1.onmessage = nextTick;\n    scheduleDrain = function () {\n      channel.port2.postMessage(0);\n    };\n  } else if ('document' in global && 'onreadystatechange' in global.document.createElement('script')) {\n    scheduleDrain = function () {\n\n      // Create a <script> element; its readystatechange event will be fired asynchronously once it is inserted\n      // into the document. Do so, thus queuing up the task. Remember to clean up once it's been called.\n      var scriptEl = global.document.createElement('script');\n      scriptEl.onreadystatechange = function () {\n        nextTick();\n\n        scriptEl.onreadystatechange = null;\n        scriptEl.parentNode.removeChild(scriptEl);\n        scriptEl = null;\n      };\n      global.document.documentElement.appendChild(scriptEl);\n    };\n  } else {\n    scheduleDrain = function () {\n      setTimeout(nextTick, 0);\n    };\n  }\n}\n\nvar draining;\nvar queue = [];\n//named nextTick for less confusing stack traces\nfunction nextTick() {\n  draining = true;\n  var i, oldQueue;\n  var len = queue.length;\n  while (len) {\n    oldQueue = queue;\n    queue = [];\n    i = -1;\n    while (++i < len) {\n      oldQueue[i]();\n    }\n    len = queue.length;\n  }\n  draining = false;\n}\n\nmodule.exports = immediate;\nfunction immediate(task) {\n  if (queue.push(task) === 1 && !draining) {\n    scheduleDrain();\n  }\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{}],2:[function(_dereq_,module,exports){\n'use strict';\nvar immediate = _dereq_(1);\n\n/* istanbul ignore next */\nfunction INTERNAL() {}\n\nvar handlers = {};\n\nvar REJECTED = ['REJECTED'];\nvar FULFILLED = ['FULFILLED'];\nvar PENDING = ['PENDING'];\n\nmodule.exports = Promise;\n\nfunction Promise(resolver) {\n  if (typeof resolver !== 'function') {\n    throw new TypeError('resolver must be a function');\n  }\n  this.state = PENDING;\n  this.queue = [];\n  this.outcome = void 0;\n  if (resolver !== INTERNAL) {\n    safelyResolveThenable(this, resolver);\n  }\n}\n\nPromise.prototype[\"catch\"] = function (onRejected) {\n  return this.then(null, onRejected);\n};\nPromise.prototype.then = function (onFulfilled, onRejected) {\n  if (typeof onFulfilled !== 'function' && this.state === FULFILLED ||\n    typeof onRejected !== 'function' && this.state === REJECTED) {\n    return this;\n  }\n  var promise = new this.constructor(INTERNAL);\n  if (this.state !== PENDING) {\n    var resolver = this.state === FULFILLED ? onFulfilled : onRejected;\n    unwrap(promise, resolver, this.outcome);\n  } else {\n    this.queue.push(new QueueItem(promise, onFulfilled, onRejected));\n  }\n\n  return promise;\n};\nfunction QueueItem(promise, onFulfilled, onRejected) {\n  this.promise = promise;\n  if (typeof onFulfilled === 'function') {\n    this.onFulfilled = onFulfilled;\n    this.callFulfilled = this.otherCallFulfilled;\n  }\n  if (typeof onRejected === 'function') {\n    this.onRejected = onRejected;\n    this.callRejected = this.otherCallRejected;\n  }\n}\nQueueItem.prototype.callFulfilled = function (value) {\n  handlers.resolve(this.promise, value);\n};\nQueueItem.prototype.otherCallFulfilled = function (value) {\n  unwrap(this.promise, this.onFulfilled, value);\n};\nQueueItem.prototype.callRejected = function (value) {\n  handlers.reject(this.promise, value);\n};\nQueueItem.prototype.otherCallRejected = function (value) {\n  unwrap(this.promise, this.onRejected, value);\n};\n\nfunction unwrap(promise, func, value) {\n  immediate(function () {\n    var returnValue;\n    try {\n      returnValue = func(value);\n    } catch (e) {\n      return handlers.reject(promise, e);\n    }\n    if (returnValue === promise) {\n      handlers.reject(promise, new TypeError('Cannot resolve promise with itself'));\n    } else {\n      handlers.resolve(promise, returnValue);\n    }\n  });\n}\n\nhandlers.resolve = function (self, value) {\n  var result = tryCatch(getThen, value);\n  if (result.status === 'error') {\n    return handlers.reject(self, result.value);\n  }\n  var thenable = result.value;\n\n  if (thenable) {\n    safelyResolveThenable(self, thenable);\n  } else {\n    self.state = FULFILLED;\n    self.outcome = value;\n    var i = -1;\n    var len = self.queue.length;\n    while (++i < len) {\n      self.queue[i].callFulfilled(value);\n    }\n  }\n  return self;\n};\nhandlers.reject = function (self, error) {\n  self.state = REJECTED;\n  self.outcome = error;\n  var i = -1;\n  var len = self.queue.length;\n  while (++i < len) {\n    self.queue[i].callRejected(error);\n  }\n  return self;\n};\n\nfunction getThen(obj) {\n  // Make sure we only access the accessor once as required by the spec\n  var then = obj && obj.then;\n  if (obj && (typeof obj === 'object' || typeof obj === 'function') && typeof then === 'function') {\n    return function appyThen() {\n      then.apply(obj, arguments);\n    };\n  }\n}\n\nfunction safelyResolveThenable(self, thenable) {\n  // Either fulfill, reject or reject with error\n  var called = false;\n  function onError(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.reject(self, value);\n  }\n\n  function onSuccess(value) {\n    if (called) {\n      return;\n    }\n    called = true;\n    handlers.resolve(self, value);\n  }\n\n  function tryToUnwrap() {\n    thenable(onSuccess, onError);\n  }\n\n  var result = tryCatch(tryToUnwrap);\n  if (result.status === 'error') {\n    onError(result.value);\n  }\n}\n\nfunction tryCatch(func, value) {\n  var out = {};\n  try {\n    out.value = func(value);\n    out.status = 'success';\n  } catch (e) {\n    out.status = 'error';\n    out.value = e;\n  }\n  return out;\n}\n\nPromise.resolve = resolve;\nfunction resolve(value) {\n  if (value instanceof this) {\n    return value;\n  }\n  return handlers.resolve(new this(INTERNAL), value);\n}\n\nPromise.reject = reject;\nfunction reject(reason) {\n  var promise = new this(INTERNAL);\n  return handlers.reject(promise, reason);\n}\n\nPromise.all = all;\nfunction all(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var values = new Array(len);\n  var resolved = 0;\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    allResolver(iterable[i], i);\n  }\n  return promise;\n  function allResolver(value, i) {\n    self.resolve(value).then(resolveFromAll, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n    function resolveFromAll(outValue) {\n      values[i] = outValue;\n      if (++resolved === len && !called) {\n        called = true;\n        handlers.resolve(promise, values);\n      }\n    }\n  }\n}\n\nPromise.race = race;\nfunction race(iterable) {\n  var self = this;\n  if (Object.prototype.toString.call(iterable) !== '[object Array]') {\n    return this.reject(new TypeError('must be an array'));\n  }\n\n  var len = iterable.length;\n  var called = false;\n  if (!len) {\n    return this.resolve([]);\n  }\n\n  var i = -1;\n  var promise = new this(INTERNAL);\n\n  while (++i < len) {\n    resolver(iterable[i]);\n  }\n  return promise;\n  function resolver(value) {\n    self.resolve(value).then(function (response) {\n      if (!called) {\n        called = true;\n        handlers.resolve(promise, response);\n      }\n    }, function (error) {\n      if (!called) {\n        called = true;\n        handlers.reject(promise, error);\n      }\n    });\n  }\n}\n\n},{\"1\":1}],3:[function(_dereq_,module,exports){\n(function (global){\n'use strict';\nif (typeof global.Promise !== 'function') {\n  global.Promise = _dereq_(2);\n}\n\n}).call(this,typeof global !== \"undefined\" ? global : typeof self !== \"undefined\" ? self : typeof window !== \"undefined\" ? window : {})\n},{\"2\":2}],4:[function(_dereq_,module,exports){\n'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction getIDB() {\n    /* global indexedDB,webkitIndexedDB,mozIndexedDB,OIndexedDB,msIndexedDB */\n    try {\n        if (typeof indexedDB !== 'undefined') {\n            return indexedDB;\n        }\n        if (typeof webkitIndexedDB !== 'undefined') {\n            return webkitIndexedDB;\n        }\n        if (typeof mozIndexedDB !== 'undefined') {\n            return mozIndexedDB;\n        }\n        if (typeof OIndexedDB !== 'undefined') {\n            return OIndexedDB;\n        }\n        if (typeof msIndexedDB !== 'undefined') {\n            return msIndexedDB;\n        }\n    } catch (e) {\n        return;\n    }\n}\n\nvar idb = getIDB();\n\nfunction isIndexedDBValid() {\n    try {\n        // Initialize IndexedDB; fall back to vendor-prefixed versions\n        // if needed.\n        if (!idb || !idb.open) {\n            return false;\n        }\n        // We mimic PouchDB here;\n        //\n        // We test for openDatabase because IE Mobile identifies itself\n        // as Safari. Oh the lulz...\n        var isSafari = typeof openDatabase !== 'undefined' && /(Safari|iPhone|iPad|iPod)/.test(navigator.userAgent) && !/Chrome/.test(navigator.userAgent) && !/BlackBerry/.test(navigator.platform);\n\n        var hasFetch = typeof fetch === 'function' && fetch.toString().indexOf('[native code') !== -1;\n\n        // Safari <10.1 does not meet our requirements for IDB support\n        // (see: https://github.com/pouchdb/pouchdb/issues/5572).\n        // Safari 10.1 shipped with fetch, we can use that to detect it.\n        // Note: this creates issues with `window.fetch` polyfills and\n        // overrides; see:\n        // https://github.com/localForage/localForage/issues/856\n        return (!isSafari || hasFetch) && typeof indexedDB !== 'undefined' &&\n        // some outdated implementations of IDB that appear on Samsung\n        // and HTC Android devices <4.4 are missing IDBKeyRange\n        // See: https://github.com/mozilla/localForage/issues/128\n        // See: https://github.com/mozilla/localForage/issues/272\n        typeof IDBKeyRange !== 'undefined';\n    } catch (e) {\n        return false;\n    }\n}\n\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\n// Abstracts constructing a Blob object, so it also works in older\n// browsers that don't support the native Blob constructor. (i.e.\n// old QtWebKit versions, at least).\nfunction createBlob(parts, properties) {\n    /* global BlobBuilder,MSBlobBuilder,MozBlobBuilder,WebKitBlobBuilder */\n    parts = parts || [];\n    properties = properties || {};\n    try {\n        return new Blob(parts, properties);\n    } catch (e) {\n        if (e.name !== 'TypeError') {\n            throw e;\n        }\n        var Builder = typeof BlobBuilder !== 'undefined' ? BlobBuilder : typeof MSBlobBuilder !== 'undefined' ? MSBlobBuilder : typeof MozBlobBuilder !== 'undefined' ? MozBlobBuilder : WebKitBlobBuilder;\n        var builder = new Builder();\n        for (var i = 0; i < parts.length; i += 1) {\n            builder.append(parts[i]);\n        }\n        return builder.getBlob(properties.type);\n    }\n}\n\n// This is CommonJS because lie is an external dependency, so Rollup\n// can just ignore it.\nif (typeof Promise === 'undefined') {\n    // In the \"nopromises\" build this will just throw if you don't have\n    // a global promise object, but it would throw anyway later.\n    _dereq_(3);\n}\nvar Promise$1 = Promise;\n\nfunction executeCallback(promise, callback) {\n    if (callback) {\n        promise.then(function (result) {\n            callback(null, result);\n        }, function (error) {\n            callback(error);\n        });\n    }\n}\n\nfunction executeTwoCallbacks(promise, callback, errorCallback) {\n    if (typeof callback === 'function') {\n        promise.then(callback);\n    }\n\n    if (typeof errorCallback === 'function') {\n        promise[\"catch\"](errorCallback);\n    }\n}\n\nfunction normalizeKey(key) {\n    // Cast the key to a string, as that's all we can set as a key.\n    if (typeof key !== 'string') {\n        console.warn(key + ' used as a key, but it is not a string.');\n        key = String(key);\n    }\n\n    return key;\n}\n\nfunction getCallback() {\n    if (arguments.length && typeof arguments[arguments.length - 1] === 'function') {\n        return arguments[arguments.length - 1];\n    }\n}\n\n// Some code originally from async_storage.js in\n// [Gaia](https://github.com/mozilla-b2g/gaia).\n\nvar DETECT_BLOB_SUPPORT_STORE = 'local-forage-detect-blob-support';\nvar supportsBlobs = void 0;\nvar dbContexts = {};\nvar toString = Object.prototype.toString;\n\n// Transaction Modes\nvar READ_ONLY = 'readonly';\nvar READ_WRITE = 'readwrite';\n\n// Transform a binary string to an array buffer, because otherwise\n// weird stuff happens when you try to work with the binary string directly.\n// It is known.\n// From http://stackoverflow.com/questions/14967647/ (continues on next line)\n// encode-decode-image-with-base64-breaks-image (2013-04-21)\nfunction _binStringToArrayBuffer(bin) {\n    var length = bin.length;\n    var buf = new ArrayBuffer(length);\n    var arr = new Uint8Array(buf);\n    for (var i = 0; i < length; i++) {\n        arr[i] = bin.charCodeAt(i);\n    }\n    return buf;\n}\n\n//\n// Blobs are not supported in all versions of IndexedDB, notably\n// Chrome <37 and Android <5. In those versions, storing a blob will throw.\n//\n// Various other blob bugs exist in Chrome v37-42 (inclusive).\n// Detecting them is expensive and confusing to users, and Chrome 37-42\n// is at very low usage worldwide, so we do a hacky userAgent check instead.\n//\n// content-type bug: https://code.google.com/p/chromium/issues/detail?id=408120\n// 404 bug: https://code.google.com/p/chromium/issues/detail?id=447916\n// FileReader bug: https://code.google.com/p/chromium/issues/detail?id=447836\n//\n// Code borrowed from PouchDB. See:\n// https://github.com/pouchdb/pouchdb/blob/master/packages/node_modules/pouchdb-adapter-idb/src/blobSupport.js\n//\nfunction _checkBlobSupportWithoutCaching(idb) {\n    return new Promise$1(function (resolve) {\n        var txn = idb.transaction(DETECT_BLOB_SUPPORT_STORE, READ_WRITE);\n        var blob = createBlob(['']);\n        txn.objectStore(DETECT_BLOB_SUPPORT_STORE).put(blob, 'key');\n\n        txn.onabort = function (e) {\n            // If the transaction aborts now its due to not being able to\n            // write to the database, likely due to the disk being full\n            e.preventDefault();\n            e.stopPropagation();\n            resolve(false);\n        };\n\n        txn.oncomplete = function () {\n            var matchedChrome = navigator.userAgent.match(/Chrome\\/(\\d+)/);\n            var matchedEdge = navigator.userAgent.match(/Edge\\//);\n            // MS Edge pretends to be Chrome 42:\n            // https://msdn.microsoft.com/en-us/library/hh869301%28v=vs.85%29.aspx\n            resolve(matchedEdge || !matchedChrome || parseInt(matchedChrome[1], 10) >= 43);\n        };\n    })[\"catch\"](function () {\n        return false; // error, so assume unsupported\n    });\n}\n\nfunction _checkBlobSupport(idb) {\n    if (typeof supportsBlobs === 'boolean') {\n        return Promise$1.resolve(supportsBlobs);\n    }\n    return _checkBlobSupportWithoutCaching(idb).then(function (value) {\n        supportsBlobs = value;\n        return supportsBlobs;\n    });\n}\n\nfunction _deferReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Create a deferred object representing the current database operation.\n    var deferredOperation = {};\n\n    deferredOperation.promise = new Promise$1(function (resolve, reject) {\n        deferredOperation.resolve = resolve;\n        deferredOperation.reject = reject;\n    });\n\n    // Enqueue the deferred operation.\n    dbContext.deferredOperations.push(deferredOperation);\n\n    // Chain its promise to the database readiness.\n    if (!dbContext.dbReady) {\n        dbContext.dbReady = deferredOperation.promise;\n    } else {\n        dbContext.dbReady = dbContext.dbReady.then(function () {\n            return deferredOperation.promise;\n        });\n    }\n}\n\nfunction _advanceReadiness(dbInfo) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Resolve its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.resolve();\n        return deferredOperation.promise;\n    }\n}\n\nfunction _rejectReadiness(dbInfo, err) {\n    var dbContext = dbContexts[dbInfo.name];\n\n    // Dequeue a deferred operation.\n    var deferredOperation = dbContext.deferredOperations.pop();\n\n    // Reject its promise (which is part of the database readiness\n    // chain of promises).\n    if (deferredOperation) {\n        deferredOperation.reject(err);\n        return deferredOperation.promise;\n    }\n}\n\nfunction _getConnection(dbInfo, upgradeNeeded) {\n    return new Promise$1(function (resolve, reject) {\n        dbContexts[dbInfo.name] = dbContexts[dbInfo.name] || createDbContext();\n\n        if (dbInfo.db) {\n            if (upgradeNeeded) {\n                _deferReadiness(dbInfo);\n                dbInfo.db.close();\n            } else {\n                return resolve(dbInfo.db);\n            }\n        }\n\n        var dbArgs = [dbInfo.name];\n\n        if (upgradeNeeded) {\n            dbArgs.push(dbInfo.version);\n        }\n\n        var openreq = idb.open.apply(idb, dbArgs);\n\n        if (upgradeNeeded) {\n            openreq.onupgradeneeded = function (e) {\n                var db = openreq.result;\n                try {\n                    db.createObjectStore(dbInfo.storeName);\n                    if (e.oldVersion <= 1) {\n                        // Added when support for blob shims was added\n                        db.createObjectStore(DETECT_BLOB_SUPPORT_STORE);\n                    }\n                } catch (ex) {\n                    if (ex.name === 'ConstraintError') {\n                        console.warn('The database \"' + dbInfo.name + '\"' + ' has been upgraded from version ' + e.oldVersion + ' to version ' + e.newVersion + ', but the storage \"' + dbInfo.storeName + '\" already exists.');\n                    } else {\n                        throw ex;\n                    }\n                }\n            };\n        }\n\n        openreq.onerror = function (e) {\n            e.preventDefault();\n            reject(openreq.error);\n        };\n\n        openreq.onsuccess = function () {\n            var db = openreq.result;\n            db.onversionchange = function (e) {\n                // Triggered when the database is modified (e.g. adding an objectStore) or\n                // deleted (even when initiated by other sessions in different tabs).\n                // Closing the connection here prevents those operations from being blocked.\n                // If the database is accessed again later by this instance, the connection\n                // will be reopened or the database recreated as needed.\n                e.target.close();\n            };\n            resolve(db);\n            _advanceReadiness(dbInfo);\n        };\n    });\n}\n\nfunction _getOriginalConnection(dbInfo) {\n    return _getConnection(dbInfo, false);\n}\n\nfunction _getUpgradedConnection(dbInfo) {\n    return _getConnection(dbInfo, true);\n}\n\nfunction _isUpgradeNeeded(dbInfo, defaultVersion) {\n    if (!dbInfo.db) {\n        return true;\n    }\n\n    var isNewStore = !dbInfo.db.objectStoreNames.contains(dbInfo.storeName);\n    var isDowngrade = dbInfo.version < dbInfo.db.version;\n    var isUpgrade = dbInfo.version > dbInfo.db.version;\n\n    if (isDowngrade) {\n        // If the version is not the default one\n        // then warn for impossible downgrade.\n        if (dbInfo.version !== defaultVersion) {\n            console.warn('The database \"' + dbInfo.name + '\"' + \" can't be downgraded from version \" + dbInfo.db.version + ' to version ' + dbInfo.version + '.');\n        }\n        // Align the versions to prevent errors.\n        dbInfo.version = dbInfo.db.version;\n    }\n\n    if (isUpgrade || isNewStore) {\n        // If the store is new then increment the version (if needed).\n        // This will trigger an \"upgradeneeded\" event which is required\n        // for creating a store.\n        if (isNewStore) {\n            var incVersion = dbInfo.db.version + 1;\n            if (incVersion > dbInfo.version) {\n                dbInfo.version = incVersion;\n            }\n        }\n\n        return true;\n    }\n\n    return false;\n}\n\n// encode a blob for indexeddb engines that don't support blobs\nfunction _encodeBlob(blob) {\n    return new Promise$1(function (resolve, reject) {\n        var reader = new FileReader();\n        reader.onerror = reject;\n        reader.onloadend = function (e) {\n            var base64 = btoa(e.target.result || '');\n            resolve({\n                __local_forage_encoded_blob: true,\n                data: base64,\n                type: blob.type\n            });\n        };\n        reader.readAsBinaryString(blob);\n    });\n}\n\n// decode an encoded blob\nfunction _decodeBlob(encodedBlob) {\n    var arrayBuff = _binStringToArrayBuffer(atob(encodedBlob.data));\n    return createBlob([arrayBuff], { type: encodedBlob.type });\n}\n\n// is this one of our fancy encoded blobs?\nfunction _isEncodedBlob(value) {\n    return value && value.__local_forage_encoded_blob;\n}\n\n// Specialize the default `ready()` function by making it dependent\n// on the current database operations. Thus, the driver will be actually\n// ready when it's been initialized (default) *and* there are no pending\n// operations on the database (initiated by some other instances).\nfunction _fullyReady(callback) {\n    var self = this;\n\n    var promise = self._initReady().then(function () {\n        var dbContext = dbContexts[self._dbInfo.name];\n\n        if (dbContext && dbContext.dbReady) {\n            return dbContext.dbReady;\n        }\n    });\n\n    executeTwoCallbacks(promise, callback, callback);\n    return promise;\n}\n\n// Try to establish a new db connection to replace the\n// current one which is broken (i.e. experiencing\n// InvalidStateError while creating a transaction).\nfunction _tryReconnect(dbInfo) {\n    _deferReadiness(dbInfo);\n\n    var dbContext = dbContexts[dbInfo.name];\n    var forages = dbContext.forages;\n\n    for (var i = 0; i < forages.length; i++) {\n        var forage = forages[i];\n        if (forage._dbInfo.db) {\n            forage._dbInfo.db.close();\n            forage._dbInfo.db = null;\n        }\n    }\n    dbInfo.db = null;\n\n    return _getOriginalConnection(dbInfo).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        // store the latest db reference\n        // in case the db was upgraded\n        dbInfo.db = dbContext.db = db;\n        for (var i = 0; i < forages.length; i++) {\n            forages[i]._dbInfo.db = db;\n        }\n    })[\"catch\"](function (err) {\n        _rejectReadiness(dbInfo, err);\n        throw err;\n    });\n}\n\n// FF doesn't like Promises (micro-tasks) and IDDB store operations,\n// so we have to do it with callbacks\nfunction createTransaction(dbInfo, mode, callback, retries) {\n    if (retries === undefined) {\n        retries = 1;\n    }\n\n    try {\n        var tx = dbInfo.db.transaction(dbInfo.storeName, mode);\n        callback(null, tx);\n    } catch (err) {\n        if (retries > 0 && (!dbInfo.db || err.name === 'InvalidStateError' || err.name === 'NotFoundError')) {\n            return Promise$1.resolve().then(function () {\n                if (!dbInfo.db || err.name === 'NotFoundError' && !dbInfo.db.objectStoreNames.contains(dbInfo.storeName) && dbInfo.version <= dbInfo.db.version) {\n                    // increase the db version, to create the new ObjectStore\n                    if (dbInfo.db) {\n                        dbInfo.version = dbInfo.db.version + 1;\n                    }\n                    // Reopen the database for upgrading.\n                    return _getUpgradedConnection(dbInfo);\n                }\n            }).then(function () {\n                return _tryReconnect(dbInfo).then(function () {\n                    createTransaction(dbInfo, mode, callback, retries - 1);\n                });\n            })[\"catch\"](callback);\n        }\n\n        callback(err);\n    }\n}\n\nfunction createDbContext() {\n    return {\n        // Running localForages sharing a database.\n        forages: [],\n        // Shared database.\n        db: null,\n        // Database readiness (promise).\n        dbReady: null,\n        // Deferred operations on the database.\n        deferredOperations: []\n    };\n}\n\n// Open the IndexedDB database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    // Get the current context of the database;\n    var dbContext = dbContexts[dbInfo.name];\n\n    // ...or create a new context.\n    if (!dbContext) {\n        dbContext = createDbContext();\n        // Register the new context in the global container.\n        dbContexts[dbInfo.name] = dbContext;\n    }\n\n    // Register itself as a running localForage in the current context.\n    dbContext.forages.push(self);\n\n    // Replace the default `ready()` function with the specialized one.\n    if (!self._initReady) {\n        self._initReady = self.ready;\n        self.ready = _fullyReady;\n    }\n\n    // Create an array of initialization states of the related localForages.\n    var initPromises = [];\n\n    function ignoreErrors() {\n        // Don't handle errors here,\n        // just makes sure related localForages aren't pending.\n        return Promise$1.resolve();\n    }\n\n    for (var j = 0; j < dbContext.forages.length; j++) {\n        var forage = dbContext.forages[j];\n        if (forage !== self) {\n            // Don't wait for itself...\n            initPromises.push(forage._initReady()[\"catch\"](ignoreErrors));\n        }\n    }\n\n    // Take a snapshot of the related localForages.\n    var forages = dbContext.forages.slice(0);\n\n    // Initialize the connection process only when\n    // all the related localForages aren't pending.\n    return Promise$1.all(initPromises).then(function () {\n        dbInfo.db = dbContext.db;\n        // Get the connection or open a new one without upgrade.\n        return _getOriginalConnection(dbInfo);\n    }).then(function (db) {\n        dbInfo.db = db;\n        if (_isUpgradeNeeded(dbInfo, self._defaultConfig.version)) {\n            // Reopen the database for upgrading.\n            return _getUpgradedConnection(dbInfo);\n        }\n        return db;\n    }).then(function (db) {\n        dbInfo.db = dbContext.db = db;\n        self._dbInfo = dbInfo;\n        // Share the final connection amongst related localForages.\n        for (var k = 0; k < forages.length; k++) {\n            var forage = forages[k];\n            if (forage !== self) {\n                // Self is already up-to-date.\n                forage._dbInfo.db = dbInfo.db;\n                forage._dbInfo.version = dbInfo.version;\n            }\n        }\n    });\n}\n\nfunction getItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.get(key);\n\n                    req.onsuccess = function () {\n                        var value = req.result;\n                        if (value === undefined) {\n                            value = null;\n                        }\n                        if (_isEncodedBlob(value)) {\n                            value = _decodeBlob(value);\n                        }\n                        resolve(value);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items stored in database.\nfunction iterate(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openCursor();\n                    var iterationNumber = 1;\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (cursor) {\n                            var value = cursor.value;\n                            if (_isEncodedBlob(value)) {\n                                value = _decodeBlob(value);\n                            }\n                            var result = iterator(value, cursor.key, iterationNumber++);\n\n                            // when the iterator callback returns any\n                            // (non-`undefined`) value, then we stop\n                            // the iteration immediately\n                            if (result !== void 0) {\n                                resolve(result);\n                            } else {\n                                cursor[\"continue\"]();\n                            }\n                        } else {\n                            resolve();\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n\n    return promise;\n}\n\nfunction setItem(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        var dbInfo;\n        self.ready().then(function () {\n            dbInfo = self._dbInfo;\n            if (toString.call(value) === '[object Blob]') {\n                return _checkBlobSupport(dbInfo.db).then(function (blobSupport) {\n                    if (blobSupport) {\n                        return value;\n                    }\n                    return _encodeBlob(value);\n                });\n            }\n            return value;\n        }).then(function (value) {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n\n                    // The reason we don't _save_ null is because IE 10 does\n                    // not support saving the `null` type in IndexedDB. How\n                    // ironic, given the bug below!\n                    // See: https://github.com/mozilla/localForage/issues/161\n                    if (value === null) {\n                        value = undefined;\n                    }\n\n                    var req = store.put(value, key);\n\n                    transaction.oncomplete = function () {\n                        // Cast to undefined so the value passed to\n                        // callback/promise is the same as what one would get out\n                        // of `getItem()` later. This leads to some weirdness\n                        // (setItem('foo', undefined) will return `null`), but\n                        // it's not my fault localStorage is our baseline and that\n                        // it's weird.\n                        if (value === undefined) {\n                            value = null;\n                        }\n\n                        resolve(value);\n                    };\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction removeItem(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    // We use a Grunt task to make this safe for IE and some\n                    // versions of Android (including those used by Cordova).\n                    // Normally IE won't like `.delete()` and will insist on\n                    // using `['delete']()`, but we have a build step that\n                    // fixes this for us now.\n                    var req = store[\"delete\"](key);\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onerror = function () {\n                        reject(req.error);\n                    };\n\n                    // The request will be also be aborted if we've exceeded our storage\n                    // space.\n                    transaction.onabort = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction clear(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_WRITE, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.clear();\n\n                    transaction.oncomplete = function () {\n                        resolve();\n                    };\n\n                    transaction.onabort = transaction.onerror = function () {\n                        var err = req.error ? req.error : req.transaction.error;\n                        reject(err);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction length(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.count();\n\n                    req.onsuccess = function () {\n                        resolve(req.result);\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction key(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        if (n < 0) {\n            resolve(null);\n\n            return;\n        }\n\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var advanced = false;\n                    var req = store.openKeyCursor();\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n                        if (!cursor) {\n                            // this means there weren't enough keys\n                            resolve(null);\n\n                            return;\n                        }\n\n                        if (n === 0) {\n                            // We have the first key, return it if that's what they\n                            // wanted.\n                            resolve(cursor.key);\n                        } else {\n                            if (!advanced) {\n                                // Otherwise, ask the cursor to skip ahead n\n                                // records.\n                                advanced = true;\n                                cursor.advance(n);\n                            } else {\n                                // When we get here, we've got the nth key.\n                                resolve(cursor.key);\n                            }\n                        }\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            createTransaction(self._dbInfo, READ_ONLY, function (err, transaction) {\n                if (err) {\n                    return reject(err);\n                }\n\n                try {\n                    var store = transaction.objectStore(self._dbInfo.storeName);\n                    var req = store.openKeyCursor();\n                    var keys = [];\n\n                    req.onsuccess = function () {\n                        var cursor = req.result;\n\n                        if (!cursor) {\n                            resolve(keys);\n                            return;\n                        }\n\n                        keys.push(cursor.key);\n                        cursor[\"continue\"]();\n                    };\n\n                    req.onerror = function () {\n                        reject(req.error);\n                    };\n                } catch (e) {\n                    reject(e);\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        var isCurrentDb = options.name === currentConfig.name && self._dbInfo.db;\n\n        var dbPromise = isCurrentDb ? Promise$1.resolve(self._dbInfo.db) : _getOriginalConnection(options).then(function (db) {\n            var dbContext = dbContexts[options.name];\n            var forages = dbContext.forages;\n            dbContext.db = db;\n            for (var i = 0; i < forages.length; i++) {\n                forages[i]._dbInfo.db = db;\n            }\n            return db;\n        });\n\n        if (!options.storeName) {\n            promise = dbPromise.then(function (db) {\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                }\n\n                var dropDBPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.deleteDatabase(options.name);\n\n                    req.onerror = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        reject(req.error);\n                    };\n\n                    req.onblocked = function () {\n                        // Closing all open connections in onversionchange handler should prevent this situation, but if\n                        // we do get here, it just means the request remains pending - eventually it will succeed or error\n                        console.warn('dropInstance blocked for database \"' + options.name + '\" until all open connections are closed');\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        if (db) {\n                            db.close();\n                        }\n                        resolve(db);\n                    };\n                });\n\n                return dropDBPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var i = 0; i < forages.length; i++) {\n                        var _forage = forages[i];\n                        _advanceReadiness(_forage._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        } else {\n            promise = dbPromise.then(function (db) {\n                if (!db.objectStoreNames.contains(options.storeName)) {\n                    return;\n                }\n\n                var newVersion = db.version + 1;\n\n                _deferReadiness(options);\n\n                var dbContext = dbContexts[options.name];\n                var forages = dbContext.forages;\n\n                db.close();\n                for (var i = 0; i < forages.length; i++) {\n                    var forage = forages[i];\n                    forage._dbInfo.db = null;\n                    forage._dbInfo.version = newVersion;\n                }\n\n                var dropObjectPromise = new Promise$1(function (resolve, reject) {\n                    var req = idb.open(options.name, newVersion);\n\n                    req.onerror = function (err) {\n                        var db = req.result;\n                        db.close();\n                        reject(err);\n                    };\n\n                    req.onupgradeneeded = function () {\n                        var db = req.result;\n                        db.deleteObjectStore(options.storeName);\n                    };\n\n                    req.onsuccess = function () {\n                        var db = req.result;\n                        db.close();\n                        resolve(db);\n                    };\n                });\n\n                return dropObjectPromise.then(function (db) {\n                    dbContext.db = db;\n                    for (var j = 0; j < forages.length; j++) {\n                        var _forage2 = forages[j];\n                        _forage2._dbInfo.db = db;\n                        _advanceReadiness(_forage2._dbInfo);\n                    }\n                })[\"catch\"](function (err) {\n                    (_rejectReadiness(options, err) || Promise$1.resolve())[\"catch\"](function () {});\n                    throw err;\n                });\n            });\n        }\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar asyncStorage = {\n    _driver: 'asyncStorage',\n    _initStorage: _initStorage,\n    _support: isIndexedDBValid(),\n    iterate: iterate,\n    getItem: getItem,\n    setItem: setItem,\n    removeItem: removeItem,\n    clear: clear,\n    length: length,\n    key: key,\n    keys: keys,\n    dropInstance: dropInstance\n};\n\nfunction isWebSQLValid() {\n    return typeof openDatabase === 'function';\n}\n\n// Sadly, the best way to save binary data in WebSQL/localStorage is serializing\n// it to Base64, so this is how we store it to prevent very strange errors with less\n// verbose ways of binary <-> string data storage.\nvar BASE_CHARS = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';\n\nvar BLOB_TYPE_PREFIX = '~~local_forage_type~';\nvar BLOB_TYPE_PREFIX_REGEX = /^~~local_forage_type~([^~]+)~/;\n\nvar SERIALIZED_MARKER = '__lfsc__:';\nvar SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER.length;\n\n// OMG the serializations!\nvar TYPE_ARRAYBUFFER = 'arbf';\nvar TYPE_BLOB = 'blob';\nvar TYPE_INT8ARRAY = 'si08';\nvar TYPE_UINT8ARRAY = 'ui08';\nvar TYPE_UINT8CLAMPEDARRAY = 'uic8';\nvar TYPE_INT16ARRAY = 'si16';\nvar TYPE_INT32ARRAY = 'si32';\nvar TYPE_UINT16ARRAY = 'ur16';\nvar TYPE_UINT32ARRAY = 'ui32';\nvar TYPE_FLOAT32ARRAY = 'fl32';\nvar TYPE_FLOAT64ARRAY = 'fl64';\nvar TYPE_SERIALIZED_MARKER_LENGTH = SERIALIZED_MARKER_LENGTH + TYPE_ARRAYBUFFER.length;\n\nvar toString$1 = Object.prototype.toString;\n\nfunction stringToBuffer(serializedString) {\n    // Fill the string into a ArrayBuffer.\n    var bufferLength = serializedString.length * 0.75;\n    var len = serializedString.length;\n    var i;\n    var p = 0;\n    var encoded1, encoded2, encoded3, encoded4;\n\n    if (serializedString[serializedString.length - 1] === '=') {\n        bufferLength--;\n        if (serializedString[serializedString.length - 2] === '=') {\n            bufferLength--;\n        }\n    }\n\n    var buffer = new ArrayBuffer(bufferLength);\n    var bytes = new Uint8Array(buffer);\n\n    for (i = 0; i < len; i += 4) {\n        encoded1 = BASE_CHARS.indexOf(serializedString[i]);\n        encoded2 = BASE_CHARS.indexOf(serializedString[i + 1]);\n        encoded3 = BASE_CHARS.indexOf(serializedString[i + 2]);\n        encoded4 = BASE_CHARS.indexOf(serializedString[i + 3]);\n\n        /*jslint bitwise: true */\n        bytes[p++] = encoded1 << 2 | encoded2 >> 4;\n        bytes[p++] = (encoded2 & 15) << 4 | encoded3 >> 2;\n        bytes[p++] = (encoded3 & 3) << 6 | encoded4 & 63;\n    }\n    return buffer;\n}\n\n// Converts a buffer to a string to store, serialized, in the backend\n// storage library.\nfunction bufferToString(buffer) {\n    // base64-arraybuffer\n    var bytes = new Uint8Array(buffer);\n    var base64String = '';\n    var i;\n\n    for (i = 0; i < bytes.length; i += 3) {\n        /*jslint bitwise: true */\n        base64String += BASE_CHARS[bytes[i] >> 2];\n        base64String += BASE_CHARS[(bytes[i] & 3) << 4 | bytes[i + 1] >> 4];\n        base64String += BASE_CHARS[(bytes[i + 1] & 15) << 2 | bytes[i + 2] >> 6];\n        base64String += BASE_CHARS[bytes[i + 2] & 63];\n    }\n\n    if (bytes.length % 3 === 2) {\n        base64String = base64String.substring(0, base64String.length - 1) + '=';\n    } else if (bytes.length % 3 === 1) {\n        base64String = base64String.substring(0, base64String.length - 2) + '==';\n    }\n\n    return base64String;\n}\n\n// Serialize a value, afterwards executing a callback (which usually\n// instructs the `setItem()` callback/promise to be executed). This is how\n// we store binary data with localStorage.\nfunction serialize(value, callback) {\n    var valueType = '';\n    if (value) {\n        valueType = toString$1.call(value);\n    }\n\n    // Cannot use `value instanceof ArrayBuffer` or such here, as these\n    // checks fail when running the tests using casper.js...\n    //\n    // TODO: See why those tests fail and use a better solution.\n    if (value && (valueType === '[object ArrayBuffer]' || value.buffer && toString$1.call(value.buffer) === '[object ArrayBuffer]')) {\n        // Convert binary arrays to a string and prefix the string with\n        // a special marker.\n        var buffer;\n        var marker = SERIALIZED_MARKER;\n\n        if (value instanceof ArrayBuffer) {\n            buffer = value;\n            marker += TYPE_ARRAYBUFFER;\n        } else {\n            buffer = value.buffer;\n\n            if (valueType === '[object Int8Array]') {\n                marker += TYPE_INT8ARRAY;\n            } else if (valueType === '[object Uint8Array]') {\n                marker += TYPE_UINT8ARRAY;\n            } else if (valueType === '[object Uint8ClampedArray]') {\n                marker += TYPE_UINT8CLAMPEDARRAY;\n            } else if (valueType === '[object Int16Array]') {\n                marker += TYPE_INT16ARRAY;\n            } else if (valueType === '[object Uint16Array]') {\n                marker += TYPE_UINT16ARRAY;\n            } else if (valueType === '[object Int32Array]') {\n                marker += TYPE_INT32ARRAY;\n            } else if (valueType === '[object Uint32Array]') {\n                marker += TYPE_UINT32ARRAY;\n            } else if (valueType === '[object Float32Array]') {\n                marker += TYPE_FLOAT32ARRAY;\n            } else if (valueType === '[object Float64Array]') {\n                marker += TYPE_FLOAT64ARRAY;\n            } else {\n                callback(new Error('Failed to get type for BinaryArray'));\n            }\n        }\n\n        callback(marker + bufferToString(buffer));\n    } else if (valueType === '[object Blob]') {\n        // Conver the blob to a binaryArray and then to a string.\n        var fileReader = new FileReader();\n\n        fileReader.onload = function () {\n            // Backwards-compatible prefix for the blob type.\n            var str = BLOB_TYPE_PREFIX + value.type + '~' + bufferToString(this.result);\n\n            callback(SERIALIZED_MARKER + TYPE_BLOB + str);\n        };\n\n        fileReader.readAsArrayBuffer(value);\n    } else {\n        try {\n            callback(JSON.stringify(value));\n        } catch (e) {\n            console.error(\"Couldn't convert value into a JSON string: \", value);\n\n            callback(null, e);\n        }\n    }\n}\n\n// Deserialize data we've inserted into a value column/field. We place\n// special markers into our strings to mark them as encoded; this isn't\n// as nice as a meta field, but it's the only sane thing we can do whilst\n// keeping localStorage support intact.\n//\n// Oftentimes this will just deserialize JSON content, but if we have a\n// special marker (SERIALIZED_MARKER, defined above), we will extract\n// some kind of arraybuffer/binary data/typed array out of the string.\nfunction deserialize(value) {\n    // If we haven't marked this string as being specially serialized (i.e.\n    // something other than serialized JSON), we can just return it and be\n    // done with it.\n    if (value.substring(0, SERIALIZED_MARKER_LENGTH) !== SERIALIZED_MARKER) {\n        return JSON.parse(value);\n    }\n\n    // The following code deals with deserializing some kind of Blob or\n    // TypedArray. First we separate out the type of data we're dealing\n    // with from the data itself.\n    var serializedString = value.substring(TYPE_SERIALIZED_MARKER_LENGTH);\n    var type = value.substring(SERIALIZED_MARKER_LENGTH, TYPE_SERIALIZED_MARKER_LENGTH);\n\n    var blobType;\n    // Backwards-compatible blob type serialization strategy.\n    // DBs created with older versions of localForage will simply not have the blob type.\n    if (type === TYPE_BLOB && BLOB_TYPE_PREFIX_REGEX.test(serializedString)) {\n        var matcher = serializedString.match(BLOB_TYPE_PREFIX_REGEX);\n        blobType = matcher[1];\n        serializedString = serializedString.substring(matcher[0].length);\n    }\n    var buffer = stringToBuffer(serializedString);\n\n    // Return the right type based on the code/type set during\n    // serialization.\n    switch (type) {\n        case TYPE_ARRAYBUFFER:\n            return buffer;\n        case TYPE_BLOB:\n            return createBlob([buffer], { type: blobType });\n        case TYPE_INT8ARRAY:\n            return new Int8Array(buffer);\n        case TYPE_UINT8ARRAY:\n            return new Uint8Array(buffer);\n        case TYPE_UINT8CLAMPEDARRAY:\n            return new Uint8ClampedArray(buffer);\n        case TYPE_INT16ARRAY:\n            return new Int16Array(buffer);\n        case TYPE_UINT16ARRAY:\n            return new Uint16Array(buffer);\n        case TYPE_INT32ARRAY:\n            return new Int32Array(buffer);\n        case TYPE_UINT32ARRAY:\n            return new Uint32Array(buffer);\n        case TYPE_FLOAT32ARRAY:\n            return new Float32Array(buffer);\n        case TYPE_FLOAT64ARRAY:\n            return new Float64Array(buffer);\n        default:\n            throw new Error('Unkown type: ' + type);\n    }\n}\n\nvar localforageSerializer = {\n    serialize: serialize,\n    deserialize: deserialize,\n    stringToBuffer: stringToBuffer,\n    bufferToString: bufferToString\n};\n\n/*\n * Includes code from:\n *\n * base64-arraybuffer\n * https://github.com/niklasvh/base64-arraybuffer\n *\n * Copyright (c) 2012 Niklas von Hertzen\n * Licensed under the MIT license.\n */\n\nfunction createDbTable(t, dbInfo, callback, errorCallback) {\n    t.executeSql('CREATE TABLE IF NOT EXISTS ' + dbInfo.storeName + ' ' + '(id INTEGER PRIMARY KEY, key unique, value)', [], callback, errorCallback);\n}\n\n// Open the WebSQL database (automatically creates one if one didn't\n// previously exist), using any options set in the config.\nfunction _initStorage$1(options) {\n    var self = this;\n    var dbInfo = {\n        db: null\n    };\n\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = typeof options[i] !== 'string' ? options[i].toString() : options[i];\n        }\n    }\n\n    var dbInfoPromise = new Promise$1(function (resolve, reject) {\n        // Open the database; the openDatabase API will automatically\n        // create it for us if it doesn't exist.\n        try {\n            dbInfo.db = openDatabase(dbInfo.name, String(dbInfo.version), dbInfo.description, dbInfo.size);\n        } catch (e) {\n            return reject(e);\n        }\n\n        // Create our key/value table if it doesn't exist.\n        dbInfo.db.transaction(function (t) {\n            createDbTable(t, dbInfo, function () {\n                self._dbInfo = dbInfo;\n                resolve();\n            }, function (t, error) {\n                reject(error);\n            });\n        }, reject);\n    });\n\n    dbInfo.serializer = localforageSerializer;\n    return dbInfoPromise;\n}\n\nfunction tryExecuteSql(t, dbInfo, sqlStatement, args, callback, errorCallback) {\n    t.executeSql(sqlStatement, args, callback, function (t, error) {\n        if (error.code === error.SYNTAX_ERR) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name = ?\", [dbInfo.storeName], function (t, results) {\n                if (!results.rows.length) {\n                    // if the table is missing (was deleted)\n                    // re-create it table and retry\n                    createDbTable(t, dbInfo, function () {\n                        t.executeSql(sqlStatement, args, callback, errorCallback);\n                    }, errorCallback);\n                } else {\n                    errorCallback(t, error);\n                }\n            }, errorCallback);\n        } else {\n            errorCallback(t, error);\n        }\n    }, errorCallback);\n}\n\nfunction getItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName + ' WHERE key = ? LIMIT 1', [key], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).value : null;\n\n                    // Check to see if this is serialized content we need to\n                    // unpack.\n                    if (result) {\n                        result = dbInfo.serializer.deserialize(result);\n                    }\n\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction iterate$1(iterator, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT * FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var rows = results.rows;\n                    var length = rows.length;\n\n                    for (var i = 0; i < length; i++) {\n                        var item = rows.item(i);\n                        var result = item.value;\n\n                        // Check to see if this is serialized content\n                        // we need to unpack.\n                        if (result) {\n                            result = dbInfo.serializer.deserialize(result);\n                        }\n\n                        result = iterator(result, item.key, i + 1);\n\n                        // void(0) prevents problems with redefinition\n                        // of `undefined`.\n                        if (result !== void 0) {\n                            resolve(result);\n                            return;\n                        }\n                    }\n\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction _setItem(key, value, callback, retriesLeft) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            // The localStorage API doesn't return undefined values in an\n            // \"expected\" way, so undefined is always cast to null in all\n            // drivers. See: https://github.com/mozilla/localForage/pull/42\n            if (value === undefined) {\n                value = null;\n            }\n\n            // Save the original value to pass to the callback.\n            var originalValue = value;\n\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    dbInfo.db.transaction(function (t) {\n                        tryExecuteSql(t, dbInfo, 'INSERT OR REPLACE INTO ' + dbInfo.storeName + ' ' + '(key, value) VALUES (?, ?)', [key, value], function () {\n                            resolve(originalValue);\n                        }, function (t, error) {\n                            reject(error);\n                        });\n                    }, function (sqlError) {\n                        // The transaction failed; check\n                        // to see if it's a quota error.\n                        if (sqlError.code === sqlError.QUOTA_ERR) {\n                            // We reject the callback outright for now, but\n                            // it's worth trying to re-run the transaction.\n                            // Even if the user accepts the prompt to use\n                            // more storage on Safari, this error will\n                            // be called.\n                            //\n                            // Try to re-run the transaction.\n                            if (retriesLeft > 0) {\n                                resolve(_setItem.apply(self, [key, originalValue, callback, retriesLeft - 1]));\n                                return;\n                            }\n                            reject(sqlError);\n                        }\n                    });\n                }\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction setItem$1(key, value, callback) {\n    return _setItem.apply(this, [key, value, callback, 1]);\n}\n\nfunction removeItem$1(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName + ' WHERE key = ?', [key], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Deletes every item in the table.\n// TODO: Find out if this resets the AUTO_INCREMENT number.\nfunction clear$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'DELETE FROM ' + dbInfo.storeName, [], function () {\n                    resolve();\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Does a simple `COUNT(key)` to get the number of items stored in\n// localForage.\nfunction length$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                // Ahhh, SQL makes this one soooooo easy.\n                tryExecuteSql(t, dbInfo, 'SELECT COUNT(key) as c FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var result = results.rows.item(0).c;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Return the key located at key index X; essentially gets the key from a\n// `WHERE id = ?`. This is the most efficient way I can think to implement\n// this rarely-used (in my experience) part of the API, but it can seem\n// inconsistent, because we do `INSERT OR REPLACE INTO` on `setItem()`, so\n// the ID of each key will change every time it's updated. Perhaps a stored\n// procedure for the `setItem()` SQL would solve this problem?\n// TODO: Don't change ID on `setItem()`.\nfunction key$1(n, callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName + ' WHERE id = ? LIMIT 1', [n + 1], function (t, results) {\n                    var result = results.rows.length ? results.rows.item(0).key : null;\n                    resolve(result);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$1(callback) {\n    var self = this;\n\n    var promise = new Promise$1(function (resolve, reject) {\n        self.ready().then(function () {\n            var dbInfo = self._dbInfo;\n            dbInfo.db.transaction(function (t) {\n                tryExecuteSql(t, dbInfo, 'SELECT key FROM ' + dbInfo.storeName, [], function (t, results) {\n                    var keys = [];\n\n                    for (var i = 0; i < results.rows.length; i++) {\n                        keys.push(results.rows.item(i).key);\n                    }\n\n                    resolve(keys);\n                }, function (t, error) {\n                    reject(error);\n                });\n            });\n        })[\"catch\"](reject);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// https://www.w3.org/TR/webdatabase/#databases\n// > There is no way to enumerate or delete the databases available for an origin from this API.\nfunction getAllStoreNames(db) {\n    return new Promise$1(function (resolve, reject) {\n        db.transaction(function (t) {\n            t.executeSql('SELECT name FROM sqlite_master ' + \"WHERE type='table' AND name <> '__WebKitDatabaseInfoTable__'\", [], function (t, results) {\n                var storeNames = [];\n\n                for (var i = 0; i < results.rows.length; i++) {\n                    storeNames.push(results.rows.item(i).name);\n                }\n\n                resolve({\n                    db: db,\n                    storeNames: storeNames\n                });\n            }, function (t, error) {\n                reject(error);\n            });\n        }, function (sqlError) {\n            reject(sqlError);\n        });\n    });\n}\n\nfunction dropInstance$1(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    var currentConfig = this.config();\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            var db;\n            if (options.name === currentConfig.name) {\n                // use the db reference of the current instance\n                db = self._dbInfo.db;\n            } else {\n                db = openDatabase(options.name, '', '', 0);\n            }\n\n            if (!options.storeName) {\n                // drop all database tables\n                resolve(getAllStoreNames(db));\n            } else {\n                resolve({\n                    db: db,\n                    storeNames: [options.storeName]\n                });\n            }\n        }).then(function (operationInfo) {\n            return new Promise$1(function (resolve, reject) {\n                operationInfo.db.transaction(function (t) {\n                    function dropTable(storeName) {\n                        return new Promise$1(function (resolve, reject) {\n                            t.executeSql('DROP TABLE IF EXISTS ' + storeName, [], function () {\n                                resolve();\n                            }, function (t, error) {\n                                reject(error);\n                            });\n                        });\n                    }\n\n                    var operations = [];\n                    for (var i = 0, len = operationInfo.storeNames.length; i < len; i++) {\n                        operations.push(dropTable(operationInfo.storeNames[i]));\n                    }\n\n                    Promise$1.all(operations).then(function () {\n                        resolve();\n                    })[\"catch\"](function (e) {\n                        reject(e);\n                    });\n                }, function (sqlError) {\n                    reject(sqlError);\n                });\n            });\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar webSQLStorage = {\n    _driver: 'webSQLStorage',\n    _initStorage: _initStorage$1,\n    _support: isWebSQLValid(),\n    iterate: iterate$1,\n    getItem: getItem$1,\n    setItem: setItem$1,\n    removeItem: removeItem$1,\n    clear: clear$1,\n    length: length$1,\n    key: key$1,\n    keys: keys$1,\n    dropInstance: dropInstance$1\n};\n\nfunction isLocalStorageValid() {\n    try {\n        return typeof localStorage !== 'undefined' && 'setItem' in localStorage &&\n        // in IE8 typeof localStorage.setItem === 'object'\n        !!localStorage.setItem;\n    } catch (e) {\n        return false;\n    }\n}\n\nfunction _getKeyPrefix(options, defaultConfig) {\n    var keyPrefix = options.name + '/';\n\n    if (options.storeName !== defaultConfig.storeName) {\n        keyPrefix += options.storeName + '/';\n    }\n    return keyPrefix;\n}\n\n// Check if localStorage throws when saving an item\nfunction checkIfLocalStorageThrows() {\n    var localStorageTestKey = '_localforage_support_test';\n\n    try {\n        localStorage.setItem(localStorageTestKey, true);\n        localStorage.removeItem(localStorageTestKey);\n\n        return false;\n    } catch (e) {\n        return true;\n    }\n}\n\n// Check if localStorage is usable and allows to save an item\n// This method checks if localStorage is usable in Safari Private Browsing\n// mode, or in any other case where the available quota for localStorage\n// is 0 and there wasn't any saved items yet.\nfunction _isLocalStorageUsable() {\n    return !checkIfLocalStorageThrows() || localStorage.length > 0;\n}\n\n// Config the localStorage backend, using options set in the config.\nfunction _initStorage$2(options) {\n    var self = this;\n    var dbInfo = {};\n    if (options) {\n        for (var i in options) {\n            dbInfo[i] = options[i];\n        }\n    }\n\n    dbInfo.keyPrefix = _getKeyPrefix(options, self._defaultConfig);\n\n    if (!_isLocalStorageUsable()) {\n        return Promise$1.reject();\n    }\n\n    self._dbInfo = dbInfo;\n    dbInfo.serializer = localforageSerializer;\n\n    return Promise$1.resolve();\n}\n\n// Remove all keys from the datastore, effectively destroying all data in\n// the app's key/value store!\nfunction clear$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var keyPrefix = self._dbInfo.keyPrefix;\n\n        for (var i = localStorage.length - 1; i >= 0; i--) {\n            var key = localStorage.key(i);\n\n            if (key.indexOf(keyPrefix) === 0) {\n                localStorage.removeItem(key);\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Retrieve an item from the store. Unlike the original async_storage\n// library in Gaia, we don't modify return values at all. If a key's value\n// is `undefined`, we pass that value to the callback function.\nfunction getItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result = localStorage.getItem(dbInfo.keyPrefix + key);\n\n        // If a result was found, parse it from the serialized\n        // string into a JS object. If result isn't truthy, the key\n        // is likely undefined and we'll pass it straight to the\n        // callback.\n        if (result) {\n            result = dbInfo.serializer.deserialize(result);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Iterate over all items in the store.\nfunction iterate$2(iterator, callback) {\n    var self = this;\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var keyPrefix = dbInfo.keyPrefix;\n        var keyPrefixLength = keyPrefix.length;\n        var length = localStorage.length;\n\n        // We use a dedicated iterator instead of the `i` variable below\n        // so other keys we fetch in localStorage aren't counted in\n        // the `iterationNumber` argument passed to the `iterate()`\n        // callback.\n        //\n        // See: github.com/mozilla/localForage/pull/435#discussion_r38061530\n        var iterationNumber = 1;\n\n        for (var i = 0; i < length; i++) {\n            var key = localStorage.key(i);\n            if (key.indexOf(keyPrefix) !== 0) {\n                continue;\n            }\n            var value = localStorage.getItem(key);\n\n            // If a result was found, parse it from the serialized\n            // string into a JS object. If result isn't truthy, the\n            // key is likely undefined and we'll pass it straight\n            // to the iterator.\n            if (value) {\n                value = dbInfo.serializer.deserialize(value);\n            }\n\n            value = iterator(value, key.substring(keyPrefixLength), iterationNumber++);\n\n            if (value !== void 0) {\n                return value;\n            }\n        }\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Same as localStorage's key() method, except takes a callback.\nfunction key$2(n, callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var result;\n        try {\n            result = localStorage.key(n);\n        } catch (error) {\n            result = null;\n        }\n\n        // Remove the prefix from the key, if a key is found.\n        if (result) {\n            result = result.substring(dbInfo.keyPrefix.length);\n        }\n\n        return result;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction keys$2(callback) {\n    var self = this;\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        var length = localStorage.length;\n        var keys = [];\n\n        for (var i = 0; i < length; i++) {\n            var itemKey = localStorage.key(i);\n            if (itemKey.indexOf(dbInfo.keyPrefix) === 0) {\n                keys.push(itemKey.substring(dbInfo.keyPrefix.length));\n            }\n        }\n\n        return keys;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Supply the number of keys in the datastore to the callback function.\nfunction length$2(callback) {\n    var self = this;\n    var promise = self.keys().then(function (keys) {\n        return keys.length;\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Remove an item from the store, nice and simple.\nfunction removeItem$2(key, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        var dbInfo = self._dbInfo;\n        localStorage.removeItem(dbInfo.keyPrefix + key);\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\n// Set a key's value and run an optional callback once the value is set.\n// Unlike Gaia's implementation, the callback function is passed the value,\n// in case you want to operate on that value only after you're sure it\n// saved, or something like that.\nfunction setItem$2(key, value, callback) {\n    var self = this;\n\n    key = normalizeKey(key);\n\n    var promise = self.ready().then(function () {\n        // Convert undefined values to null.\n        // https://github.com/mozilla/localForage/pull/42\n        if (value === undefined) {\n            value = null;\n        }\n\n        // Save the original value to pass to the callback.\n        var originalValue = value;\n\n        return new Promise$1(function (resolve, reject) {\n            var dbInfo = self._dbInfo;\n            dbInfo.serializer.serialize(value, function (value, error) {\n                if (error) {\n                    reject(error);\n                } else {\n                    try {\n                        localStorage.setItem(dbInfo.keyPrefix + key, value);\n                        resolve(originalValue);\n                    } catch (e) {\n                        // localStorage capacity exceeded.\n                        // TODO: Make this a specific error/event.\n                        if (e.name === 'QuotaExceededError' || e.name === 'NS_ERROR_DOM_QUOTA_REACHED') {\n                            reject(e);\n                        }\n                        reject(e);\n                    }\n                }\n            });\n        });\n    });\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nfunction dropInstance$2(options, callback) {\n    callback = getCallback.apply(this, arguments);\n\n    options = typeof options !== 'function' && options || {};\n    if (!options.name) {\n        var currentConfig = this.config();\n        options.name = options.name || currentConfig.name;\n        options.storeName = options.storeName || currentConfig.storeName;\n    }\n\n    var self = this;\n    var promise;\n    if (!options.name) {\n        promise = Promise$1.reject('Invalid arguments');\n    } else {\n        promise = new Promise$1(function (resolve) {\n            if (!options.storeName) {\n                resolve(options.name + '/');\n            } else {\n                resolve(_getKeyPrefix(options, self._defaultConfig));\n            }\n        }).then(function (keyPrefix) {\n            for (var i = localStorage.length - 1; i >= 0; i--) {\n                var key = localStorage.key(i);\n\n                if (key.indexOf(keyPrefix) === 0) {\n                    localStorage.removeItem(key);\n                }\n            }\n        });\n    }\n\n    executeCallback(promise, callback);\n    return promise;\n}\n\nvar localStorageWrapper = {\n    _driver: 'localStorageWrapper',\n    _initStorage: _initStorage$2,\n    _support: isLocalStorageValid(),\n    iterate: iterate$2,\n    getItem: getItem$2,\n    setItem: setItem$2,\n    removeItem: removeItem$2,\n    clear: clear$2,\n    length: length$2,\n    key: key$2,\n    keys: keys$2,\n    dropInstance: dropInstance$2\n};\n\nvar sameValue = function sameValue(x, y) {\n    return x === y || typeof x === 'number' && typeof y === 'number' && isNaN(x) && isNaN(y);\n};\n\nvar includes = function includes(array, searchElement) {\n    var len = array.length;\n    var i = 0;\n    while (i < len) {\n        if (sameValue(array[i], searchElement)) {\n            return true;\n        }\n        i++;\n    }\n\n    return false;\n};\n\nvar isArray = Array.isArray || function (arg) {\n    return Object.prototype.toString.call(arg) === '[object Array]';\n};\n\n// Drivers are stored here when `defineDriver()` is called.\n// They are shared across all instances of localForage.\nvar DefinedDrivers = {};\n\nvar DriverSupport = {};\n\nvar DefaultDrivers = {\n    INDEXEDDB: asyncStorage,\n    WEBSQL: webSQLStorage,\n    LOCALSTORAGE: localStorageWrapper\n};\n\nvar DefaultDriverOrder = [DefaultDrivers.INDEXEDDB._driver, DefaultDrivers.WEBSQL._driver, DefaultDrivers.LOCALSTORAGE._driver];\n\nvar OptionalDriverMethods = ['dropInstance'];\n\nvar LibraryMethods = ['clear', 'getItem', 'iterate', 'key', 'keys', 'length', 'removeItem', 'setItem'].concat(OptionalDriverMethods);\n\nvar DefaultConfig = {\n    description: '',\n    driver: DefaultDriverOrder.slice(),\n    name: 'localforage',\n    // Default DB size is _JUST UNDER_ 5MB, as it's the highest size\n    // we can use without a prompt.\n    size: 4980736,\n    storeName: 'keyvaluepairs',\n    version: 1.0\n};\n\nfunction callWhenReady(localForageInstance, libraryMethod) {\n    localForageInstance[libraryMethod] = function () {\n        var _args = arguments;\n        return localForageInstance.ready().then(function () {\n            return localForageInstance[libraryMethod].apply(localForageInstance, _args);\n        });\n    };\n}\n\nfunction extend() {\n    for (var i = 1; i < arguments.length; i++) {\n        var arg = arguments[i];\n\n        if (arg) {\n            for (var _key in arg) {\n                if (arg.hasOwnProperty(_key)) {\n                    if (isArray(arg[_key])) {\n                        arguments[0][_key] = arg[_key].slice();\n                    } else {\n                        arguments[0][_key] = arg[_key];\n                    }\n                }\n            }\n        }\n    }\n\n    return arguments[0];\n}\n\nvar LocalForage = function () {\n    function LocalForage(options) {\n        _classCallCheck(this, LocalForage);\n\n        for (var driverTypeKey in DefaultDrivers) {\n            if (DefaultDrivers.hasOwnProperty(driverTypeKey)) {\n                var driver = DefaultDrivers[driverTypeKey];\n                var driverName = driver._driver;\n                this[driverTypeKey] = driverName;\n\n                if (!DefinedDrivers[driverName]) {\n                    // we don't need to wait for the promise,\n                    // since the default drivers can be defined\n                    // in a blocking manner\n                    this.defineDriver(driver);\n                }\n            }\n        }\n\n        this._defaultConfig = extend({}, DefaultConfig);\n        this._config = extend({}, this._defaultConfig, options);\n        this._driverSet = null;\n        this._initDriver = null;\n        this._ready = false;\n        this._dbInfo = null;\n\n        this._wrapLibraryMethodsWithReady();\n        this.setDriver(this._config.driver)[\"catch\"](function () {});\n    }\n\n    // Set any config values for localForage; can be called anytime before\n    // the first API call (e.g. `getItem`, `setItem`).\n    // We loop through options so we don't overwrite existing config\n    // values.\n\n\n    LocalForage.prototype.config = function config(options) {\n        // If the options argument is an object, we use it to set values.\n        // Otherwise, we return either a specified config value or all\n        // config values.\n        if ((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object') {\n            // If localforage is ready and fully initialized, we can't set\n            // any new configuration values. Instead, we return an error.\n            if (this._ready) {\n                return new Error(\"Can't call config() after localforage \" + 'has been used.');\n            }\n\n            for (var i in options) {\n                if (i === 'storeName') {\n                    options[i] = options[i].replace(/\\W/g, '_');\n                }\n\n                if (i === 'version' && typeof options[i] !== 'number') {\n                    return new Error('Database version must be a number.');\n                }\n\n                this._config[i] = options[i];\n            }\n\n            // after all config options are set and\n            // the driver option is used, try setting it\n            if ('driver' in options && options.driver) {\n                return this.setDriver(this._config.driver);\n            }\n\n            return true;\n        } else if (typeof options === 'string') {\n            return this._config[options];\n        } else {\n            return this._config;\n        }\n    };\n\n    // Used to define a custom driver, shared across all instances of\n    // localForage.\n\n\n    LocalForage.prototype.defineDriver = function defineDriver(driverObject, callback, errorCallback) {\n        var promise = new Promise$1(function (resolve, reject) {\n            try {\n                var driverName = driverObject._driver;\n                var complianceError = new Error('Custom driver not compliant; see ' + 'https://mozilla.github.io/localForage/#definedriver');\n\n                // A driver name should be defined and not overlap with the\n                // library-defined, default drivers.\n                if (!driverObject._driver) {\n                    reject(complianceError);\n                    return;\n                }\n\n                var driverMethods = LibraryMethods.concat('_initStorage');\n                for (var i = 0, len = driverMethods.length; i < len; i++) {\n                    var driverMethodName = driverMethods[i];\n\n                    // when the property is there,\n                    // it should be a method even when optional\n                    var isRequired = !includes(OptionalDriverMethods, driverMethodName);\n                    if ((isRequired || driverObject[driverMethodName]) && typeof driverObject[driverMethodName] !== 'function') {\n                        reject(complianceError);\n                        return;\n                    }\n                }\n\n                var configureMissingMethods = function configureMissingMethods() {\n                    var methodNotImplementedFactory = function methodNotImplementedFactory(methodName) {\n                        return function () {\n                            var error = new Error('Method ' + methodName + ' is not implemented by the current driver');\n                            var promise = Promise$1.reject(error);\n                            executeCallback(promise, arguments[arguments.length - 1]);\n                            return promise;\n                        };\n                    };\n\n                    for (var _i = 0, _len = OptionalDriverMethods.length; _i < _len; _i++) {\n                        var optionalDriverMethod = OptionalDriverMethods[_i];\n                        if (!driverObject[optionalDriverMethod]) {\n                            driverObject[optionalDriverMethod] = methodNotImplementedFactory(optionalDriverMethod);\n                        }\n                    }\n                };\n\n                configureMissingMethods();\n\n                var setDriverSupport = function setDriverSupport(support) {\n                    if (DefinedDrivers[driverName]) {\n                        console.info('Redefining LocalForage driver: ' + driverName);\n                    }\n                    DefinedDrivers[driverName] = driverObject;\n                    DriverSupport[driverName] = support;\n                    // don't use a then, so that we can define\n                    // drivers that have simple _support methods\n                    // in a blocking manner\n                    resolve();\n                };\n\n                if ('_support' in driverObject) {\n                    if (driverObject._support && typeof driverObject._support === 'function') {\n                        driverObject._support().then(setDriverSupport, reject);\n                    } else {\n                        setDriverSupport(!!driverObject._support);\n                    }\n                } else {\n                    setDriverSupport(true);\n                }\n            } catch (e) {\n                reject(e);\n            }\n        });\n\n        executeTwoCallbacks(promise, callback, errorCallback);\n        return promise;\n    };\n\n    LocalForage.prototype.driver = function driver() {\n        return this._driver || null;\n    };\n\n    LocalForage.prototype.getDriver = function getDriver(driverName, callback, errorCallback) {\n        var getDriverPromise = DefinedDrivers[driverName] ? Promise$1.resolve(DefinedDrivers[driverName]) : Promise$1.reject(new Error('Driver not found.'));\n\n        executeTwoCallbacks(getDriverPromise, callback, errorCallback);\n        return getDriverPromise;\n    };\n\n    LocalForage.prototype.getSerializer = function getSerializer(callback) {\n        var serializerPromise = Promise$1.resolve(localforageSerializer);\n        executeTwoCallbacks(serializerPromise, callback);\n        return serializerPromise;\n    };\n\n    LocalForage.prototype.ready = function ready(callback) {\n        var self = this;\n\n        var promise = self._driverSet.then(function () {\n            if (self._ready === null) {\n                self._ready = self._initDriver();\n            }\n\n            return self._ready;\n        });\n\n        executeTwoCallbacks(promise, callback, callback);\n        return promise;\n    };\n\n    LocalForage.prototype.setDriver = function setDriver(drivers, callback, errorCallback) {\n        var self = this;\n\n        if (!isArray(drivers)) {\n            drivers = [drivers];\n        }\n\n        var supportedDrivers = this._getSupportedDrivers(drivers);\n\n        function setDriverToConfig() {\n            self._config.driver = self.driver();\n        }\n\n        function extendSelfWithDriver(driver) {\n            self._extend(driver);\n            setDriverToConfig();\n\n            self._ready = self._initStorage(self._config);\n            return self._ready;\n        }\n\n        function initDriver(supportedDrivers) {\n            return function () {\n                var currentDriverIndex = 0;\n\n                function driverPromiseLoop() {\n                    while (currentDriverIndex < supportedDrivers.length) {\n                        var driverName = supportedDrivers[currentDriverIndex];\n                        currentDriverIndex++;\n\n                        self._dbInfo = null;\n                        self._ready = null;\n\n                        return self.getDriver(driverName).then(extendSelfWithDriver)[\"catch\"](driverPromiseLoop);\n                    }\n\n                    setDriverToConfig();\n                    var error = new Error('No available storage method found.');\n                    self._driverSet = Promise$1.reject(error);\n                    return self._driverSet;\n                }\n\n                return driverPromiseLoop();\n            };\n        }\n\n        // There might be a driver initialization in progress\n        // so wait for it to finish in order to avoid a possible\n        // race condition to set _dbInfo\n        var oldDriverSetDone = this._driverSet !== null ? this._driverSet[\"catch\"](function () {\n            return Promise$1.resolve();\n        }) : Promise$1.resolve();\n\n        this._driverSet = oldDriverSetDone.then(function () {\n            var driverName = supportedDrivers[0];\n            self._dbInfo = null;\n            self._ready = null;\n\n            return self.getDriver(driverName).then(function (driver) {\n                self._driver = driver._driver;\n                setDriverToConfig();\n                self._wrapLibraryMethodsWithReady();\n                self._initDriver = initDriver(supportedDrivers);\n            });\n        })[\"catch\"](function () {\n            setDriverToConfig();\n            var error = new Error('No available storage method found.');\n            self._driverSet = Promise$1.reject(error);\n            return self._driverSet;\n        });\n\n        executeTwoCallbacks(this._driverSet, callback, errorCallback);\n        return this._driverSet;\n    };\n\n    LocalForage.prototype.supports = function supports(driverName) {\n        return !!DriverSupport[driverName];\n    };\n\n    LocalForage.prototype._extend = function _extend(libraryMethodsAndProperties) {\n        extend(this, libraryMethodsAndProperties);\n    };\n\n    LocalForage.prototype._getSupportedDrivers = function _getSupportedDrivers(drivers) {\n        var supportedDrivers = [];\n        for (var i = 0, len = drivers.length; i < len; i++) {\n            var driverName = drivers[i];\n            if (this.supports(driverName)) {\n                supportedDrivers.push(driverName);\n            }\n        }\n        return supportedDrivers;\n    };\n\n    LocalForage.prototype._wrapLibraryMethodsWithReady = function _wrapLibraryMethodsWithReady() {\n        // Add a stub for each driver API method that delays the call to the\n        // corresponding driver method until localForage is ready. These stubs\n        // will be replaced by the driver methods as soon as the driver is\n        // loaded, so there is no performance impact.\n        for (var i = 0, len = LibraryMethods.length; i < len; i++) {\n            callWhenReady(this, LibraryMethods[i]);\n        }\n    };\n\n    LocalForage.prototype.createInstance = function createInstance(options) {\n        return new LocalForage(options);\n    };\n\n    return LocalForage;\n}();\n\n// The actual localForage object that we expose as a module or via a\n// global. It's extended by pulling in one of our other libraries.\n\n\nvar localforage_js = new LocalForage();\n\nmodule.exports = localforage_js;\n\n},{\"3\":3}]},{},[4])(4)\n});\n"],"names":["Data","StorageDatabaseHelper","constructor","dbName","tableName","this","_db","res","openStore","_dbName","_tableName","Error","ret","config","setConfig","name","storeName","driver","version","async","Promise","resolve","reject","table","tables","includes","err","DBOpenRequest","window","indexedDB","open","onerror","onsuccess","result","db","retList","objectStoreNames","values","Object","val","substring","data","setItem","value","getItem","removeItem","then","catch","error","clear","keys","iterate","push","keysvalues","key","get","changes","set","retJson","prevTableName","database","slice","encrypted","retTable","msg","dataTable","tdata","retData","isJsonStore","obj","keyFirstLevel","length","indexOf","oKey","isTable","keyTableLevel","retValue","isValue","CapacitorDataStorageSqliteWeb","options","mDb","message","setTable","remove","iskey","filter","regFilter","startsWith","RegExp","endsWith","results","test","totalChanges","jsonstring","jsonStrObj","jsonObj","JSON","parse","isValid","vJsonObj","bRet","importJson","exportJson","export","f","module","exports","e","t","n","r","s","o","u","a","i","code","l","call","_dereq_","global","scheduleDrain","draining","Mutation","MutationObserver","WebKitMutationObserver","called","observer","nextTick","element","document","createTextNode","observe","characterData","setImmediate","MessageChannel","createElement","scriptEl","onreadystatechange","parentNode","removeChild","documentElement","appendChild","setTimeout","channel","port1","onmessage","port2","postMessage","queue","oldQueue","len","immediate","task","g","self","INTERNAL","handlers","REJECTED","FULFILLED","PENDING","resolver","TypeError","state","outcome","safelyResolveThenable","QueueItem","promise","onFulfilled","onRejected","callFulfilled","otherCallFulfilled","callRejected","otherCallRejected","unwrap","func","returnValue","getThen","apply","arguments","thenable","onError","onSuccess","tryToUnwrap","tryCatch","status","out","reason","all","iterable","prototype","toString","Array","resolved","allResolver","resolveFromAll","outValue","race","response","_typeof","Symbol","iterator","_classCallCheck","instance","Constructor","getIDB","webkitIndexedDB","mozIndexedDB","OIndexedDB","msIndexedDB","idb","isIndexedDBValid","isSafari","openDatabase","navigator","userAgent","platform","hasFetch","fetch","IDBKeyRange","createBlob","parts","properties","Blob","Builder","BlobBuilder","MSBlobBuilder","MozBlobBuilder","WebKitBlobBuilder","builder","append","getBlob","type","Promise$1","executeCallback","callback","executeTwoCallbacks","errorCallback","normalizeKey","console","warn","String","getCallback","DETECT_BLOB_SUPPORT_STORE","supportsBlobs","dbContexts","READ_ONLY","READ_WRITE","_binStringToArrayBuffer","bin","buf","ArrayBuffer","arr","Uint8Array","charCodeAt","_checkBlobSupportWithoutCaching","txn","transaction","blob","objectStore","put","onabort","preventDefault","stopPropagation","oncomplete","matchedChrome","match","matchedEdge","parseInt","_checkBlobSupport","_deferReadiness","dbInfo","dbContext","deferredOperation","deferredOperations","dbReady","_advanceReadiness","pop","_rejectReadiness","_getConnection","upgradeNeeded","createDbContext","close","dbArgs","openreq","onupgradeneeded","createObjectStore","oldVersion","ex","newVersion","onversionchange","target","_getOriginalConnection","_getUpgradedConnection","_isUpgradeNeeded","defaultVersion","isNewStore","contains","isDowngrade","isUpgrade","incVersion","_encodeBlob","reader","FileReader","onloadend","base64","btoa","__local_forage_encoded_blob","readAsBinaryString","_decodeBlob","encodedBlob","arrayBuff","atob","_isEncodedBlob","_fullyReady","_initReady","_dbInfo","_tryReconnect","forages","forage","createTransaction","mode","retries","undefined","tx","_initStorage","ready","initPromises","ignoreErrors","j","_defaultConfig","k","store","req","openCursor","iterationNumber","cursor","blobSupport","count","advanced","openKeyCursor","advance","dropInstance","currentConfig","isCurrentDb","dbPromise","dropObjectPromise","deleteObjectStore","_forage2","dropDBPromise","deleteDatabase","onblocked","_forage","asyncStorage","_driver","_support","isWebSQLValid","BASE_CHARS","BLOB_TYPE_PREFIX","BLOB_TYPE_PREFIX_REGEX","SERIALIZED_MARKER","SERIALIZED_MARKER_LENGTH","TYPE_ARRAYBUFFER","TYPE_BLOB","TYPE_INT8ARRAY","TYPE_UINT8ARRAY","TYPE_UINT8CLAMPEDARRAY","TYPE_INT16ARRAY","TYPE_INT32ARRAY","TYPE_UINT16ARRAY","TYPE_UINT32ARRAY","TYPE_FLOAT32ARRAY","TYPE_FLOAT64ARRAY","TYPE_SERIALIZED_MARKER_LENGTH","toString$1","stringToBuffer","serializedString","encoded1","encoded2","encoded3","encoded4","bufferLength","p","buffer","bytes","bufferToString","base64String","serialize","valueType","marker","fileReader","onload","str","readAsArrayBuffer","stringify","deserialize","blobType","matcher","Int8Array","Uint8ClampedArray","Int16Array","Uint16Array","Int32Array","Uint32Array","Float32Array","Float64Array","localforageSerializer","createDbTable","executeSql","_initStorage$1","dbInfoPromise","description","size","serializer","tryExecuteSql","sqlStatement","args","SYNTAX_ERR","rows","getItem$1","item","iterate$1","_setItem","retriesLeft","originalValue","sqlError","QUOTA_ERR","setItem$1","removeItem$1","clear$1","length$1","c","key$1","keys$1","getAllStoreNames","storeNames","dropInstance$1","operationInfo","dropTable","operations","webSQLStorage","isLocalStorageValid","localStorage","_getKeyPrefix","defaultConfig","keyPrefix","checkIfLocalStorageThrows","localStorageTestKey","_isLocalStorageUsable","_initStorage$2","clear$2","getItem$2","iterate$2","keyPrefixLength","key$2","keys$2","itemKey","length$2","removeItem$2","setItem$2","dropInstance$2","localStorageWrapper","sameValue","x","y","isNaN","array","searchElement","isArray","arg","DefinedDrivers","DriverSupport","DefaultDrivers","INDEXEDDB","WEBSQL","LOCALSTORAGE","DefaultDriverOrder","OptionalDriverMethods","LibraryMethods","concat","DefaultConfig","callWhenReady","localForageInstance","libraryMethod","_args","extend","_key","hasOwnProperty","LocalForage","driverTypeKey","driverName","defineDriver","_config","_driverSet","_initDriver","_ready","_wrapLibraryMethodsWithReady","setDriver","replace","driverObject","complianceError","driverMethods","driverMethodName","isRequired","configureMissingMethods","methodNotImplementedFactory","methodName","_i","_len","optionalDriverMethod","setDriverSupport","support","info","getDriver","getDriverPromise","getSerializer","serializerPromise","drivers","supportedDrivers","_getSupportedDrivers","setDriverToConfig","extendSelfWithDriver","_extend","initDriver","currentDriverIndex","driverPromiseLoop","oldDriverSetDone","supports","libraryMethodsAndProperties","createInstance","localforage_js"],"sourceRoot":""}