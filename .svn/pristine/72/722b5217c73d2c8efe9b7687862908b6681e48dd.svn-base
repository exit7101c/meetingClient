<template>
  <ion-page v-if="this.BoardList != null">
    <custom-header page-name="Community"></custom-header>
    <ion-content ref="communityContainer">
      <div v-if="bannerList.length > 0">
        <!-- 상단 배너 -->
        <div class="ion-padding pb-0">
          <MainBanner :bannerList="bannerList" />
        </div>
      </div>
      <!-- 메인  -->
      <div class="sticky-top">
        <!--  탭   -->
        <ion-segment
          v-model="categoryCd"
          mode="ios"
          :scrollable="true"
          class="segment-chip"
          value=""
        >
          <ion-segment-button
            value=""
            @click="categoryBtn('all')"
            class="shape-round"
            >전체
          </ion-segment-button>
          <ion-segment-button
            v-for="item in categoryList"
            :key="item.boardId"
            :value="item.boardId"
            @click="categoryBtn(item)"
            class="shape-round"
          >
            {{ item.boardNm }}
          </ion-segment-button>
        </ion-segment>
        <ion-segment
          v-model="subCategoryCd"
          mode="ios"
          :scrollable="true"
          value=""
          class="segment-chip"
        >
          <ion-segment-button
            class="border-secondary"
            value=""
            @click="subCategoryBtn"
          >
            전체
          </ion-segment-button>
          <ion-segment-button
            value="popList"
            @click="popListBtn"
            class="border-secondary"
          >
            <ion-label
              style="font-size: 13px; align-items: center; display: flex"
            >
              지금뜨는
              <ion-icon
                :icon="hotPlace"
                style="width: 14px; height: 14px; margin-right: -3px"
              />
            </ion-label>
          </ion-segment-button>
          <template v-if="categoryCd !== ''">
            <ion-segment-button
              v-for="item in subCategoryList"
              :key="item.subBoardCd"
              :value="item.subBoardCd"
              @click="subCategoryBtn(item)"
              class="border-secondary"
            >
              {{ item.subBoardNm }}
            </ion-segment-button>
          </template>
          <!-- 스타일을 잡기위한 더미용 -->
          <template v-if="!subCategoryList.length || categoryCd === ''">
            <ion-segment-button
              v-for="(n, index) in 10"
              :key="index"
              class="is-blind"
            >
            </ion-segment-button>
          </template>

          <!-- 검색 창 -->
          <!-- <ion-searchbar>
              <input
                type="text"
                @ionInput="inputStr($event)"
                @keypress="searchChat($event)"
                placeholder="찾고 싶은 게시글을 검색하세요!"
                mode="ios"
                search-icon="ios"
                show-clear-button="never"
              />
              <span @click="searchBtn()"
                ><svg
                  xmlns="http://www.w3.org/2000/svg"
                  width="20.275"
                  height="21"
                  viewBox="0 0 20.275 21"
                >
                  <path
                    id="free-icon-search-149852"
                    d="M20.95,19.128l-5-5.2a8.475,8.475,0,1,0-6.49,3.028,8.388,8.388,0,0,0,4.858-1.534l5.036,5.238a1.106,1.106,0,1,0,1.594-1.533ZM9.463,2.212A6.267,6.267,0,1,1,3.2,8.479,6.274,6.274,0,0,1,9.463,2.212Z"
                    transform="translate(-0.984)"
                    fill="#fff"
                  />
                </svg>
              </span>
            </ion-searchbar> -->
          <!-- <ion-searchbar
            class="meetingSearch"
            @keypress="searchChat($event)"
            @ionInput="inputStr($event)"
            placeholder="검색해보세요."
            mode="md"
          >
          </ion-searchbar> -->
          <!-- 쪽지 -->
          <!-- <ion-button
              @click="$router.push('/letter')"
              class="msgBtn letter-btn"
              fill="clear"
              color="dark"
            >
              <svg
                xmlns="http://www.w3.org/2000/svg"
                width="24"
                height="24"
                viewBox="0 0 23.65 17.655"
              >
                <g id="free-icon-email-238842" opacity="0.999">
                  <g
                    id="그룹_1209"
                    data-name="그룹 1209"
                    transform="translate(0 0)"
                  >
                    <path
                      id="패스_921"
                      data-name="패스 921"
                      d="M23.053,65.484a2.007,2.007,0,0,0-1.421-.585H2.019A2.019,2.019,0,0,0,0,66.918V80.535a2.021,2.021,0,0,0,2.019,2.019H21.632a2.021,2.021,0,0,0,2.019-2.019V66.918A2,2,0,0,0,23.053,65.484ZM20.666,66.63l-8.841,8.664L2.984,66.63ZM21.92,80.535a.289.289,0,0,1-.288.288H2.019a.289.289,0,0,1-.288-.288V67.824l9.489,9.3a.865.865,0,0,0,1.211,0l9.489-9.3Z"
                      transform="translate(0 -64.899)"
                      fill="#fff"
                    />
                  </g>
                </g>
              </svg>
            </ion-button> -->
        </ion-segment>
      </div>

      <!-- Refresh -->
      <ion-refresher slot="fixed" @ionRefresh="doRefresh($event)">
        <ion-refresher-content
          refreshing-spinner="circles"
          :pulling-icon="chevronDownCircleOutline"
        ></ion-refresher-content>
      </ion-refresher>
      <!-- /Refresh -->
      <div class="ion-padding pt-0">
        <ion-list lines="full">
          <CommunityItem
            v-for="(data, index) in BoardList"
            :key="index"
            :item="data"
            @click="goRouter(data.articleKey, data)"
          />
        </ion-list>
        <ion-infinite-scroll
          :disabled="isEndScroll"
          threshold="100px"
          @ionInfinite="ionInfinite"
        >
          <ion-infinite-scroll-content></ion-infinite-scroll-content>
        </ion-infinite-scroll>
      </div>
    </ion-content>
    <!-- /메인  -->

    <!--  하단 플로팅 버튼 -->
    <ion-fab slot="fixed" vertical="bottom" horizontal="end">
      <ion-fab-button fill="clear" @click="scrollToTop" style="padding: 5px">
        <ion-ripple-effect></ion-ripple-effect>
        <ion-icon :icon="arrowUp"></ion-icon>
      </ion-fab-button>
      <ion-fab-button
        fill="clear"
        @click="nickModal = true"
        style="padding: 5px"
      >
        <ion-ripple-effect
          style="background-color: #616267"
        ></ion-ripple-effect>
        <ion-icon :icon="setting"></ion-icon>
      </ion-fab-button>
      <ion-fab-button
        fill="clear"
        @click="goRouter('', 'new')"
        style="padding: 5px"
      >
        <ion-ripple-effect></ion-ripple-effect>
        <ion-icon :icon="pencilOutline"></ion-icon>
      </ion-fab-button>
    </ion-fab>
    <!--  /하단 플로팅 버튼 -->

    <ion-modal :is-open="nickModal" @ionModalDidDismiss="nickModal = false">
      <ion-content class="ion-padding">
        <ion-toolbar mode="md">
          <ion-title class="main-header"> 커뮤니티 닉네임 설정 </ion-title>
        </ion-toolbar>
        <ion-row>
          <ion-col size="12">
            <ion-item
              counter="true"
              :counterFormatter="customFormatter"
              class="input-field"
            >
              <ion-input
                type="text"
                :clear-input="true"
                v-model="communityNick"
                maxlength="8"
                placeholder="닉네임은 최대 8글자까지 가능해요."
                class="custom-input"
                @ionInput="validateNickname($event)"
              />
            </ion-item>
            <ion-note class="errorText" v-if="!isNicknameValid">
              닉네임이 올바르지 않아요
            </ion-note>
          </ion-col>
        </ion-row>

        <ion-toolbar mode="md">
          <ion-title class="main-header"> 커뮤니티 아이콘 설정 </ion-title>
        </ion-toolbar>

        <ion-list lines="none">
          <ion-radio-group v-model="selectedAvatar" class="img-radio-group">
            <ion-row>
              <ion-col
                size="4"
                v-for="data in iconList"
                :key="data.iconCd"
                @click="selectIcon(data)"
              >
                <ion-item class="img-radio-button">
                  <ion-label>
                    <ion-img :src="'https://' + data.cdnThumbNm" />
                    <ion-text color="light">{{ data.iconNm }}</ion-text>
                  </ion-label>
                  <ion-radio slot="start" :value="data.iconCd"></ion-radio>
                </ion-item>
              </ion-col>
            </ion-row>
          </ion-radio-group>
        </ion-list>

        <ion-col size="12">
          <div class="text-center">
            <custom-button
              color="secondary"
              fill="outline"
              @click="nickModal = false"
            >
              취소
            </custom-button>
            <custom-button
              color="secondary"
              fill="solid"
              @click="saveCommunityNickname()"
            >
              변경
            </custom-button>
          </div>
        </ion-col>
      </ion-content>
    </ion-modal>
  </ion-page>
</template>

<script>
import {
  IonInfiniteScroll,
  IonInfiniteScrollContent,
  IonRefresher,
  IonRefresherContent
} from '@ionic/vue';
import { pencilOutline, chevronDownCircleOutline } from 'ionicons/icons';
import {
  getData,
  communityViewMapFn,
  communityWriteMapFn,
  communityWriteMap
} from '@/assets/js/common';
import MainBanner from '@/components/Home/MainBanner.vue';
import CommunityItem from '@/components/Community/CommunityItem.vue';
import NickChangeModal from '@/components/Modal/NickChangeModal.vue';
import IconHotPlace from '@/assets/img/icon/icon_hot_place.svg';
import IconSetting from '@/assets/img/icon/icon_setting2.svg';
import IconPencil from '@/assets/img/icon/icon_pencil.svg';
import IconChatbubbleOutline from '@/assets/img/icon/icon_chatbubbleOutline.svg';
import IonEyeOutline from '@/assets/img/icon/ion_eyeOutline.svg';
import IonArrowUp from '@/assets/img/icon/icon_arrow_up.svg';

export default {
  name: 'Community',
  inject: ['alertController', 'loadingController'],
  components: {
    IonInfiniteScroll,
    IonInfiniteScrollContent,
    IonRefresher,
    IonRefresherContent,
    MainBanner,
    CommunityItem,
    NickChangeModal
  },
  data() {
    return {
      arrowUp: IonArrowUp,
      eyeOutline: IonEyeOutline,
      chatbubble: IconChatbubbleOutline,
      setting: IconSetting,
      pencil: IconPencil,
      hotPlace: IconHotPlace,
      pencilOutline,
      chevronDownCircleOutline,
      dataLoaded: false,
      BoardList: [],
      showAll: false,
      segmentCd: 'trouble',
      segmentType: '1',
      crDt: '', // 시간
      searchStr: '', // 검색
      categoryList: [],
      categoryCd: '',
      subCategoryCd: '',
      subCategoryList: [],
      pageNo: 1,
      pageSize: 30,
      currentPageNo: 1,
      totalCount: 0,
      isEndScroll: false,

      bannerList: [],
      nickModal: false,
      isNicknameValid: true,
      communityNick: '',
      isNicknameCheckValid: false,
      selectedAvatar: '',
      iconList: [],
      userIconNm: '',
      iconCd: ''
    };
  },
  ionViewWillEnter() {
    // 진입할 때 호출
    // this.getCommunityUserNick();
    // this.getBannerList();
    // this.getCategoryList();
    // this.getInfoList();
    // this.getSelectUserIcon();
    // this.getSubCategoryList();
    // if (this.searchStr.length < 2) {
    //   this.searchStr = "";
    // }
    this.setLocalSearchAfterHide();
  },
  ionViewDidLeave() {
    // 떠날 때 호출
  },
  mounted() {
    this.getCommunityUserNick();
    this.getBannerList();
    this.getCategoryList();
    this.getInfoList();
    this.getSelectUserIcon();
  },

  methods: {
    communityChangeNick() {
      this.getCommunityUserNick();
      this.nickModal = false;
    },

    scrollToTop() {
      this.$refs.communityContainer.$el.scrollToTop(500);
    },

    getCommunityUserNick() {
      getData({
        url: '/getCommunityUserNick',
        param: {},
        then: (data) => {
          this.communityNick = data[0].communityLastnick;
        }
      });
    },

    getResult() {
      let resultObj = {};

      resultObj.categoryCd = this.categoryCd;
      resultObj.subBoardCd =
        this.subCategoryCd == 'popList' ? '' : this.subCategoryCd;

      resultObj.str = this.searchStr;
      resultObj.pageNo = this.pageNo;
      resultObj.pageSize = this.pageSize;

      return resultObj;
    },

    validateNickname($event) {
      // 정규식을 사용하여 특수문자 및 자음/모음만 있는지 확인합니다.
      const regex = /[{}[\]/?.,;:|)*~`!^\\-_+<>@#$%&()='"]/g;
      const regex2 = /\s/g;
      // const regex3 = /([^가-힣a-z\x20])/i;
      const regex3 = /[^가-힣a-zA-Z0-9_\s]/g;

      this.isNicknameValid =
        !regex.test($event.target.value) &&
        !regex2.test($event.target.value) &&
        !regex3.test($event.target.value);
    },

    saveCommunityNickname() {
      getData({
        url: '/getCommunityNickCheck',
        param: { nick: this.communityNick },
        then: (data) => {
          if (data.successYn === 'N') {
            this.isNicknameCheckValid = false;
            this.nickNameValidationMessage = '중복된 닉네임 입니다.';
            this.warningAlert('중복된 닉네임 입니다.');
          } else {
            this.showLoading();
            getData({
              url: '/setSaveCommunityNickname',
              param: { nick: this.communityNick, iconCd: this.iconCd },
              then: (data) => {
                if (data.successYn === 'Y') {
                  this.nickModal = false;
                  this.getCommunityUserNick();
                  this.warningAlert(data.message);
                } else {
                  this.warningAlert(data.message);
                }
                this.loading.dismiss();
              }
            });
          }
        }
      });

      // this.showLoading();
      // getData({
      //   url: "/setSaveCommunityNickname",
      //   param: { nick: this.communityNick, iconCd: this.iconCd },
      //   then: (data) => {
      //     if (data.successYn === "Y") {
      //       this.nickModal = false;
      //       this.getCommunityUserNick();
      //       this.warningAlert(data.message);
      //     } else {
      //       this.warningAlert(data.message);
      //     }
      //     this.loading.dismiss();
      //   }
      // });
    },
    /** 검색영역 입력 시 searchStr 저장 **/
    inputStr(e) {
      this.searchStr = e.target.value;
    },

    /** 인기순 조회 **/
    popListBtn() {
      //초기화
      this.BoardList = [];
      this.getPopList();
    },

    getPopList() {
      // 초기화
      this.pageNo = 1;
      this.pageSize = 30;
      this.currentPageNo = 1;
      this.BoardList = [];
      this.totalCount = 0;
      this.isEndScroll = false;

      getData({
        url: '/getPopList',
        param: {
          categoryCd: this.categoryCd,
          pageNo: this.pageNo,
          pageSize: this.pageSize,
          subBoardCd: ''
        },
        then: (data) => {
          this.BoardList = data.result;
          this.totalCount = data.totalCount;
        }
      });
    },

    /** 검색 시 조회 **/
    searchChat(event) {
      /** 엔터키 입력한게 아니라면 return **/
      if (event.keyCode != 13) {
        return;
      } else {
        /** 엔터키 입력했다면 실행 (두글자로 조회시 조회가 안됨 쿼리수정필요) **/
        if (this.searchStr.length === 0) {
          this.getBoardList(this.partitionCd);
        } else if (this.searchStr.length >= 2) {
          this.getBoardList(this.partitionCd);
        } else {
          this.warningAlert('', '2글자 이상 입력해야 합니다.');
        }
      }
    },

    searchBtn() {
      this.getBoardList(this.partitionCd);
    },

    /** 로딩창 **/
    async showLoading() {
      this.loading = await this.loadingController.create({
        message: 'Loading...',
        duration: 0
      });
      await this.loading.present();
    },

    nickSaveClick() {
      getData({
        url: '/getCommunityNickCheck',
        param: {},
        then: (data) => {}
      });
    },

    /** 카테고리 리스트 **/
    getCategoryList() {
      getData({
        url: '/getCategoryList',
        param: {},
        then: (data) => {
          this.categoryList = data;

          // 카테고리 초기화 막아버리기
          if (this.categoryCd === '') {
            //this.categoryCd = data[0].boardId;
            this.categoryCd = '';
          } // 처음 선택값
          this.$nextTick(() => {
            this.getSubCategoryList();
          });
        }
      });
    },

    getSubCategoryList() {
      getData({
        url: '/getSubCategoryList',
        param: {
          boardId: this.categoryCd
        },
        then: (data) => {
          this.subCategoryList = data;

          this.$nextTick(() => {
            if (this.subCategoryCd == 'popList') {
              this.getPopList();
            } else {
              this.getBoardList();
            }
          });
        }
      });
    },
    /** 카테고리 선택 아이템 **/
    categoryBtn(e) {
      this.subCategoryCd = '';

      // 초기화
      this.pageNo = 1;
      this.pageSize = 30;
      this.currentPageNo = 1;
      this.openChatList = [];
      this.totalCount = 0;
      this.isEndScroll = false;

      if (e == 'all') {
        this.categoryCd = '';
        this.subCategoryList = [];
      } else {
        this.categoryCd = e.boardId;
      }

      this.$nextTick(() => {
        // this.getBoardList();
        this.getSubCategoryList();
      });
    },
    subCategoryBtn(e) {
      this.subCategoryCd = e.subBoardCd;
      // 초기화
      this.pageNo = 1;
      this.pageSize = 30;
      this.currentPageNo = 1;
      this.openChatList = [];
      this.totalCount = 0;
      this.isEndScroll = false;

      this.$nextTick(() => {
        if (this.subCategoryCd == 'popList') {
          this.getPopList();
        } else {
          this.getBoardList();
        }
      });
    },

    /** 게시판 리스트 **/
    getBoardList() {
      // 초기화
      this.pageNo = 1;
      this.pageSize = 30;
      this.currentPageNo = 1;
      this.BoardList = [];
      this.totalCount = 0;
      this.isEndScroll = false;

      getData({
        url: '/getCommunityList',
        param: this.getResult(),
        then: (data) => {
          this.BoardList = data.result;
          this.totalCount = data.totalCount;

          this.setLocalSearchAfterHide();
        }
      });
    },

    ionInfinite(event) {
      let self = this;

      // 스크롤 로딩 셋타임아웃
      setTimeout(function () {
        self.pageNo = self.currentPageNo + 1;

        let url = '';
        if (self.subCategoryCd == 'popList') {
          url = '/getPopList';
        } else {
          url = '/getCommunityList';
        }

        getData({
          url: url,
          param: self.getResult(),
          then: (data) => {
            for (let i in data.result) {
              self.BoardList.push(data.result[i]);
            }
            self.currentPageNo += 1;
            self.$nextTick(() => {
              if (self.BoardList.length === self.totalCount)
                self.isEndScroll = true;
            });
          }
        });
        event.target.complete();
      }, 1000);
    },
    /* Refresh */
    doRefresh(e) {
      // this.getBoardList(this.segmentType);
      if (this.subCategoryCd == 'popList') {
        this.getPopList();
      } else {
        this.getBoardList();
      }
      setTimeout(() => {
        e.target.complete();
      }, 500);
    },

    goRouter(articleKey, data) {
      if (data.delYn === 'N') {

        communityViewMapFn({ article: articleKey, type: 'community' });
        this.$router.push('/communityView');

        /*getData({
          url: '/communityDropCheck',
          param: {
            articleKey: articleKey
          },
          then: (ret) => {
            if (ret.result == 'Y') {
              this.warningAlert('❌', '삭제된 게시글입니다.');
              this.$router.push('/community');
              return;
            } else {
              communityViewMapFn({ article: articleKey, type: 'community' });
              this.$router.push('/communityView');
            }
          }
        });*/
      } else if (data === 'new') {
        communityWriteMapFn({ type: 'new' });
        this.$router.push('/CommunityWrite');
      } else {
        this.warningAlert('❌', '삭제된 게시글입니다.');
      }
    },
    /** 경고 alert창 **/
    async warningAlert(title, message) {
      const alert = await this.alertController.create({
        header: title,
        subHeader: '',
        message: message,
        buttons: ['OK']
      });
      return alert.present();
    },
    /** 글자수 체크 **/
    customFormatter(inputLength, maxLength) {
      if (inputLength > maxLength) {
        return '더이상 입력할수 없습니다.';
      } else if (inputLength < 1) {
        return `최소 ${1 - inputLength}자 / 최대 8자`;
      } else {
        return `최소 글자수 완료 / 최대 ${maxLength - inputLength}자`;
      }
    },
    getBannerList() {
      getData({
        url: '/getBannerList',
        param: { bannerType: 'COMMUNITY' },
        //param: { bannerType: "HOME" },
        then: (data) => {
          this.$nextTick(() => {
            let sampleList = data;
            this.bannerList = [...sampleList].sort(() => Math.random() - 0.5);
          });
        }
      });
    },
    getInfoList() {
      getData({
        url: '/getInfoList',
        param: {},
        target: this,
        then: (data) => {
          this.bodyList = data.bodyList;
          this.drinkingList = data.drinkingList;
          this.smokeList = data.smokeList;
          this.iconList = data.iconList;
        }
      });
    },
    /** 아이콘 모달창 닫기 **/
    selectIcon(item) {
      this.iconCd = item.iconCd;
      this.userIconNm = item.iconNm;
    },
    /** 로그인 유저 정보 **/
    getSelectUserIcon() {
      getData({
        url: '/getSelectUserIcon',
        param: {},
        target: this,
        then: (data) => {
          this.userIconNm = data.iconNm;
          this.selectedAvatar = data.communityLasticon;
        }
      });
    },
    setLocalSearchAfterHide(){
      let localStorageBlockList1 = [];
      localStorageBlockList1 = JSON.parse(
        localStorage.getItem('articleBlockList')
      );

      for(let idx in localStorageBlockList1){
        for(let idx2 in this.BoardList)
        if(localStorageBlockList1[idx].articleKey == this.BoardList[idx2].articleKey){
          this.BoardList[idx2].title = '숨김처리된 게시글입니다.';
        }
      }
    },
  }
};
</script>

<style lang="scss" scoped>
ion-modal {
  padding: 0 18px;
  --height: 580px;

  ion-content {
    &::part(scroll) {
      overflow: hidden;
    }
  }

  &::part(content) {
    border-radius: var(--ion-border-radius-lg);
  }

  ion-avatar {
    position: relative;
    width: 140px;
    height: 140px;
    object-fit: cover;
    border: 2px solid var(--ion-color-warning);
    margin: 0 auto;

    .btn-profile {
      position: absolute;
      left: 0;
      right: 0;
      bottom: -1rem;
      margin: 0;

      &::part(native) {
        width: auto;
        height: 24px;
        margin: 0 auto;
        padding: 0 10px;
      }
    }
  }

  .profile-info {
    text-align: center;
  }
}

.errorText {
  font-size: 12px;
  position: absolute;
  color: #ff002a;
  margin: -15px 0 0 5px;
}
</style>
